package miden:base@1.0.0;

/// Types to be used in tx-kernel interface
interface core-types {
    /// Represents base field element in the field using Montgomery representation.
    /// Internal values represent x * R mod M where R = 2^64 mod M and x in [0, M).
    /// The backing type is `f64` but the internal values are always integer in the range [0, M).
    /// Field modulus M = 2^64 - 2^32 + 1
    record felt {
        /// We use f64 as the backing type for the field element. It has the size that we need and
        /// we don't plan to support floating point arithmetic in programs for Miden VM.
        inner: f64 
    }


    /// A group of four field elements in the Miden base field.
    type word = tuple<felt, felt, felt, felt>;
    
    /// Unique identifier of an account.
    ///
    /// Account ID consists of 1 field element (~64 bits). This field element uniquely identifies a
    /// single account and also specifies the type of the underlying account. Specifically:
    /// - The two most significant bits of the ID specify the type of the account:
    ///  - 00 - regular account with updatable code.
    ///  - 01 - regular account with immutable code.
    ///  - 10 - fungible asset faucet with immutable code.
    ///  - 11 - non-fungible asset faucet with immutable code.
    ///  - The third most significant bit of the ID specifies whether the account data is stored on-chain:
    ///  - 0 - full account data is stored on-chain.
    ///  - 1 - only the account hash is stored on-chain which serves as a commitment to the account state.
    /// As such the three most significant bits fully describes the type of the account.
    record account-id {
        inner: felt
    }
    
    /// Creates a new account ID from a field element.
    account-id-from-felt: func(felt: felt) -> account-id;

    /// Recipient of the note, i.e., hash(hash(hash(serial_num, [0; 4]), note_script_hash), input_hash)
    record recipient {
        inner: word
    }

    record tag {
        inner: felt
    }

    /// A fungible or a non-fungible asset.
    ///
    /// All assets are encoded using a single word (4 elements) such that it is easy to determine the
    /// type of an asset both inside and outside Miden VM. Specifically:
    ///   Element 1 will be:
    ///    - ZERO for a fungible asset
    ///    - non-ZERO for a non-fungible asset
    ///   The most significant bit will be:
    ///    - ONE for a fungible asset
    ///    - ZERO for a non-fungible asset
    ///
    /// The above properties guarantee that there can never be a collision between a fungible and a
    /// non-fungible asset.
    ///
    /// The methodology for constructing fungible and non-fungible assets is described below.
    ///
    /// # Fungible assets
    /// The most significant element of a fungible asset is set to the ID of the faucet which issued
    /// the asset. This guarantees the properties described above (the first bit is ONE).
    ///
    /// The least significant element is set to the amount of the asset. This amount cannot be greater
    /// than 2^63 - 1 and thus requires 63-bits to store.
    ///
    /// Elements 1 and 2 are set to ZERO.
    ///
    /// It is impossible to find a collision between two fungible assets issued by different faucets as
    /// the faucet_id is included in the description of the asset and this is guaranteed to be different
    /// for each faucet as per the faucet creation logic.
    ///
    /// # Non-fungible assets
    /// The 4 elements of non-fungible assets are computed as follows:
    /// - First the asset data is hashed. This compresses an asset of an arbitrary length to 4 field
    ///   elements: [d0, d1, d2, d3].
    /// - d1 is then replaced with the faucet_id which issues the asset: [d0, faucet_id, d2, d3].
    /// - Lastly, the most significant bit of d3 is set to ZERO.
    ///
    /// It is impossible to find a collision between two non-fungible assets issued by different faucets
    /// as the faucet_id is included in the description of the non-fungible asset and this is guaranteed
    /// to be different as per the faucet creation logic. Collision resistance for non-fungible assets
    /// issued by the same faucet is ~2^95.
    record core-asset {
        inner: word
    }

    /// Account nonce
    record nonce {
        inner: felt
    }

    /// Account hash
    record account-hash {
        inner: word
    }

    /// Block hash
    record block-hash {
        inner: word
    }

    /// Storage value
    record storage-value {
        inner: word
    }

    /// Account storage root
    record storage-root {
        inner: word
    }

    /// Account code root
    record account-code-root {
        inner: word
    }

    /// Commitment to the account vault
    record vault-commitment {
        inner: word
    }

    

    /// A list of field elements representing the inputs of a currently executing note
    /// 
    /// The static size data type (tuple) is used instead of a `list` 
    /// to avoid the need for a dynamic memory allocation when generating 
    /// the ABI mismatch adapter function for Miden API functions that return this type.
    type note-inputs = tuple<
        felt, // 1 note input
        felt, // 2 note input
        felt, // 3 note input
        felt, // 4 note input
        felt, // 5 note input
        felt, // 6 note input
        felt, // 7 note input
        felt, // 8 note input
        felt, // 9 note input
        felt, // 10 note input
        felt, // 11 note input
        felt, // 12 note input
        felt, // 13 note input
        felt, // 14 note input
        felt, // 15 note input
        felt, // 16 note input
        >;

}


/// Account-related functions 
interface account {
    use core-types.{felt,core-asset, tag, recipient, account-id, nonce, account-hash, storage-value, storage-root, account-code-root, vault-commitment};

    /// Get the id of the currently executing account
    get-id: func() -> account-id;
    /// Return the account nonce
    get-nonce: func() -> nonce;
    /// Get the initial hash of the currently executing account
    get-initial-hash: func() -> account-hash;
    /// Get the current hash of the account data stored in memory
    get-current-hash: func() -> account-hash;
    /// Increment the account nonce by the specified value. 
    /// value can be at most 2^32 - 1 otherwise this procedure panics
    incr-nonce: func(value: felt);
    /// Get the value of the specified key in the account storage
    get-item: func(index: felt) -> storage-value;
    /// Set the value of the specified key in the account storage
    /// Returns the old value of the key and the new storage root
    set-item: func(index: felt, value: storage-value) -> tuple<storage-root, storage-value>;
    /// Sets the code of the account the transaction is being executed against.
    /// This procedure can only be executed on regular accounts with updatable
    /// code. Otherwise, this procedure fails. code is the hash of the code
    /// to set.
    set-code: func(code-root: account-code-root);
    /// Returns the balance of a fungible asset associated with a account_id.
    /// Panics if the asset is not a fungible asset. account_id is the faucet id
    /// of the fungible asset of interest. balance is the vault balance of the
    /// fungible asset.
    get-balance: func(account-id: account-id) -> felt;
    /// Returns a boolean indicating whether the non-fungible asset is present
    /// in the vault. Panics if the asset is a fungible asset. asset is the
    /// non-fungible asset of interest. has_asset is a boolean indicating
    /// whether the account vault has the asset of interest.
    has-non-fungible-asset: func(asset: core-asset) -> bool;
    /// Add the specified asset to the vault. Panics under various conditions.
    /// Returns the final asset in the account vault defined as follows: If asset is
    /// a non-fungible asset, then returns the same as asset. If asset is a
    /// fungible asset, then returns the total fungible asset in the account
    /// vault after asset was added to it.
    add-asset: func(asset: core-asset) -> core-asset;
    /// Remove the specified asset from the vault
    remove-asset: func(asset: core-asset) -> core-asset;
    /// Returns the commitment to the account vault. 
    get-vault-commitment: func() -> vault-commitment;
}

// Note-related functions 
interface note {
    use core-types.{felt, core-asset, tag, recipient, account-id, nonce, account-hash, storage-value, storage-root, account-code-root, vault-commitment, note-inputs};
    
    /// Get the inputs of the currently executed note 
    get-inputs: func() -> note-inputs;
    /// Get the assets of the currently executing note 
    get-assets: func() -> list<core-asset>;
    /// Get the sender of the currently executing note
    get-sender: func() -> account-id;

}

/// Transaction-related functions
interface tx {
    use core-types.{felt, core-asset, tag, recipient, account-id, nonce, account-hash, storage-value, storage-root, account-code-root, vault-commitment, block-hash, word};

    /// Returns the block number of the last known block at the time of transaction execution.
    get-block-number: func() -> felt;
    /// Returns the block hash of the last known block at the time of transaction execution.
    get-block-hash: func() -> block-hash;
    /// Returns the input notes hash. This is computed as a sequential hash of
    /// (nullifier, script_root) tuples over all input notes.
    get-input-notes-hash: func() -> word;
    /// Returns the output notes hash. This is computed as a sequential hash of
    /// (note_hash, note_metadata) tuples over all output notes. 
    get-output-notes-hash: func() -> word;
    /// Creates a new note.
    /// asset is the asset to be included in the note.
    /// tag is the tag to be included in the note.
    /// recipient is the recipient of the note.
    /// Returns pointer to the created note.
    create-note: func(asset: core-asset, tag: tag, recipient: recipient) -> felt;
}

/// Asset-related functions. These functions can only be called by faucet accounts.
interface asset {
    use core-types.{felt, core-asset, tag, recipient, account-id, nonce, account-hash, storage-value, storage-root, account-code-root, vault-commitment, block-hash, word};

    /// Builds a fungible asset for the specified fungible faucet and amount.
    /// faucet_id is the faucet to create the asset for. 
    /// amount is the amount of the asset to create.
    /// Returns the created asset.
    build-fungible-asset: func(faucet-id: account-id, amount: felt) -> core-asset;
    /// Creates a fungible asset for the faucet the transaction is being
    /// executed against. 
    /// amount is the amount of the asset to create. 
    /// Returns the created asset.
    create-fungible-asset: func(amount: felt) -> core-asset;
    /// Builds a non-fungible asset for the specified non-fungible faucet and
    /// data-hash. 
    /// faucet_id is the faucet to create the asset for. 
    /// data-hash is the data hash of the non-fungible asset to build. 
    /// Returns the created asset.
    build-non-fungible-asset: func(faucet-id: account-id, data-hash: word) -> core-asset;
    /// Creates a non-fungible asset for the faucet the transaction is being executed against. 
    /// data-hash is the data hash of the non-fungible asset to create. 
    /// Returns the created asset.
    create-non-fungible-asset: func(data-hash: word) -> core-asset;
}


/// Faucet-related functions. These functions can only be called by faucet accounts.
interface faucet {
    use core-types.{felt, core-asset, tag, recipient, account-id, nonce, account-hash, storage-value, storage-root, account-code-root, vault-commitment, block-hash, word};

    /// Mint an asset from the faucet transaction is being executed against.
    /// Returns the minted asset.
    mint: func(asset: core-asset) -> core-asset;
    /// Burn an asset from the faucet transaction is being executed against.
    /// Returns the burned asset.
    burn: func(asset: core-asset) -> core-asset;
    /// Returns the total issuance of the fungible faucet the transaction is
    /// being executed against. Panics if the transaction is not being executed
    /// against a fungible faucet. 
    get-total-issuance: func() -> felt;

}


/// High-level representation of core types
interface types {
    use core-types.{felt, account-id, word, core-asset};

    /// A fungible asset 
    record fungible-asset {
        /// Faucet ID of the faucet which issued the asset as well as the asset amount. 
        asset: account-id,
        /// Asset amount is guaranteed to be 2^63 - 1 or smaller.
        amount: u64
    }

    /// A commitment to a non-fungible asset.
    ///
    /// A non-fungible asset consists of 4 field elements which are computed by hashing asset data
    /// (which can be of arbitrary length) to produce: [d0, d1, d2, d3].  We then replace d1 with the
    /// faucet_id that issued the asset: [d0, faucet_id, d2, d3]. We then set the most significant bit
    /// of the most significant element to ZERO.
    record non-fungible-asset {
        inner: word,
    }

    /// A fungible or a non-fungible asset.
    variant asset {
        fungible(fungible-asset),
        non-fungible(non-fungible-asset),
    }

    /// Converts a core asset to a an asset representation.
    from-core-asset: func(core-asset: core-asset) -> asset;
    /// Converts an asset to a core asset representation.
    to-core-asset: func(asset: asset) -> core-asset;
}


/// Note script interface that is expected to be implemented by the note script.
interface note-script {
    note-script: func();
}

world base-world {
    export types;
    export core-types;
}
