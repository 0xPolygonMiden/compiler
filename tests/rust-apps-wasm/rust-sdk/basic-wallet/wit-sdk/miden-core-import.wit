package miden:core-import@1.0.0;

interface intrinsics-mem {

    heap-base: func() -> s32;
}

interface intrinsics-felt {

    add: func(a: f32, b: f32) -> f32;
}

interface stdlib-crypto-hashes-blake3 {

    hash-one-to-one: func(a0: s32, a1: s32, a2: s32, a3: s32, a4: s32, a5: s32, a6: s32, a7: s32, result-ptr: s32);
}

interface account {

    /// Add the specified asset to the vault. Panics under various conditions.
    /// Returns the final asset in the account vault defined as follows: If asset is
    /// a non-fungible asset, then returns the same as asset. If asset is a
    /// fungible asset, then returns the total fungible asset in the account
    /// vault after asset was added to it.
    add-asset: func(asset0: f32, asset1: f32, asset2: f32, asset3: f32, result-ptr: s32);
    /// Remove the specified asset from the vault
    remove-asset: func(asset0: f32, asset1: f32, asset2: f32, asset3: f32, result-ptr: s32);
}

interface tx {

    /// Creates a new note.
    /// asset is the asset to be included in the note.
    /// tag is the tag to be included in the note.
    /// recipient is the recipient of the note.
    /// Returns the id of the created note.
    create-note: func(
        asset0: f32,
        asset1: f32,
        asset2: f32,
        asset3: f32,
        tag: f32,
        note-type: f32,
        recipient0: f32,
        recipient1: f32,
        recipient2: f32,
        recipient3: f32,
    ) -> f32;

}

world all {
    import intrinsics-mem;
    import intrinsics-felt;
    import stdlib-crypto-hashes-blake3;
    import account;
    import tx;

}