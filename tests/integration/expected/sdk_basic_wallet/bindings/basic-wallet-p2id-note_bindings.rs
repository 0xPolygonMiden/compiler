// Generated by `wit-bindgen` 0.14.0. DO NOT EDIT!
pub mod miden {
  pub mod base {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Represents base field element in the field using Montgomery representation.
      /// Internal values represent x * R mod M where R = 2^64 mod M and x in [0, M).
      /// The backing type is `u64` but the internal values are always in the range [0, M).
      /// Field modulus M = 2^64 - 2^32 + 1
      pub type Felt = u64;
      /// A group of four field elements in the Miden base field.
      pub type Word = (Felt,Felt,Felt,Felt,);
      /// Unique identifier of an account.
      /// 
      /// Account ID consists of 1 field element (~64 bits). This field element uniquely identifies a
      /// single account and also specifies the type of the underlying account. Specifically:
      /// - The two most significant bits of the ID specify the type of the account:
      /// - 00 - regular account with updatable code.
      /// - 01 - regular account with immutable code.
      /// - 10 - fungible asset faucet with immutable code.
      /// - 11 - non-fungible asset faucet with immutable code.
      /// - The third most significant bit of the ID specifies whether the account data is stored on-chain:
      /// - 0 - full account data is stored on-chain.
      /// - 1 - only the account hash is stored on-chain which serves as a commitment to the account state.
      /// As such the three most significant bits fully describes the type of the account.
      pub type AccountId = Felt;
      /// Recipient of the note, i.e., hash(hash(hash(serial_num, [0; 4]), note_script_hash), input_hash)
      pub type Recipient = Word;
      pub type Tag = Felt;
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Asset{
        handle: ::cargo_component_bindings::rt::Resource<Asset>,
      }
      
      impl Asset{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: ::cargo_component_bindings::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          ::cargo_component_bindings::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          ::cargo_component_bindings::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl ::cargo_component_bindings::rt::WasmResource for Asset{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "miden:base/types@1.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]asset"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// Inputs of the currently executed note (4 words = 16 felts)
      pub type NoteInputs = (Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,Felt,);
      impl Asset {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(word: Word,) -> Self{
          
          #[allow(unused_imports)]
          use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let (t0_0, t0_1, t0_2, t0_3, ) = word;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "miden:base/types@1.0.0")]
            extern "C" {
              #[link_name = "[constructor]asset"]
              fn wit_import(_: i64, _: i64, _: i64, _: i64, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i64, _: i64, _: i64, _: i64, ) -> i32{ unreachable!() }
            let ret = wit_import(::cargo_component_bindings::rt::as_i64(t0_0), ::cargo_component_bindings::rt::as_i64(t0_1), ::cargo_component_bindings::rt::as_i64(t0_2), ::cargo_component_bindings::rt::as_i64(t0_3));
            Asset::from_handle(ret as u32)
          }
        }
      }
      impl Asset {
        #[allow(unused_unsafe, clippy::all)]
        pub fn as_word(&self,) -> Word{
          
          #[allow(unused_imports)]
          use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(8))]
            struct RetArea([u8; 32]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "miden:base/types@1.0.0")]
            extern "C" {
              #[link_name = "[method]asset.as-word"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *((ptr0 + 0) as *const i64);
            let l2 = *((ptr0 + 8) as *const i64);
            let l3 = *((ptr0 + 16) as *const i64);
            let l4 = *((ptr0 + 24) as *const i64);
            (l1 as u64, l2 as u64, l3 as u64, l4 as u64)
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod tx_kernel {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Asset = super::super::super::miden::base::types::Asset;
      pub type Tag = super::super::super::miden::base::types::Tag;
      pub type Recipient = super::super::super::miden::base::types::Recipient;
      pub type NoteInputs = super::super::super::miden::base::types::NoteInputs;
      pub type AccountId = super::super::super::miden::base::types::AccountId;
      #[allow(unused_unsafe, clippy::all)]
      /// Get the id of the currently executing account
      pub fn get_id() -> AccountId{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "get-id"]
            fn wit_import() -> i64;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Add the specified asset to the vault
      pub fn add_asset(asset: Asset,) -> Asset{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "add-asset"]
            fn wit_import(_: i32, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ) -> i32{ unreachable!() }
          let ret = wit_import((asset).into_handle() as i32);
          super::super::super::miden::base::types::Asset::from_handle(ret as u32)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Remove the specified asset from the vault
      pub fn remove_asset(asset: Asset,) -> Asset{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "remove-asset"]
            fn wit_import(_: i32, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ) -> i32{ unreachable!() }
          let ret = wit_import((asset).into_handle() as i32);
          super::super::super::miden::base::types::Asset::from_handle(ret as u32)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Creates a new note.
      /// asset is the asset to be included in the note.
      /// tag is the tag to be included in the note.
      /// recipient is the recipient of the note.
      pub fn create_note(asset: Asset,tag: Tag,recipient: Recipient,){
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (t0_0, t0_1, t0_2, t0_3, ) = recipient;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "create-note"]
            fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, ){ unreachable!() }
          wit_import((asset).into_handle() as i32, ::cargo_component_bindings::rt::as_i64(tag), ::cargo_component_bindings::rt::as_i64(t0_0), ::cargo_component_bindings::rt::as_i64(t0_1), ::cargo_component_bindings::rt::as_i64(t0_2), ::cargo_component_bindings::rt::as_i64(t0_3));
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get the inputs of the currently executed note
      pub fn get_inputs() -> NoteInputs{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(8))]
          struct RetArea([u8; 128]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "get-inputs"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i64);
          let l2 = *((ptr0 + 8) as *const i64);
          let l3 = *((ptr0 + 16) as *const i64);
          let l4 = *((ptr0 + 24) as *const i64);
          let l5 = *((ptr0 + 32) as *const i64);
          let l6 = *((ptr0 + 40) as *const i64);
          let l7 = *((ptr0 + 48) as *const i64);
          let l8 = *((ptr0 + 56) as *const i64);
          let l9 = *((ptr0 + 64) as *const i64);
          let l10 = *((ptr0 + 72) as *const i64);
          let l11 = *((ptr0 + 80) as *const i64);
          let l12 = *((ptr0 + 88) as *const i64);
          let l13 = *((ptr0 + 96) as *const i64);
          let l14 = *((ptr0 + 104) as *const i64);
          let l15 = *((ptr0 + 112) as *const i64);
          let l16 = *((ptr0 + 120) as *const i64);
          (l1 as u64, l2 as u64, l3 as u64, l4 as u64, l5 as u64, l6 as u64, l7 as u64, l8 as u64, l9 as u64, l10 as u64, l11 as u64, l12 as u64, l13 as u64, l14 as u64, l15 as u64, l16 as u64)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get the assets of the currently executing note
      pub fn get_assets() -> ::cargo_component_bindings::rt::vec::Vec::<Asset>{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:base/tx-kernel@1.0.0")]
          extern "C" {
            #[link_name = "get-assets"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let base4 = l1;
          let len4 = l2;
          let mut result4 = Vec::with_capacity(len4 as usize);
          for i in 0..len4 {
            let base = base4 + i * 4;
            let e4 = {
              let l3 = *((base + 0) as *const i32);
              
              super::super::super::miden::base::types::Asset::from_handle(l3 as u32)
            };
            result4.push(e4);
          }
          ::cargo_component_bindings::rt::dealloc(base4, (len4 as usize) * 4, 4);
          result4
        }
      }
      
    }
    
  }
  pub mod basic_wallet {
    
    #[allow(clippy::all)]
    pub mod basic_wallet {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Asset = super::super::super::miden::base::types::Asset;
      pub type Tag = super::super::super::miden::base::types::Tag;
      pub type Recipient = super::super::super::miden::base::types::Recipient;
      #[allow(unused_unsafe, clippy::all)]
      pub fn receive_asset(asset: Asset,){
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:basic-wallet/basic-wallet@1.0.0")]
          extern "C" {
            #[link_name = "receive-asset"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import((asset).into_handle() as i32);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn send_asset(asset: Asset,tag: Tag,recipient: Recipient,){
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let (t0_0, t0_1, t0_2, t0_3, ) = recipient;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:basic-wallet/basic-wallet@1.0.0")]
          extern "C" {
            #[link_name = "send-asset"]
            fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i64, _: i64, _: i64, _: i64, _: i64, ){ unreachable!() }
          wit_import((asset).into_handle() as i32, ::cargo_component_bindings::rt::as_i64(tag), ::cargo_component_bindings::rt::as_i64(t0_0), ::cargo_component_bindings::rt::as_i64(t0_1), ::cargo_component_bindings::rt::as_i64(t0_2), ::cargo_component_bindings::rt::as_i64(t0_3));
        }
      }
      
    }
    
  }
  pub mod basic_wallet_helpers {
    
    #[allow(clippy::all)]
    pub mod check_helpers {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Asset = super::super::super::miden::base::types::Asset;
      #[allow(unused_unsafe, clippy::all)]
      /// Some wallet's helper function that checks if an asset meets some criteria.
      pub fn some_asset_check(asset: &Asset,) -> bool{
        
        #[allow(unused_imports)]
        use ::cargo_component_bindings::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "miden:basic-wallet-helpers/check-helpers@1.0.0")]
          extern "C" {
            #[link_name = "some-asset-check"]
            fn wit_import(_: i32, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ) -> i32{ unreachable!() }
          let ret = wit_import((asset).handle() as i32);
          ::cargo_component_bindings::rt::bool_lift(ret as u8)
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:notes-world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1123] = [3, 0, 11, 110, 111, 116, 101, 115, 45, 119, 111, 114, 108, 100, 0, 97, 115, 109, 13, 0, 1, 0, 7, 221, 7, 1, 65, 2, 1, 65, 13, 1, 66, 21, 1, 119, 4, 0, 4, 102, 101, 108, 116, 3, 0, 0, 1, 111, 4, 1, 1, 1, 1, 4, 0, 4, 119, 111, 114, 100, 3, 0, 2, 4, 0, 10, 97, 99, 99, 111, 117, 110, 116, 45, 105, 100, 3, 0, 1, 4, 0, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 3, 0, 3, 4, 0, 3, 116, 97, 103, 3, 0, 1, 1, 114, 2, 5, 97, 115, 115, 101, 116, 4, 6, 97, 109, 111, 117, 110, 116, 119, 4, 0, 14, 102, 117, 110, 103, 105, 98, 108, 101, 45, 97, 115, 115, 101, 116, 3, 0, 7, 4, 0, 18, 110, 111, 110, 45, 102, 117, 110, 103, 105, 98, 108, 101, 45, 97, 115, 115, 101, 116, 3, 0, 3, 1, 113, 2, 8, 102, 117, 110, 103, 105, 98, 108, 101, 1, 8, 0, 12, 110, 111, 110, 45, 102, 117, 110, 103, 105, 98, 108, 101, 1, 9, 0, 4, 0, 13, 97, 115, 115, 101, 116, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 10, 4, 0, 5, 97, 115, 115, 101, 116, 3, 1, 1, 111, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 11, 110, 111, 116, 101, 45, 105, 110, 112, 117, 116, 115, 3, 0, 13, 1, 105, 12, 1, 64, 1, 4, 119, 111, 114, 100, 3, 0, 15, 4, 0, 18, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 115, 115, 101, 116, 1, 16, 1, 104, 12, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 3, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 97, 115, 115, 101, 116, 46, 97, 115, 45, 119, 111, 114, 100, 1, 18, 3, 1, 22, 109, 105, 100, 101, 110, 58, 98, 97, 115, 101, 47, 116, 121, 112, 101, 115, 64, 49, 46, 48, 46, 48, 5, 0, 2, 3, 0, 0, 5, 97, 115, 115, 101, 116, 2, 3, 0, 0, 3, 116, 97, 103, 2, 3, 0, 0, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 2, 3, 0, 0, 11, 110, 111, 116, 101, 45, 105, 110, 112, 117, 116, 115, 2, 3, 0, 0, 10, 97, 99, 99, 111, 117, 110, 116, 45, 105, 100, 1, 66, 23, 2, 3, 2, 1, 1, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 3, 116, 97, 103, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 3, 0, 4, 2, 3, 2, 1, 4, 4, 0, 11, 110, 111, 116, 101, 45, 105, 110, 112, 117, 116, 115, 3, 0, 6, 2, 3, 2, 1, 5, 4, 0, 10, 97, 99, 99, 111, 117, 110, 116, 45, 105, 100, 3, 0, 8, 1, 64, 0, 0, 9, 4, 0, 6, 103, 101, 116, 45, 105, 100, 1, 10, 1, 105, 1, 1, 64, 1, 5, 97, 115, 115, 101, 116, 11, 0, 11, 4, 0, 9, 97, 100, 100, 45, 97, 115, 115, 101, 116, 1, 12, 4, 0, 12, 114, 101, 109, 111, 118, 101, 45, 97, 115, 115, 101, 116, 1, 12, 1, 64, 3, 5, 97, 115, 115, 101, 116, 11, 3, 116, 97, 103, 3, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 5, 1, 0, 4, 0, 11, 99, 114, 101, 97, 116, 101, 45, 110, 111, 116, 101, 1, 13, 1, 64, 0, 0, 7, 4, 0, 10, 103, 101, 116, 45, 105, 110, 112, 117, 116, 115, 1, 14, 1, 112, 11, 1, 64, 0, 0, 15, 4, 0, 10, 103, 101, 116, 45, 97, 115, 115, 101, 116, 115, 1, 16, 3, 1, 26, 109, 105, 100, 101, 110, 58, 98, 97, 115, 101, 47, 116, 120, 45, 107, 101, 114, 110, 101, 108, 64, 49, 46, 48, 46, 48, 5, 6, 1, 66, 11, 2, 3, 2, 1, 1, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 3, 116, 97, 103, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 3, 0, 4, 1, 105, 1, 1, 64, 1, 5, 97, 115, 115, 101, 116, 6, 1, 0, 4, 0, 13, 114, 101, 99, 101, 105, 118, 101, 45, 97, 115, 115, 101, 116, 1, 7, 1, 64, 3, 5, 97, 115, 115, 101, 116, 6, 3, 116, 97, 103, 3, 9, 114, 101, 99, 105, 112, 105, 101, 110, 116, 5, 1, 0, 4, 0, 10, 115, 101, 110, 100, 45, 97, 115, 115, 101, 116, 1, 8, 3, 1, 37, 109, 105, 100, 101, 110, 58, 98, 97, 115, 105, 99, 45, 119, 97, 108, 108, 101, 116, 47, 98, 97, 115, 105, 99, 45, 119, 97, 108, 108, 101, 116, 64, 49, 46, 48, 46, 48, 5, 7, 1, 66, 5, 2, 3, 2, 1, 1, 4, 0, 5, 97, 115, 115, 101, 116, 3, 0, 0, 1, 104, 1, 1, 64, 1, 5, 97, 115, 115, 101, 116, 2, 0, 127, 4, 0, 16, 115, 111, 109, 101, 45, 97, 115, 115, 101, 116, 45, 99, 104, 101, 99, 107, 1, 3, 3, 1, 46, 109, 105, 100, 101, 110, 58, 98, 97, 115, 105, 99, 45, 119, 97, 108, 108, 101, 116, 45, 104, 101, 108, 112, 101, 114, 115, 47, 99, 104, 101, 99, 107, 45, 104, 101, 108, 112, 101, 114, 115, 64, 49, 46, 48, 46, 48, 5, 8, 4, 1, 28, 109, 105, 100, 101, 110, 58, 112, 50, 105, 100, 47, 110, 111, 116, 101, 115, 45, 119, 111, 114, 108, 100, 64, 49, 46, 48, 46, 48, 4, 0, 11, 17, 1, 0, 11, 110, 111, 116, 101, 115, 45, 119, 111, 114, 108, 100, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 52, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
