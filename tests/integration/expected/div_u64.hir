module noname

const $0 = 0x00100000;
const $1 = 0x001000bc;
const $2 = 0x001000c0;

global external @__stack_pointer : i32 = $0 { id = 0 };
global external @gv1 : i32 = $1 { id = 1 };
global external @gv2 : i32 = $2 { id = 2 };

pub fn <T as core::any::Any>::type_id(i32, i32) {
block0(v0: i32, v1: i32):
    v2 = const.i64 -1688046730280208939 : i64;
    v3 = cast v0 : u32;
    v4 = add.checked v3, 8 : u32;
    v5 = inttoptr v4 : *mut i64;
    store v5, v2;
    v6 = const.i64 -2518113060735759681 : i64;
    v7 = cast v0 : u32;
    v8 = inttoptr v7 : *mut i64;
    store v8, v6;
    ret;
}

pub fn core::ptr::drop_in_place<core::fmt::Error>(i32) {
block0(v0: i32):
    ret;
}

pub fn entrypoint(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v3 = eq v1, 0 : i1;
    v4 = cast v3 : i32;
    v5 = neq v4, 0 : i1;
    condbr v5, block2, block3;

block1(v2: i64):

block2:
    v10 = const.i32 1048720 : i32;
    v11 = const.i32 25 : i32;
    v12 = const.i32 1048692 : i32;
    call noname::core::panicking::panic(v10, v11, v12);
    unreachable ;

block3:
    v6 = cast v0 : u64;
    v7 = cast v1 : u64;
    v8 = div.checked v6, v7 : u64;
    v9 = cast v8 : i64;
    ret v9;
}

pub fn core::panicking::panic(i32, i32, i32) {
block0(v0: i32, v1: i32, v2: i32):
    v3 = const.i32 0 : i32;
    v4 = global.load (@__stack_pointer) as *mut i8 : i32;
    v5 = const.i32 32 : i32;
    v6 = sub.wrapping v4, v5 : i32;
    v7 = global.symbol @__stack_pointer : *mut i32;
    store v7, v6;
    v8 = const.i32 12 : i32;
    v9 = add.wrapping v6, v8 : i32;
    v10 = const.i64 0 : i64;
    v11 = cast v9 : u32;
    v12 = inttoptr v11 : *mut i64;
    store v12, v10;
    v13 = const.i32 1 : i32;
    v14 = cast v6 : u32;
    v15 = add.checked v14, 4 : u32;
    v16 = inttoptr v15 : *mut i32;
    store v16, v13;
    v17 = const.i32 1048748 : i32;
    v18 = cast v6 : u32;
    v19 = add.checked v18, 8 : u32;
    v20 = inttoptr v19 : *mut i32;
    store v20, v17;
    v21 = cast v6 : u32;
    v22 = add.checked v21, 28 : u32;
    v23 = inttoptr v22 : *mut i32;
    store v23, v1;
    v24 = cast v6 : u32;
    v25 = add.checked v24, 24 : u32;
    v26 = inttoptr v25 : *mut i32;
    store v26, v0;
    v27 = const.i32 24 : i32;
    v28 = add.wrapping v6, v27 : i32;
    v29 = cast v6 : u32;
    v30 = inttoptr v29 : *mut i32;
    store v30, v28;
    call noname::core::panicking::panic_fmt(v6, v2);
    unreachable ;

block1:
}

pub fn core::panicking::panic_fmt(i32, i32) {
block0(v0: i32, v1: i32):
    v2 = const.i32 0 : i32;
    v3 = global.load (@__stack_pointer) as *mut i8 : i32;
    v4 = const.i32 32 : i32;
    v5 = sub.wrapping v3, v4 : i32;
    v6 = global.symbol @__stack_pointer : *mut i32;
    store v6, v5;
    v7 = cast v5 : u32;
    v8 = add.checked v7, 24 : u32;
    v9 = inttoptr v8 : *mut i32;
    store v9, v0;
    v10 = const.i32 1048748 : i32;
    v11 = cast v5 : u32;
    v12 = add.checked v11, 16 : u32;
    v13 = inttoptr v12 : *mut i32;
    store v13, v10;
    v14 = const.i32 1048748 : i32;
    v15 = cast v5 : u32;
    v16 = add.checked v15, 12 : u32;
    v17 = inttoptr v16 : *mut i32;
    store v17, v14;
    v18 = const.i32 1 : i32;
    v19 = trunc v18 : u8;
    v20 = cast v5 : u32;
    v21 = add.checked v20, 28 : u32;
    v22 = inttoptr v21 : *mut u8;
    store v22, v19;
    v23 = cast v5 : u32;
    v24 = add.checked v23, 20 : u32;
    v25 = inttoptr v24 : *mut i32;
    store v25, v1;
    v26 = const.i32 12 : i32;
    v27 = add.wrapping v5, v26 : i32;
    call noname::rust_begin_unwind(v27);
    unreachable ;

block1:
}

pub fn rust_begin_unwind(i32) {
block0(v0: i32):
    br block2;

block1:

block2:
    br block2;

block3:
}
