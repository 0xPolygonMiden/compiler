use core::num::NonZeroU16;

use either::Either::{self, Left, Right};

use crate::diagnostics::{Span, SourceId, SourceSpan, ByteIndex};
use crate::{AbiParam, ArgumentExtension, ArgumentPurpose};
use crate::{CallConv, ConstantData, ExternalFunction, FunctionIdent, RegionId};
use crate::{Ident, Linkage, Opcode, Overflow, Signature, symbols, Symbol};
use crate::{Type, TypeRepr, AddressSpace, StructType};
use crate::{Local, LocalId};
use crate::{AttributeSet, Attribute, AttributeValue};
use crate::parser::{
    ast::*,
    lexer::Token,
    ParseError
};

/// Overview of grammar (not authoritative, or exhaustive):
///
///  MODULE          ::= "(" "module" ID MODULE_ATTRS* MODULE_FORMS+ ")"
///  MODULE_ATTR     ::= "(" "kernel" ")"
///  MODULE_FORMS    ::= CONSTANT
///                    | GLOBAL
///                    | DATA_SEGMENT
///                    | FUNC
///
///  CONSTANT  ::= "(" "const" INDEX HEX_BYTES ")"
///  CONST_ID  ::= "(" "const" U32 ")"
///
///  GLOBAL       ::= "(" "global" GLOBAL_ID INDEX TYPE GLOBAL_INIT? ")"
///  GLOBAL_ID    ::= ID
///                 | "(" "export" NAME_OR_ID ")"
///  GLOBAL_INIT  ::= CONST_ID
///
///  DATA_SEGMENT ::= "(" "data" MUTABLE? OFFSET HEX_BYTES ")"
///  MUTABLE ::= "(" "mut" ")"
///
///  FUNC ::= "(" "func" FUNC_ID FUNC_ATTR* PARAM* RESULT? LOCAL* BLOCK+ ")"
///  FUNC_ID ::= ID
///            | "(" "export" NAME_OR_ID ")"
///            | "(" "import" MODULE_NAME_OR_ID FUNCTION_NAME_OR_ID ")"
///  FUNC_ATTR  ::= "(" "cc" CALL_CONV ")"
///
///  PARAM  ::= "(" "param" PARAM_ATTRS* TYPE_NAME ")"
///  PARAM_ATTR  ::= "(" "sret" ")"
///               |  "(" "zext" ")"
///               |  "(" "sext" ")"
///
///  RESULT ::= "(" "result" TYPE_NAME ")"
///
///  LOCAL ::= "(" "local" LOCAL_ID TYPE_NAME ")"
///
///  REGION ::= "(" "region" REGION_ID REGION_PARAMS BLOCK+ ")
///  REGION_PARAMS  ::= "(" "params" TYPE_NAME* ")"
///
///  BLOCK ::= "(" "block" BLOCK_ID BLOCK_PARAM* INST+ ")
///  BLOCK_PARAM  ::= "(" "param" VALUE_ID TYPE_NAME ")"
///
///  INST ::= NO_RESULTS_OP
///         | ONE_RESULT_OP
///         | MANY_RESULT_OP
///         | "(" "br" SUCCESSOR ")"
///         | "(" "condbr" VALUE_ID SUCCESSOR SUCCESSOR ")"
///         | "(" "switch" VALUE_ID SWITCH_ARM* "(" "_" "." SUCCESSOR ")" ")"
///         | "(" "if.true" VALUE_ID REGION REGION ")"
///         | "(" "while.true" REGION REGION ")"
///
///  NO_RESULTS_OP  ::= "(" OPCODE OPERAND* ")"
///  ONE_RESULT_OP  ::= "(" "let" VALUE_ID NO_RESULTS_OP ")"
///  MANY_RESULT_OP ::= "(" "let" "[" VALUE_ID+ "]" NO_RESULTS_OP ")"
///
///  OPCODE ::= "unreachable"
///           | "ret"
///           | ...
///
///  SWITCH_ARM ::= "(" U32 "." SUCCESSOR ")"
///
///  SUCCESSOR ::= "(" BLOCK_ID VALUE_ID* ")"
///
///  TYPE ::= "(" "type" TYPE_NAME ")"
///  TYPE_NAME ::= "i32"
///              | "(" "ptr" TYPE_NAME ")"
///              | ...
///  TYPED_VALUE_ID ::= (VALUE_ID TYPE_NAME)
///
///  INDEX     ::= "(" "id" U32 ")"
///  OFFSET    ::= "(" "offset" I32 ")"
///  LOCAL_ID  ::= [\d]+
///  REGION_ID ::= [\d]+
///  BLOCK_ID  ::= [\d]+
///  VALUE_ID  ::= v[\d]+
///  ID        ::= "#" BARE_NAME
///  NAME      ::= "\"" [^\s"]+ "\""
///  BARE_NAME ::= [^[[:cntrl:]]:;,'"\s\\]+


grammar(source_id: SourceId, next_var: &mut usize);

// MACROS
// ================================================================================================

// Comma-delimited with at least one element
#[inline]
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

// Comma-delimited, possibly empty, possibly with a trailing comma
#[inline]
CommaOpt<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => {
        let mut v = v;
        v.extend(e);
        v
    }
};

// AST NODE
// ================================================================================================

pub Module: Module = {
    <l:@L> "(" "module" <name:Id> <attrs:ModuleAttr*> <forms:ModuleForm*> ")" <r:@R> => {
        let is_kernel = attrs.iter().any(|attr| attr.name == symbols::Kernel && attr.value.as_bool().unwrap_or_default());
        Module::new(span!(source_id, l, r), name, is_kernel, forms)
    },
}

ModuleAttr: Attribute = {
    "(" "kernel" ")" => Attribute::new(symbols::Kernel, true),
}

ModuleForm: Form = {
    ConstantDeclaration => Form::Constant(<>),
    GlobalVarDeclaration => Form::Global(<>),
    DataSegmentDeclaration => Form::DataSegment(<>),
    FunctionDeclaration,
}

// GLOBALS
// ================================================================================================

ConstantDeclaration: ConstantDeclaration = {
    <l:@L> "(" "const" <id:Index> <init:HexString> ")" <r:@R>
        => ConstantDeclaration::new(span!(source_id, l, r), crate::Constant::from_u32(id), init),
}

GlobalVarDeclaration: GlobalVarDeclaration = {
    <l:@L> "(" "global" <name_and_linkage:GlobalId> <id:Index> <ty:Type> <init:GlobalInit?> ")" <r:@R> => {
        let (name, linkage) = name_and_linkage;
        GlobalVarDeclaration::new(span!(source_id, l, r), crate::GlobalVariable::from_u32(id), name, ty, linkage, init)
    }
}

DataSegmentDeclaration: DataSegmentDeclaration = {
    <l:@L> "(" "data" <is_mut:("(" "mut" ")")?> <offset:("(" "offset" <U32> ")")> <size:("(" "size" <U32> ")")?> <data:DataSegmentValue> ")" <r:@R> => {
        let readonly = is_mut.is_none();
        let size = size.unwrap_or(data.len().try_into().expect("invalid data segment: data cannot be more than 2^32 bytes"));
        DataSegmentDeclaration::new(span!(source_id, l, r), offset, size, readonly, data)
    }
}

DataSegmentValue: crate::ConstantData = {
    <HexString>
}

GlobalId: (Ident, Linkage) = {
    "(" "export" <name:NameOrId> ")" => (name, Linkage::External),
    <name:Id> => (name, Linkage::Internal),
}

GlobalInit: crate::Constant = {
    "(" "const" <id:U32> ")" => crate::Constant::from_u32(id),
}

// TYPES
// ==============================================================================================

Type: Type = {
    "(" "type" <TypeName> ")"
}

TypeName: Type = {
    "?" => Type::Unknown,
    "!" => Type::Never,
    "i1" => Type::I1,
    "i8" => Type::I8,
    "u8" => Type::U8,
    "i16" => Type::I16,
    "u16" => Type::U16,
    "i32" => Type::I32,
    "u32" => Type::U32,
    "i64" => Type::I64,
    "u64" => Type::U64,
    "i128" => Type::I128,
    "u128" => Type::U128,
    "u256" => Type::U256,
    "f64" => Type::F64,
    "felt" => Type::Felt,
    "(" ")" => Type::Unit,
    PointerType,
    StructType,
    ArrayType,
}

SpannedTypeName: Span<Type> = {
    <l:@L> <ty:TypeName> <r:@R> => Span::new(span!(source_id, l, r), ty),
}

PointerType: Type = {
    "(" "ptr" <addrspace:("(" "addrspace" <AddressSpace> ")")?> <pointee:TypeName> ")" => {
        match addrspace {
            None => Type::Ptr(Box::new(pointee)),
            Some(addrspace) => Type::NativePtr(Box::new(pointee), addrspace),
        }
    }
}

StructType: Type = {
    "(" "struct" <repr:TypeRepr?> <fields:TypeName+> ")" => {
        if let Some(repr) = repr {
            Type::Struct(StructType::new_with_repr(repr, fields))
        } else {
            Type::Struct(StructType::new(fields))
        }
    }
}

TypeRepr: TypeRepr = {
    "(" "repr" "transparent" ")" => TypeRepr::Transparent,
    "(" "repr" <align:("(" "align" <Align> ")")> ")" => TypeRepr::Align(align),
    "(" "repr" <align:("(" "packed" <Align> ")")> ")" => TypeRepr::Packed(align),
}

ArrayType: Type = {
    "(" "array" <element:TypeName> <len:U32> ")" => Type::Array(Box::new(element), usize::try_from(len).unwrap()),
}

AddressSpace: AddressSpace = {
    <l:@L> "?" <r:@R> => AddressSpace::Unknown,
    <l:@L> <i:int> <r:@R> =>? {
        match u16::try_from(i) {
            Ok(0) => Ok(AddressSpace::Root),
            Ok(v) => Ok(AddressSpace::Id(unsafe { NonZeroU16::new_unchecked(v) })),
            Err(_) => Err(ParseError::InvalidAddrSpace { span: span!(source_id, l, r), value: i }.into()),
        }
    }
}

// ATTRIBUTES
// ==============================================================================================

Attributes: AttributeSet = {
    "[" <attrs:Attribute*> "]" => AttributeSet::from_iter(attrs),
}

Attribute: Attribute = {
    <name:Id> => Attribute { name: name.as_symbol(), value: AttributeValue::Unit },

    "(" <name:Id> <value:AttributeValue> ")" => Attribute { name: name.as_symbol(), value },
}

AttributeValue: AttributeValue = {
    <name:ident> => match name {
        symbols::True => AttributeValue::Bool(true),
        symbols::False => AttributeValue::Bool(false),
        symbol => AttributeValue::String(symbol),
    },

    <quoted:string> => AttributeValue::String(quoted),

    <n:Int> => AttributeValue::Int(n),

    => AttributeValue::Unit,
}

// FUNCTIONS
// ==============================================================================================

FunctionDeclaration: Form = {
    <l:@L> "(" "func" <name_and_linkage:FuncId> <cc:CallConvAttr?> <params:FuncParam*> <result:FuncResult?> <locals:Local*> <mut blocks:Block*> ")" <r:@R> =>? {
        let (name, linkage) = name_and_linkage;
        let cc = cc.unwrap_or(CallConv::SystemV);
        let region_params = params.iter().map(|abi_param| Span::new(abi_param.span(), abi_param.ty.clone())).collect();
        let region_results = result.as_ref().map(|abi_param| vec![Span::new(abi_param.span(), abi_param.ty.clone())]).unwrap_or_default();
        let params = params.into_iter().map(|spanned| spanned.into_inner()).collect();
        let results = result.map(|res| vec![res.into_inner()]).unwrap_or_default();
        let signature = Signature {
            params,
            results,
            cc,
            linkage,
        };
        match name {
            Left(name) if blocks.is_empty() =>  Err(ParseError::EmptyFunction { span: span!(source_id, l, r) }.into()),
            Left(name) => {
                let span = span!(source_id, l, r);
                let region_id = RegionId::from_u32(0);
                for block in blocks.iter_mut() {
                    block.region_id = region_id;
                }
                let region = Region::new(span, region_id, region_params, region_results, blocks);
                Ok(Form::Function(FunctionDeclaration::new(span, name, signature, locals, region, AttributeSet::default())))
            }
            Right(id) if !blocks.is_empty() => Err(ParseError::ImportedFunctionWithBody { span: span!(source_id, l, r) }.into()),
            Right(id) => {
                Ok(Form::ExternalFunction(Span::new(span!(source_id, l, r), ExternalFunction {
                    id,
                    signature,
                })))
            }
        }
    },
}

FuncId: (Either<Ident, FunctionIdent>, Linkage) = {
    "(" "export" <NameOrId> ")" => (Left(<>), Linkage::External),
    "(" "import" <m:NameOrId> <f:NameOrId> ")" => (Right(FunctionIdent { module: m, function: f }), Linkage::External),
    <NameOrId> => (Left(<>), Linkage::Internal),
}

FuncParam: Span<AbiParam> = {
    <l:@L> "(" "param" "(" "sret" ")" <ty:TypeName> ")" <r:@R>
        => Span::new(span!(source_id, l, r), AbiParam { ty, purpose: ArgumentPurpose::StructReturn, extension: ArgumentExtension::None }),
    <l:@L> "(" "param" "(" <extension:ArgumentExtension> ")" <ty:TypeName> ")" <r:@R>
        => Span::new(span!(source_id, l, r), AbiParam { ty, purpose: ArgumentPurpose::Default, extension }),
    <l:@L> "(" "param" <ty:TypeName> ")" <r:@R>
        => Span::new(span!(source_id, l, r), AbiParam { ty, purpose: ArgumentPurpose::Default, extension: ArgumentExtension::None }),
}

FuncResult: Span<AbiParam> = {
    <l:@L> "(" "result" <ty:TypeName> ")" <r:@R>
        => Span::new(span!(source_id, l, r), AbiParam { ty, purpose: Default::default(), extension: Default::default() }),
}

CallConvAttr: CallConv = {
    "(" "cc" <CallConv> ")",
}

CallConv: CallConv = {
    "fast" => CallConv::Fast,
    "kernel" => CallConv::Kernel,
    "wasm" => CallConv::Wasm,
}

ArgumentExtension: ArgumentExtension = {
    "zext" => ArgumentExtension::Zext,
    "sext" => ArgumentExtension::Sext,
}

// LOCALS
// ================================================================================================

Local: Span<Local> = {
    <l:@L> "(" "local" <id:LocalId> <ty:TypeName> ")" <r:@R> => {
         Span::new(span!(source_id, l, r), Local { id, ty })
    }
}

// REGIONS
// ================================================================================================

Region: Region = {
    <l:@L> "(" "region" <id:U32> <params:RegionParams> <results:RegionResults> <mut blocks:Block+> ")" <r:@R> => {
        let id = RegionId::from_u32(id);
        for block in blocks.iter_mut() {
            block.region_id = id;
        }
        Region::new(span!(source_id, l, r), id, params, results, blocks)
    }
}

#[inline]
RegionParams: Vec<Span<Type>> = {
    "(" "params" <tys:SpannedTypeName+> ")" => tys,
    => vec![],
}

#[inline]
RegionResults: Vec<Span<Type>> = {
    "(" "results" <tys:SpannedTypeName+> ")" => tys,
    => vec![],
}

// BLOCKS
// ================================================================================================

Block: Block = {
    <l:@L> "(" "block" <id:U32> <params:BlockParam*> <insts:Inst+> ")" <r:@R> => {
        let id = crate::Block::from_u32(id);
        Block::new(span!(source_id, l, r), id, params, insts)
    }
}

BlockParam: TypedValue = {
    <l:@L> "(" "param" <id:ValueId> <ty:TypeName> ")" <r:@R> => TypedValue::new(span!(source_id, l, r), id, ty),
}

// INSTRUCTIONS
// ================================================================================================

TypedValueId: TypedValue = {
    "(" <value:SpannedValueId> <ty:TypeName> ")" => TypedValue::new(value.span(), value.into_inner(), ty),
}

Let: (TypedValue, Span<InstType>) = {
    "(" "let" <value:TypedValueId> <inst:InstWithResult> ")" => {
        (value, inst)
    }
}

LetMany: (Vec<TypedValue>, Span<InstType>) = {
    "(" "let" "[" <values:TypedValueId*> "]" <inst:InstWithManyResults> ")" => {
        (values, inst)
    }
}

Inst: Inst = {
    <l:@L> <let_expr:Let> <r:@R> => {
        let (value, inst_ty) = let_expr;
        Inst::new(span!(source_id, l, r), inst_ty.into_inner(), vec![value])
    },

    <l:@L> <let_expr:LetMany> <r:@R> => {
        let (values, inst_ty) = let_expr;
        Inst::new(span!(source_id, l, r), inst_ty.into_inner(), values)
    },

    <l:@L> "(" "call" <callee:CalleeId> <operands:SpannedValueId*> ")" <r:@R> => {
        Inst::new(span!(source_id, l, r), InstType::Call { opcode: Opcode::Call, callee, operands }, vec![])
    },

    <l:@L> "(" "syscall" <callee:CalleeId> <operands:SpannedValueId*> ")" <r:@R> => {
        Inst::new(span!(source_id, l, r), InstType::Call { opcode: Opcode::Syscall, callee, operands }, vec![])
    },

    <l:@L> "(" "unreachable" ")" <r:@R> => {
        Inst::new(span!(source_id, l, r), InstType::PrimOp { opcode: Opcode::Unreachable, operands: vec![] }, vec![])
    },

    <l:@L> "(" "ret" <operand:Operand?> ")" <r:@R> => {
        let operands = operand.map(|operand| vec![operand]).unwrap_or_default();
        Inst::new(span!(source_id, l, r), InstType::Ret { opcode: Opcode::Ret, operands }, vec![])
    },

    <l:@L> "(" "br" <successor:Successor> ")" <r:@R> => {
        Inst::new(span!(source_id, l, r), InstType::Br { opcode: Opcode::Br, successor }, vec![])
    },

    <l:@L> "(" "condbr" <cond:SpannedValueId> <then_dest:Successor> <else_dest:Successor> ")" <r:@R> => {
        Inst::new(span!(source_id, l, r), InstType::CondBr { opcode: Opcode::CondBr, cond, then_dest, else_dest }, vec![])
    },

    <l:@L> "(" "switch" <selector:SpannedValueId> <arms:SwitchArm+> ")" <r:@R> =>? {
        let mut arms = arms;
        let fallback = match arms.pop().unwrap() {
            (None, successor, _) => successor,
            (Some(_), _, _) => panic!("invalid switch: default arm is required"),
        };
        let mut successors = vec![];
        for arm in arms.into_iter() {
            match arm {
                (Some(id), successor, span) => successors.push(Span::new(span, (id, successor))),
                (None, _, _) => panic!("invalid switch: only one default arm is allowed"),
            }
        }
        Ok(Inst::new(span!(source_id, l, r), InstType::Switch { opcode: Opcode::Switch, selector, successors, fallback }, vec![]))
    },

    <inst:InstWithRegion> => Inst::new(inst.span(), inst.into_inner(), vec![]),
}

InstWithResult: Span<InstType> = {
    InstWithRegion,

    <l:@L> "(" <op_and_overflow:UnaryOpcode> <operand:Operand> ")" <r:@R> => {
        let (opcode, overflow) = op_and_overflow;
        Span::new(span!(source_id, l, r), InstType::UnaryOp { opcode, overflow, operand })
    },

    <l:@L> "(" <op_and_overflow:BinaryOpcode> <lhs:Operand> <rhs:Operand> ")" <r:@R> => {
        let (opcode, overflow) = op_and_overflow;
        Span::new(span!(source_id, l, r), InstType::BinaryOp { opcode, overflow, operands: [lhs, rhs] })
    },

    <l:@L> "(" "call" <callee:CalleeId> <operands:SpannedValueId*> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::Call { opcode: Opcode::Call, callee, operands })
    },

    <l:@L> "(" "syscall" <callee:CalleeId> <operands:SpannedValueId*> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::Call { opcode: Opcode::Syscall, callee, operands })
    },

    <l:@L> "(" "load" "." "local" <local:LocalId> <operands:SpannedValueId*> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::LocalVar { opcode: Opcode::Load, local, operands })
    },

    <l:@L> "(" "store" "." "local" <local:LocalId> <operands:SpannedValueId*> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::LocalVar { opcode: Opcode::Store, local, operands })
    },

    <expr:GlobalValueExpr> => Span::new(expr.span(), InstType::GlobalValue { opcode: Opcode::GlobalValue, expr }),
}

InstWithManyResults: Span<InstType> = {
    InstWithRegion,

    <l:@L> "(" <opcode:OverflowingUnaryOpcode> <operand:Operand> ")" <r:@R> => {
        let overflow = Some(Overflow::Overflowing);
        Span::new(span!(source_id, l, r), InstType::UnaryOp { opcode, overflow, operand })
    },

    <l:@L> "(" <opcode:OverflowingBinaryOpcode> <lhs:Operand> <rhs:Operand> ")" <r:@R> => {
        let overflow = Some(Overflow::Overflowing);
        Span::new(span!(source_id, l, r), InstType::BinaryOp { opcode, overflow, operands: [lhs, rhs] })
    },

    <l:@L> "(" <opcode:PrimOpOpcode> <operands:Operand*> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::PrimOp { opcode, operands })
    }
}

InstWithRegion: Span<InstType> = {
    <l:@L> "(" "if.true" <cond:SpannedValueId> <then_region:Region> <else_region:Region> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::If { opcode: Opcode::IfTrue, cond, then_region, else_region })
    },

    <l:@L> "(" "while.true" <operands:SpannedValueId*> <before:Region> <body:Region> ")" <r:@R> => {
        Span::new(span!(source_id, l, r), InstType::While { opcode: Opcode::WhileTrue, operands, before, body })
    }
}

Successor: Successor = {
    <l:@L> "(" "block" <id:U32> <args:SpannedValueId*> ")" <r:@R>
        => Successor { span: span!(source_id, l, r), id: crate::Block::from_u32(id), args },
}

SwitchArm: (Option<u32>, Successor, SourceSpan) = {
    <l:@L> "(" <value:U32> "." <successor:Successor> ")" <r:@R> => (Some(value), successor, span!(source_id, l, r)),
    <l:@L> "(" "_" "." <successor:Successor> ")" <r:@R> => (None, successor, span!(source_id, l, r)),
}

UnaryOpcode: (Opcode, Option<Overflow>) = {
    "const.i1" => (Opcode::ImmI1, None),
    "const.u8" => (Opcode::ImmU8, None),
    "const.i8" => (Opcode::ImmU8, None),
    "const.u16" => (Opcode::ImmU16, None),
    "const.i16" => (Opcode::ImmI16, None),
    "const.u32" => (Opcode::ImmU32, None),
    "const.i32" => (Opcode::ImmI32, None),
    "const.u64" => (Opcode::ImmU64, None),
    "const.i64" => (Opcode::ImmI64, None),
    "const.felt" => (Opcode::ImmFelt, None),
    "neg" => (Opcode::Neg, None),
    "inv" => (Opcode::Inv, None),
    "incr.unchecked" => (Opcode::Incr, Some(Overflow::Unchecked)),
    "incr.checked" => (Opcode::Incr, Some(Overflow::Checked)),
    "incr.wrapping" => (Opcode::Incr, Some(Overflow::Wrapping)),
    "ilog2" => (Opcode::Ilog2, None),
    "pow2" => (Opcode::Pow2, None),
    "not" => (Opcode::Not, None),
    "bnot" => (Opcode::Bnot, None),
    "popcnt" => (Opcode::Popcnt, None),
    "clz" => (Opcode::Clz, None),
    "ctz" => (Opcode::Ctz, None),
    "clo" => (Opcode::Clo, None),
    "cto" => (Opcode::Cto, None),
    "ptrtoint" => (Opcode::PtrToInt, None),
    "inttoptr" => (Opcode::IntToPtr, None),
    "cast" => (Opcode::Cast, None),
    "trunc" => (Opcode::Trunc, None),
    "zext" => (Opcode::Zext, None),
    "sext" => (Opcode::Sext, None),
    "is_odd" => (Opcode::IsOdd, None),
}

OverflowingUnaryOpcode: Opcode = {
    "incr.overflowing" => Opcode::Incr,
}

BinaryOpcode: (Opcode, Option<Overflow>) = {
    "eq" => (Opcode::Eq, None),
    "neq" => (Opcode::Neq, None),
    "gt" => (Opcode::Gt, None),
    "gte" => (Opcode::Gte, None),
    "lt" => (Opcode::Lt, None),
    "lte" => (Opcode::Lte, None),
    "min" => (Opcode::Min, None),
    "max" => (Opcode::Max, None),
    "add.unchecked" => (Opcode::Add, Some(Overflow::Unchecked)),
    "add.checked" => (Opcode::Add, Some(Overflow::Checked)),
    "add.wrapping" => (Opcode::Add, Some(Overflow::Wrapping)),
    "sub.unchecked" => (Opcode::Sub, Some(Overflow::Unchecked)),
    "sub.checked" => (Opcode::Sub, Some(Overflow::Checked)),
    "sub.wrapping" => (Opcode::Sub, Some(Overflow::Wrapping)),
    "mul.unchecked" => (Opcode::Mul, Some(Overflow::Unchecked)),
    "mul.checked" => (Opcode::Mul, Some(Overflow::Checked)),
    "mul.wrapping" => (Opcode::Mul, Some(Overflow::Wrapping)),
    "div.unchecked" => (Opcode::Div, Some(Overflow::Unchecked)),
    "div.checked" => (Opcode::Div, Some(Overflow::Checked)),
    "mod.unchecked" => (Opcode::Mod, Some(Overflow::Unchecked)),
    "mod.checked" => (Opcode::Mod, Some(Overflow::Checked)),
    "divmod.unchecked" => (Opcode::DivMod, Some(Overflow::Unchecked)),
    "divmod.checked" => (Opcode::DivMod, Some(Overflow::Checked)),
    "exp" => (Opcode::Exp, None),
    "and" => (Opcode::And, None),
    "band" => (Opcode::Band, None),
    "or" => (Opcode::Or, None),
    "bor" => (Opcode::Bor, None),
    "xor" => (Opcode::Xor, None),
    "bxor" => (Opcode::Bxor, None),
    "shl.unchecked" => (Opcode::Shl, Some(Overflow::Unchecked)),
    "shl.checked" => (Opcode::Shl, Some(Overflow::Checked)),
    "shl.wrapping" => (Opcode::Shl, Some(Overflow::Wrapping)),
    "shr.unchecked" => (Opcode::Shr, Some(Overflow::Unchecked)),
    "shr.checked" => (Opcode::Shr, Some(Overflow::Checked)),
    "shr.wrapping" => (Opcode::Shr, Some(Overflow::Wrapping)),
    "rotl" => (Opcode::Rotl, None),
    "rotr" => (Opcode::Rotr, None),
}

OverflowingBinaryOpcode: Opcode = {
    "add.overflowing" => Opcode::Add,
    "sub.overflowing" => Opcode::Sub,
    "mul.overflowing" => Opcode::Mul,
    "shl.overflowing" => Opcode::Shl,
    "shr.overflowing" => Opcode::Shr,
}

PrimOpOpcode: Opcode = {
    "assert" => Opcode::Assert,
    "assertz" => Opcode::Assertz,
    "assert.eq" => Opcode::AssertEq,
    "alloca" => Opcode::Alloca,
    "store" => Opcode::Store,
    "load" => Opcode::Load,
    "memcpy" => Opcode::MemCpy,
    "memory.grow" => Opcode::MemGrow,
    "select" => Opcode::Select,
}

Operand: Operand = {
    <l:@L> <v:value_id> <r:@R> => Operand::Value(Span::new(span!(source_id, l, r), v)),
    <l:@L> <i:int> <r:@R> => Operand::Int(Span::new(span!(source_id, l, r), i)),
    <l:@L> <i:bigint> <r:@R> => Operand::BigInt(Span::new(span!(source_id, l, r), i)),
}

GlobalValueExpr: GlobalValueExpr = {
    <l:@L> "(" "global.symbol" <symbol:NameOrId> <offset:Offset?> ")" <r:@R> => {
        GlobalValueExpr::Symbol { symbol, offset: offset.unwrap_or(0), span: span!(source_id, l, r) }
    },

    <l:@L> "(" "global.load" <ty:TypeName> <offset:Offset?> <base:GlobalValueExpr> ")" <r:@R> => {
        let offset = offset.unwrap_or(0);
        GlobalValueExpr::Load { base: Box::new(base), offset, ty: Some(ty), span: span!(source_id, l, r) }
    },

    <l:@L> "(" "global.iadd" "(" "offset" <offset:RawOffset> "." <ty:TypeName> ")" <base:GlobalValueExpr> ")" <r:@R> => {
        GlobalValueExpr::IAddImm { base: Box::new(base), offset, ty, span: span!(source_id, l, r) }
    }
}

// VALUES AND IDENTIFIERS
// ================================================================================================

HexString: ConstantData = {
    data,
}

Int: isize = {
    int,
}

Offset: i32 = {
    "(" "offset" <RawOffset> ")",
}

Index: u32 = {
    "(" "id" <U32> ")",
}

Align: NonZeroU16 = {
    <l:@L> <i:int> <r:@R> =>? {
        match u16::try_from(i) {
            Ok(0) => Err(ParseError::InvalidAlignment { span: span!(source_id, l, r), value: i }.into()),
            Ok(v) => Ok(unsafe { NonZeroU16::new_unchecked(v) }),
            Err(_) => Err(ParseError::InvalidAlignment { span: span!(source_id, l, r), value: i }.into()),
        }
    }
}

U32: u32 = {
    <l:@L> <i:int> <r:@R> =>? {
        match u32::try_from(i) {
            Ok(v) => Ok(v),
            Err(_) => Err(ParseError::InvalidU32 { span: span!(source_id, l, r), value: i }.into()),
        }
    }
}

U16: u16 = {
    <l:@L> <i:int> <r:@R> =>? {
        match u16::try_from(i) {
            Ok(v) => Ok(v),
            Err(_) => Err(ParseError::InvalidU16 { span: span!(source_id, l, r), value: i }.into()),
        }
    }
}

RawOffset: i32 = {
    <l:@L> <i:int> <r:@R> =>? {
        match i32::try_from(i) {
            Ok(v) => Ok(v),
            Err(_) => Err(ParseError::InvalidOffset { span: span!(source_id, l, r), value: i }.into()),
        }
    }
}

Name: Ident = {
    <l:@L> <id:string> <r:@R> => Ident::new(id, span!(source_id, l, r)),
}

Id: Ident = {
    <l:@L> <id:ident> <r:@R> => Ident::new(id, span!(source_id, l, r)),
}

NameOrId: Ident = {
    Name,
    Id,
}

CalleeId: Either<Ident, FunctionIdent> = {
    <NameOrId> => Left(<>),
    "(" <module:NameOrId> <function:NameOrId> ")" => Right(FunctionIdent { module, function }),
}

SpannedValueId: Span<crate::Value> = {
    <l:@L> <v:value_id> <r:@R> => Span::new(span!(source_id, l, r), v),
}

ValueId: crate::Value = {
    value_id,
}

#[inline]
LocalId: LocalId = {
    <id:U16> => LocalId::from_u16(id),
}

// LEXER
// ================================================================================================

extern {
    type Error = ParseError;
    type Location = ByteIndex;

    enum Token {
        ident => Token::Ident(<Symbol>),
        string => Token::String(<Symbol>),
        int => Token::Int(<isize>),
        bigint => Token::BigInt(<num_bigint::BigInt>),
        data => Token::Hex(<ConstantData>),
        value_id => Token::ValueId(<crate::Value>),
        "module" => Token::Module,
        "kernel" => Token::Kernel,
        "const" => Token::Const,
        "global" => Token::Global,
        "local" => Token::Local,
        "data" => Token::Data,
        "type" => Token::Type,
        "func" => Token::Func,
        "region" => Token::Region,
        "block" => Token::Block,
        "let" => Token::Let,
        "export" => Token::Export,
        "import" => Token::Import,
        "id" => Token::Id,
        "param" => Token::Param,
        "params" => Token::Params,
        "result" => Token::Result,
        "results" => Token::Results,
        "cc" => Token::Cc,
        "fast" => Token::Fast,
        "wasm" => Token::Wasm,
        "sret" => Token::Sret,
        "zext" => Token::Zext,
        "sext" => Token::Sext,
        "trunc" => Token::Trunc,
        "ret" => Token::Ret,
        "call" => Token::Call,
        "call.indirect" => Token::CallIndirect,
        "syscall" => Token::Syscall,
        "br" => Token::Br,
        "condbr" => Token::CondBr,
        "switch" => Token::Switch,
        "if.true" => Token::IfTrue,
        "while.true" => Token::WhileTrue,
        "test" => Token::Test,
        "load" => Token::Load,
        "memcpy" => Token::MemCpy,
        "asm" => Token::Asm,
        "memory.grow" => Token::MemoryGrow,
        "add.unchecked" => Token::AddUnchecked,
        "add.checked" => Token::AddChecked,
        "add.overflowing" => Token::AddOverflowing,
        "add.wrapping" => Token::AddWrapping,
        "sub.unchecked" => Token::SubUnchecked,
        "sub.checked" => Token::SubChecked,
        "sub.overflowing" => Token::SubOverflowing,
        "sub.wrapping" => Token::SubWrapping,
        "mul.unchecked" => Token::MulUnchecked,
        "mul.checked" => Token::MulChecked,
        "mul.overflowing" => Token::MulOverflowing,
        "mul.wrapping" => Token::MulWrapping,
        "div.unchecked" => Token::DivUnchecked,
        "div.checked" => Token::DivChecked,
        "mod.unchecked" => Token::ModUnchecked,
        "mod.checked" => Token::ModChecked,
        "divmod.unchecked" => Token::DivModUnchecked,
        "divmod.checked" => Token::DivModChecked,
        "min" => Token::Min,
        "max" => Token::Max,
        "exp" => Token::Exp,
        "and" => Token::And,
        "band" => Token::BAnd,
        "or" => Token::Or,
        "bor" => Token::BOr,
        "xor" => Token::Xor,
        "bxor" => Token::BXor,
        "shl.unchecked" => Token::ShlUnchecked,
        "shl.checked" => Token::ShlChecked,
        "shl.wrapping" => Token::ShlWrapping,
        "shl.overflowing" => Token::ShlOverflowing,
        "shr.unchecked" => Token::ShrUnchecked,
        "shr.checked" => Token::ShrChecked,
        "shr.wrapping" => Token::ShrWrapping,
        "shr.overflowing" => Token::ShrOverflowing,
        "rotl" => Token::Rotl,
        "rotr" => Token::Rotr,
        "eq" => Token::Eq,
        "neq" => Token::Neq,
        "gt" => Token::Gt,
        "gte" => Token::Gte,
        "lt" => Token::Lt,
        "lte" => Token::Lte,
        "store" => Token::Store,
        "inv" => Token::Inv,
        "incr.unchecked" => Token::IncrUnchecked,
        "incr.checked" => Token::IncrChecked,
        "incr.wrapping" => Token::IncrWrapping,
        "incr.overflowing" => Token::IncrOverflowing,
        "ilog2" => Token::Ilog2,
        "pow2" => Token::Pow2,
        "not" => Token::Not,
        "bnot" => Token::BNot,
        "popcnt" => Token::Popcnt,
        "clz" => Token::Clz,
        "ctz" => Token::Ctz,
        "clo" => Token::Clo,
        "cto" => Token::Cto,
        "is_odd" => Token::IsOdd,
        "cast" => Token::Cast,
        "ptrtoint" => Token::PtrToInt,
        "inttoptr" => Token::IntToPtr,
        "neg" => Token::Neg,
        "const.i1" => Token::ConstI1,
        "const.i8" => Token::ConstI8,
        "const.u8" => Token::ConstU8,
        "const.i16" => Token::ConstI16,
        "const.u16" => Token::ConstU16,
        "const.i32" => Token::ConstI32,
        "const.u32" => Token::ConstU32,
        "const.i64" => Token::ConstI64,
        "const.u64" => Token::ConstU64,
        "const.felt" => Token::ConstFelt,
        "select" => Token::Select,
        "assert" => Token::Assert,
        "assertz" => Token::Assertz,
        "assert.eq" => Token::AssertEq,
        "alloca" => Token::Alloca,
        "unreachable" => Token::Unreachable,
        "i1" => Token::I1,
        "i8" => Token::I8,
        "u8" => Token::U8,
        "i16" => Token::I16,
        "u16" => Token::U16,
        "i32" => Token::I32,
        "u32" => Token::U32,
        "i64" => Token::I64,
        "u64" => Token::U64,
        "i128" => Token::I128,
        "u128" => Token::U128,
        "u256" => Token::U256,
        "f64" => Token::F64,
        "felt" => Token::Felt,
        "ptr" => Token::Ptr,
        "addrspace" => Token::Addrspace,
        "struct" => Token::Struct,
        "array" => Token::Array,
        "repr" => Token::Repr,
        "transparent" => Token::Transparent,
        "align" => Token::Align,
        "size" => Token::Size,
        "packed" => Token::Packed,
        "mut" => Token::Mut,
        "offset" => Token::Offset,
        "global.symbol" => Token::GlobalSymbol,
        "global.load" => Token::GlobalLoad,
        "global.iadd" => Token::GlobalIAdd,
        "symbol" => Token::Symbol,
        "iadd" => Token::IAdd,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "_" => Token::Underscore,
        "!" => Token::Bang,
        "?" => Token::Question,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
    }
}
