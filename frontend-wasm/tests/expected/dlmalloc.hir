module noname

const $0 = 0x00100000;
const $1 = 0x001001c8;
const $2 = 0x001001d0;

global external @__stack_pointer : i32 = $0 { id = 0 };
global external @gv1 : i32 = $1 { id = 1 };
global external @gv2 : i32 = $2 { id = 2 };

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::dispose_chunk(i32, i32, i32) {
block0(v0: i32, v1: i32, v2: i32):
    v3 = const.i32 0 : i32;
    v4 = add.wrapping v1, v2 : i32;
    v5 = cast v1 : u32;
    v6 = add.checked v5, 4 : u32;
    v7 = inttoptr v6 : *mut i32;
    v8 = load v7 : i32;
    v9 = const.i32 1 : i32;
    v10 = band v8, v9 : i32;
    v11 = neq v10, 0 : i1;
    condbr v11, block4(v2, v1), block5;

block1:
    ret;

block2:
    v273 = cast v100 : u32;
    v274 = add.checked v273, 416 : u32;
    v275 = inttoptr v274 : *mut i32;
    v276 = load v275 : i32;
    v277 = add.wrapping v276, v117 : i32;
    v278 = const.i32 1 : i32;
    v279 = bor v277, v278 : i32;
    v280 = cast v158 : u32;
    v281 = add.checked v280, 4 : u32;
    v282 = inttoptr v281 : *mut i32;
    store v282, v279;
    v283 = cast v100 : u32;
    v284 = add.checked v283, 424 : u32;
    v285 = inttoptr v284 : *mut i32;
    store v285, v158;
    v286 = cast v100 : u32;
    v287 = add.checked v286, 416 : u32;
    v288 = inttoptr v287 : *mut i32;
    store v288, v277;
    v289 = add.wrapping v158, v277 : i32;
    v290 = cast v289 : u32;
    v291 = inttoptr v290 : *mut i32;
    store v291, v277;
    br block1;

block3:
    ret;

block4(v117: i32, v158: i32):
    v93 = cast v4 : u32;
    v94 = add.checked v93, 4 : u32;
    v95 = inttoptr v94 : *mut i32;
    v96 = load v95 : i32;
    v97 = const.i32 2 : i32;
    v98 = band v96, v97 : i32;
    v99 = neq v98, 0 : i1;
    condbr v99, block16, block17;

block5:
    v12 = const.i32 3 : i32;
    v13 = band v8, v12 : i32;
    v14 = eq v13, 0 : i1;
    v15 = cast v14 : i32;
    v16 = neq v15, 0 : i1;
    condbr v16, block3, block6;

block6:
    v17 = cast v1 : u32;
    v18 = inttoptr v17 : *mut i32;
    v19 = load v18 : i32;
    v20 = add.wrapping v19, v2 : i32;
    v21 = sub.wrapping v1, v19 : i32;
    v22 = cast v0 : u32;
    v23 = add.checked v22, 424 : u32;
    v24 = inttoptr v23 : *mut i32;
    v25 = load v24 : i32;
    v26 = neq v21, v25 : i1;
    v27 = cast v26 : i32;
    v28 = neq v27, 0 : i1;
    condbr v28, block7, block8;

block7:
    v54 = const.i32 256 : i32;
    v55 = cast v19 : u32;
    v56 = cast v54 : u32;
    v57 = lt v55, v56 : i1;
    v58 = cast v57 : i32;
    v59 = neq v58, 0 : i1;
    condbr v59, block10, block11;

block8:
    v29 = cast v4 : u32;
    v30 = add.checked v29, 4 : u32;
    v31 = inttoptr v30 : *mut i32;
    v32 = load v31 : i32;
    v33 = const.i32 3 : i32;
    v34 = band v32, v33 : i32;
    v35 = const.i32 3 : i32;
    v36 = neq v34, v35 : i1;
    v37 = cast v36 : i32;
    v38 = neq v37, 0 : i1;
    condbr v38, block4(v20, v21), block9;

block9:
    v39 = const.i32 -2 : i32;
    v40 = band v32, v39 : i32;
    v41 = cast v4 : u32;
    v42 = add.checked v41, 4 : u32;
    v43 = inttoptr v42 : *mut i32;
    store v43, v40;
    v44 = const.i32 1 : i32;
    v45 = bor v20, v44 : i32;
    v46 = cast v21 : u32;
    v47 = add.checked v46, 4 : u32;
    v48 = inttoptr v47 : *mut i32;
    store v48, v45;
    v49 = cast v0 : u32;
    v50 = add.checked v49, 416 : u32;
    v51 = inttoptr v50 : *mut i32;
    store v51, v20;
    v52 = cast v4 : u32;
    v53 = inttoptr v52 : *mut i32;
    store v53, v20;
    ret;

block10:
    v60 = cast v21 : u32;
    v61 = add.checked v60, 12 : u32;
    v62 = inttoptr v61 : *mut i32;
    v63 = load v62 : i32;
    v64 = cast v21 : u32;
    v65 = add.checked v64, 8 : u32;
    v66 = inttoptr v65 : *mut i32;
    v67 = load v66 : i32;
    v68 = eq v63, v67 : i1;
    v69 = cast v68 : i32;
    v70 = neq v69, 0 : i1;
    condbr v70, block12, block13;

block11:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v0, v21);
    br block4(v20, v21);

block12:
    v77 = cast v0 : u32;
    v78 = add.checked v77, 408 : u32;
    v79 = inttoptr v78 : *mut i32;
    v80 = load v79 : i32;
    v81 = const.i32 -2 : i32;
    v82 = const.i32 3 : i32;
    v83 = cast v19 : u32;
    v84 = cast v82 : u32;
    v85 = shr.wrapping v83, v84 : u32;
    v86 = cast v85 : i32;
    v87 = rotl v81, v86 : i32;
    v88 = band v80, v87 : i32;
    v89 = cast v0 : u32;
    v90 = add.checked v89, 408 : u32;
    v91 = inttoptr v90 : *mut i32;
    store v91, v88;
    br block4(v20, v21);

block13:
    v71 = cast v67 : u32;
    v72 = add.checked v71, 12 : u32;
    v73 = inttoptr v72 : *mut i32;
    store v73, v63;
    v74 = cast v63 : u32;
    v75 = add.checked v74, 8 : u32;
    v76 = inttoptr v75 : *mut i32;
    store v76, v67;
    br block4(v20, v21);

block14:
    v242 = cast v100 : u32;
    v243 = add.checked v242, 428 : u32;
    v244 = inttoptr v243 : *mut i32;
    store v244, v158;
    v245 = cast v100 : u32;
    v246 = add.checked v245, 420 : u32;
    v247 = inttoptr v246 : *mut i32;
    v248 = load v247 : i32;
    v249 = add.wrapping v248, v117 : i32;
    v250 = cast v100 : u32;
    v251 = add.checked v250, 420 : u32;
    v252 = inttoptr v251 : *mut i32;
    store v252, v249;
    v253 = const.i32 1 : i32;
    v254 = bor v249, v253 : i32;
    v255 = cast v158 : u32;
    v256 = add.checked v255, 4 : u32;
    v257 = inttoptr v256 : *mut i32;
    store v257, v254;
    v258 = cast v100 : u32;
    v259 = add.checked v258, 424 : u32;
    v260 = inttoptr v259 : *mut i32;
    v261 = load v260 : i32;
    v262 = neq v158, v261 : i1;
    v263 = cast v262 : i32;
    v264 = neq v263, 0 : i1;
    condbr v264, block3, block31;

block15(v192: i32, v199: i32, v200: i32):
    v193 = const.i32 256 : i32;
    v194 = cast v192 : u32;
    v195 = cast v193 : u32;
    v196 = lt v194, v195 : i1;
    v197 = cast v196 : i32;
    v198 = neq v197, 0 : i1;
    condbr v198, block26, block27;

block16:
    v179 = const.i32 -2 : i32;
    v180 = band v96, v179 : i32;
    v181 = cast v92 : u32;
    v182 = add.checked v181, 4 : u32;
    v183 = inttoptr v182 : *mut i32;
    store v183, v180;
    v184 = const.i32 1 : i32;
    v185 = bor v117, v184 : i32;
    v186 = cast v158 : u32;
    v187 = add.checked v186, 4 : u32;
    v188 = inttoptr v187 : *mut i32;
    store v188, v185;
    v189 = add.wrapping v158, v117 : i32;
    v190 = cast v189 : u32;
    v191 = inttoptr v190 : *mut i32;
    store v191, v117;
    br block15(v117, v100, v158);

block17:
    v101 = cast v0 : u32;
    v102 = add.checked v101, 428 : u32;
    v103 = inttoptr v102 : *mut i32;
    v104 = load v103 : i32;
    v105 = eq v92, v104 : i1;
    v106 = cast v105 : i32;
    v107 = neq v106, 0 : i1;
    condbr v107, block14, block18;

block18:
    v108 = cast v100 : u32;
    v109 = add.checked v108, 424 : u32;
    v110 = inttoptr v109 : *mut i32;
    v111 = load v110 : i32;
    v112 = eq v92, v111 : i1;
    v113 = cast v112 : i32;
    v114 = neq v113, 0 : i1;
    condbr v114, block2, block19;

block19:
    v115 = const.i32 -8 : i32;
    v116 = band v96, v115 : i32;
    v118 = add.wrapping v116, v117 : i32;
    v119 = const.i32 256 : i32;
    v120 = cast v116 : u32;
    v121 = cast v119 : u32;
    v122 = lt v120, v121 : i1;
    v123 = cast v122 : i32;
    v124 = neq v123, 0 : i1;
    condbr v124, block21, block22;

block20:
    v160 = const.i32 1 : i32;
    v161 = bor v118, v160 : i32;
    v162 = cast v158 : u32;
    v163 = add.checked v162, 4 : u32;
    v164 = inttoptr v163 : *mut i32;
    store v164, v161;
    v165 = add.wrapping v157, v159 : i32;
    v166 = cast v165 : u32;
    v167 = inttoptr v166 : *mut i32;
    store v167, v159;
    v169 = cast v100 : u32;
    v170 = add.checked v169, 424 : u32;
    v171 = inttoptr v170 : *mut i32;
    v172 = load v171 : i32;
    v173 = neq v157, v172 : i1;
    v174 = cast v173 : i32;
    v175 = neq v174, 0 : i1;
    condbr v175, block15(v159, v168, v157), block25;

block21:
    v125 = cast v92 : u32;
    v126 = add.checked v125, 12 : u32;
    v127 = inttoptr v126 : *mut i32;
    v128 = load v127 : i32;
    v129 = cast v92 : u32;
    v130 = add.checked v129, 8 : u32;
    v131 = inttoptr v130 : *mut i32;
    v132 = load v131 : i32;
    v133 = eq v128, v132 : i1;
    v134 = cast v133 : i32;
    v135 = neq v134, 0 : i1;
    condbr v135, block23, block24;

block22:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v100, v92);
    br block20;

block23:
    v142 = cast v100 : u32;
    v143 = add.checked v142, 408 : u32;
    v144 = inttoptr v143 : *mut i32;
    v145 = load v144 : i32;
    v146 = const.i32 -2 : i32;
    v147 = const.i32 3 : i32;
    v148 = cast v96 : u32;
    v149 = cast v147 : u32;
    v150 = shr.wrapping v148, v149 : u32;
    v151 = cast v150 : i32;
    v152 = rotl v146, v151 : i32;
    v153 = band v145, v152 : i32;
    v154 = cast v100 : u32;
    v155 = add.checked v154, 408 : u32;
    v156 = inttoptr v155 : *mut i32;
    store v156, v153;
    br block20;

block24:
    v136 = cast v132 : u32;
    v137 = add.checked v136, 12 : u32;
    v138 = inttoptr v137 : *mut i32;
    store v138, v128;
    v139 = cast v128 : u32;
    v140 = add.checked v139, 8 : u32;
    v141 = inttoptr v140 : *mut i32;
    store v141, v132;
    br block20;

block25:
    v176 = cast v168 : u32;
    v177 = add.checked v176, 416 : u32;
    v178 = inttoptr v177 : *mut i32;
    store v178, v159;
    ret;

block26:
    v201 = const.i32 -8 : i32;
    v202 = band v192, v201 : i32;
    v203 = add.wrapping v199, v202 : i32;
    v204 = const.i32 144 : i32;
    v205 = add.wrapping v203, v204 : i32;
    v206 = cast v199 : u32;
    v207 = add.checked v206, 408 : u32;
    v208 = inttoptr v207 : *mut i32;
    v209 = load v208 : i32;
    v210 = const.i32 1 : i32;
    v211 = const.i32 3 : i32;
    v212 = cast v192 : u32;
    v213 = cast v211 : u32;
    v214 = shr.wrapping v212, v213 : u32;
    v215 = cast v214 : i32;
    v216 = shl.wrapping v210, v215 : i32;
    v217 = band v209, v216 : i32;
    v218 = neq v217, 0 : i1;
    condbr v218, block29, block30;

block27:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(v199, v200, v192);
    ret;

block28(v232: i32):
    v229 = cast v205 : u32;
    v230 = add.checked v229, 8 : u32;
    v231 = inttoptr v230 : *mut i32;
    store v231, v200;
    v233 = cast v232 : u32;
    v234 = add.checked v233, 12 : u32;
    v235 = inttoptr v234 : *mut i32;
    store v235, v228;
    v236 = cast v228 : u32;
    v237 = add.checked v236, 12 : u32;
    v238 = inttoptr v237 : *mut i32;
    store v238, v227;
    v239 = cast v228 : u32;
    v240 = add.checked v239, 8 : u32;
    v241 = inttoptr v240 : *mut i32;
    store v241, v232;
    ret;

block29:
    v223 = cast v205 : u32;
    v224 = add.checked v223, 8 : u32;
    v225 = inttoptr v224 : *mut i32;
    v226 = load v225 : i32;
    br block28(v226);

block30:
    v219 = bor v209, v216 : i32;
    v220 = cast v199 : u32;
    v221 = add.checked v220, 408 : u32;
    v222 = inttoptr v221 : *mut i32;
    store v222, v219;
    br block28(v205);

block31:
    v265 = const.i32 0 : i32;
    v266 = cast v100 : u32;
    v267 = add.checked v266, 416 : u32;
    v268 = inttoptr v267 : *mut i32;
    store v268, v265;
    v269 = const.i32 0 : i32;
    v270 = cast v100 : u32;
    v271 = add.checked v270, 424 : u32;
    v272 = inttoptr v271 : *mut i32;
    store v272, v269;
    br block3;
}

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(i32, i32) {
block0(v0: i32, v1: i32):
    v2 = const.i32 0 : i32;
    v3 = cast v1 : u32;
    v4 = add.checked v3, 24 : u32;
    v5 = inttoptr v4 : *mut i32;
    v6 = load v5 : i32;
    v7 = cast v1 : u32;
    v8 = add.checked v7, 12 : u32;
    v9 = inttoptr v8 : *mut i32;
    v10 = load v9 : i32;
    v11 = neq v10, v1 : i1;
    v12 = cast v11 : i32;
    v13 = neq v12, 0 : i1;
    condbr v13, block4, block5;

block1:
    ret;

block2(v99: i32):
    v68 = eq v6, 0 : i1;
    v69 = cast v68 : i32;
    v70 = neq v69, 0 : i1;
    condbr v70, block10, block11;

block3:
    v39 = const.i32 16 : i32;
    v40 = add.wrapping v1, v39 : i32;
    v41 = neq v20, 0 : i1;
    v42 = select v41, v17, v40 : i32;
    br block7(v42, v26);

block4:
    v29 = cast v1 : u32;
    v30 = add.checked v29, 8 : u32;
    v31 = inttoptr v30 : *mut i32;
    v32 = load v31 : i32;
    v33 = cast v32 : u32;
    v34 = add.checked v33, 12 : u32;
    v35 = inttoptr v34 : *mut i32;
    store v35, v10;
    v36 = cast v10 : u32;
    v37 = add.checked v36, 8 : u32;
    v38 = inttoptr v37 : *mut i32;
    store v38, v32;
    br block2(v10);

block5:
    v14 = const.i32 20 : i32;
    v15 = const.i32 16 : i32;
    v16 = const.i32 20 : i32;
    v17 = add.wrapping v1, v16 : i32;
    v18 = cast v17 : u32;
    v19 = inttoptr v18 : *mut i32;
    v20 = load v19 : i32;
    v21 = neq v20, 0 : i1;
    v22 = select v21, v14, v15 : i32;
    v23 = add.wrapping v1, v22 : i32;
    v24 = cast v23 : u32;
    v25 = inttoptr v24 : *mut i32;
    v26 = load v25 : i32;
    v27 = neq v26, 0 : i1;
    condbr v27, block3, block6;

block6:
    v28 = const.i32 0 : i32;
    br block2(v28);

block7(v43: i32, v44: i32):
    v45 = const.i32 20 : i32;
    v46 = add.wrapping v44, v45 : i32;
    v47 = const.i32 16 : i32;
    v48 = add.wrapping v44, v47 : i32;
    v49 = cast v46 : u32;
    v50 = inttoptr v49 : *mut i32;
    v51 = load v50 : i32;
    v52 = neq v51, 0 : i1;
    v53 = select v52, v46, v48 : i32;
    v54 = const.i32 20 : i32;
    v55 = const.i32 16 : i32;
    v56 = neq v51, 0 : i1;
    v57 = select v56, v54, v55 : i32;
    v58 = add.wrapping v44, v57 : i32;
    v59 = cast v58 : u32;
    v60 = inttoptr v59 : *mut i32;
    v61 = load v60 : i32;
    v62 = neq v61, 0 : i1;
    condbr v62, block7(v53, v61), block9;

block8:
    v63 = const.i32 0 : i32;
    v64 = cast v43 : u32;
    v65 = inttoptr v64 : *mut i32;
    store v65, v63;
    br block2(v44);

block9:
    br block8;

block10:
    br block1;

block11:
    v75 = cast v1 : u32;
    v76 = add.checked v75, 28 : u32;
    v77 = inttoptr v76 : *mut i32;
    v78 = load v77 : i32;
    v79 = const.i32 2 : i32;
    v80 = shl.wrapping v78, v79 : i32;
    v81 = add.wrapping v0, v80 : i32;
    v82 = cast v81 : u32;
    v83 = inttoptr v82 : *mut i32;
    v84 = load v83 : i32;
    v85 = eq v84, v73 : i1;
    v86 = cast v85 : i32;
    v87 = neq v86, 0 : i1;
    condbr v87, block13, block14;

block12:
    v118 = cast v99 : u32;
    v119 = add.checked v118, 24 : u32;
    v120 = inttoptr v119 : *mut i32;
    store v120, v66;
    v122 = cast v73 : u32;
    v123 = add.checked v122, 16 : u32;
    v124 = inttoptr v123 : *mut i32;
    v125 = load v124 : i32;
    v126 = eq v125, 0 : i1;
    v127 = cast v126 : i32;
    v128 = neq v127, 0 : i1;
    condbr v128, block17, block18;

block13:
    v103 = cast v81 : u32;
    v104 = inttoptr v103 : *mut i32;
    store v104, v99;
    v105 = neq v99, 0 : i1;
    condbr v105, block12, block16;

block14:
    v88 = const.i32 16 : i32;
    v89 = const.i32 20 : i32;
    v90 = cast v66 : u32;
    v91 = add.checked v90, 16 : u32;
    v92 = inttoptr v91 : *mut i32;
    v93 = load v92 : i32;
    v94 = eq v93, v73 : i1;
    v95 = cast v94 : i32;
    v96 = neq v95, 0 : i1;
    v97 = select v96, v88, v89 : i32;
    v98 = add.wrapping v66, v97 : i32;
    v100 = cast v98 : u32;
    v101 = inttoptr v100 : *mut i32;
    store v101, v99;
    v102 = neq v99, 0 : i1;
    condbr v102, block12, block15;

block15:
    br block10;

block16:
    v106 = cast v71 : u32;
    v107 = add.checked v106, 412 : u32;
    v108 = inttoptr v107 : *mut i32;
    v109 = load v108 : i32;
    v110 = const.i32 -2 : i32;
    v111 = rotl v110, v78 : i32;
    v112 = band v109, v111 : i32;
    v113 = cast v71 : u32;
    v114 = add.checked v113, 412 : u32;
    v115 = inttoptr v114 : *mut i32;
    store v115, v112;
    ret;

block17:
    v136 = const.i32 20 : i32;
    v137 = add.wrapping v121, v136 : i32;
    v138 = cast v137 : u32;
    v139 = inttoptr v138 : *mut i32;
    v140 = load v139 : i32;
    v141 = eq v140, 0 : i1;
    v142 = cast v141 : i32;
    v143 = neq v142, 0 : i1;
    condbr v143, block10, block19;

block18:
    v129 = cast v116 : u32;
    v130 = add.checked v129, 16 : u32;
    v131 = inttoptr v130 : *mut i32;
    store v131, v125;
    v132 = cast v125 : u32;
    v133 = add.checked v132, 24 : u32;
    v134 = inttoptr v133 : *mut i32;
    store v134, v116;
    br block17;

block19:
    v145 = const.i32 20 : i32;
    v146 = add.wrapping v116, v145 : i32;
    v147 = cast v146 : u32;
    v148 = inttoptr v147 : *mut i32;
    store v148, v140;
    v149 = cast v140 : u32;
    v150 = add.checked v149, 24 : u32;
    v151 = inttoptr v150 : *mut i32;
    store v151, v144;
    ret;
}

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(i32, i32, i32) {
block0(v0: i32, v1: i32, v2: i32):
    v3 = const.i32 0 : i32;
    v4 = const.i32 0 : i32;
    v5 = const.i32 256 : i32;
    v6 = cast v2 : u32;
    v7 = cast v5 : u32;
    v8 = lt v6, v7 : i1;
    v9 = cast v8 : i32;
    v10 = neq v9, 0 : i1;
    condbr v10, block2(v4), block3;

block1:
    ret;

block2(v42: i32):
    v38 = const.i64 0 : i64;
    v39 = cast v1 : u32;
    v40 = add.checked v39, 16 : u32;
    v41 = inttoptr v40 : *mut i64;
    store v41, v38;
    v43 = cast v37 : u32;
    v44 = add.checked v43, 28 : u32;
    v45 = inttoptr v44 : *mut i32;
    store v45, v42;
    v47 = const.i32 2 : i32;
    v48 = shl.wrapping v42, v47 : i32;
    v49 = add.wrapping v0, v48 : i32;
    v50 = cast v46 : u32;
    v51 = add.checked v50, 412 : u32;
    v52 = inttoptr v51 : *mut i32;
    v53 = load v52 : i32;
    v54 = const.i32 1 : i32;
    v55 = shl.wrapping v54, v42 : i32;
    v56 = band v53, v55 : i32;
    v57 = neq v56, 0 : i1;
    condbr v57, block6, block7;

block3:
    v11 = const.i32 31 : i32;
    v12 = const.i32 16777215 : i32;
    v13 = cast v2 : u32;
    v14 = cast v12 : u32;
    v15 = gt v13, v14 : i1;
    v16 = cast v15 : i32;
    v17 = neq v16, 0 : i1;
    condbr v17, block2(v11), block4;

block4:
    v18 = const.i32 6 : i32;
    v19 = const.i32 8 : i32;
    v20 = cast v2 : u32;
    v21 = cast v19 : u32;
    v22 = shr.wrapping v20, v21 : u32;
    v23 = cast v22 : i32;
    v24 = popcnt v23 : i32;
    v25 = sub.wrapping v18, v24 : i32;
    v26 = cast v2 : u32;
    v27 = cast v25 : u32;
    v28 = shr.wrapping v26, v27 : u32;
    v29 = cast v28 : i32;
    v30 = const.i32 1 : i32;
    v31 = band v29, v30 : i32;
    v32 = const.i32 1 : i32;
    v33 = shl.wrapping v24, v32 : i32;
    v34 = sub.wrapping v31, v33 : i32;
    v35 = const.i32 62 : i32;
    v36 = add.wrapping v34, v35 : i32;
    br block2(v36);

block5(v141: i32):
    v142 = cast v141 : u32;
    v143 = add.checked v142, 12 : u32;
    v144 = inttoptr v143 : *mut i32;
    store v144, v141;
    v145 = cast v141 : u32;
    v146 = add.checked v145, 8 : u32;
    v147 = inttoptr v146 : *mut i32;
    store v147, v141;
    br block1;

block6:
    v68 = const.i32 0 : i32;
    v69 = const.i32 25 : i32;
    v70 = const.i32 1 : i32;
    v71 = cast v42 : u32;
    v72 = cast v70 : u32;
    v73 = shr.wrapping v71, v72 : u32;
    v74 = cast v73 : i32;
    v75 = sub.wrapping v69, v74 : i32;
    v76 = const.i32 31 : i32;
    v77 = band v75, v76 : i32;
    v78 = const.i32 31 : i32;
    v79 = eq v42, v78 : i1;
    v80 = cast v79 : i32;
    v81 = neq v80, 0 : i1;
    v82 = select v81, v68, v77 : i32;
    v83 = shl.wrapping v2, v82 : i32;
    v84 = cast v49 : u32;
    v85 = inttoptr v84 : *mut i32;
    v86 = load v85 : i32;
    br block8(v86, v83);

block7:
    v58 = bor v53, v55 : i32;
    v59 = cast v46 : u32;
    v60 = add.checked v59, 412 : u32;
    v61 = inttoptr v60 : *mut i32;
    store v61, v58;
    v62 = cast v37 : u32;
    v63 = add.checked v62, 24 : u32;
    v64 = inttoptr v63 : *mut i32;
    store v64, v49;
    v65 = cast v49 : u32;
    v66 = inttoptr v65 : *mut i32;
    store v66, v37;
    br block5(v37);

block8(v87: i32, v119: i32):
    v88 = cast v87 : u32;
    v89 = add.checked v88, 4 : u32;
    v90 = inttoptr v89 : *mut i32;
    v91 = load v90 : i32;
    v92 = const.i32 -8 : i32;
    v93 = band v91, v92 : i32;
    v95 = neq v93, v94 : i1;
    v96 = cast v95 : i32;
    v97 = neq v96, 0 : i1;
    condbr v97, block10, block11;

block9:
    v136 = cast v131 : u32;
    v137 = inttoptr v136 : *mut i32;
    store v137, v102;
    v138 = cast v102 : u32;
    v139 = add.checked v138, 24 : u32;
    v140 = inttoptr v139 : *mut i32;
    store v140, v87;
    br block5(v102);

block10:
    v120 = const.i32 29 : i32;
    v121 = cast v119 : u32;
    v122 = cast v120 : u32;
    v123 = shr.wrapping v121, v122 : u32;
    v124 = cast v123 : i32;
    v125 = const.i32 1 : i32;
    v126 = shl.wrapping v119, v125 : i32;
    v127 = const.i32 4 : i32;
    v128 = band v124, v127 : i32;
    v129 = add.wrapping v87, v128 : i32;
    v130 = const.i32 16 : i32;
    v131 = add.wrapping v129, v130 : i32;
    v132 = cast v131 : u32;
    v133 = inttoptr v132 : *mut i32;
    v134 = load v133 : i32;
    v135 = neq v134, 0 : i1;
    condbr v135, block8(v134, v126), block12;

block11:
    v98 = cast v87 : u32;
    v99 = add.checked v98, 8 : u32;
    v100 = inttoptr v99 : *mut i32;
    v101 = load v100 : i32;
    v103 = cast v101 : u32;
    v104 = add.checked v103, 12 : u32;
    v105 = inttoptr v104 : *mut i32;
    store v105, v102;
    v106 = cast v87 : u32;
    v107 = add.checked v106, 8 : u32;
    v108 = inttoptr v107 : *mut i32;
    store v108, v102;
    v109 = const.i32 0 : i32;
    v110 = cast v102 : u32;
    v111 = add.checked v110, 24 : u32;
    v112 = inttoptr v111 : *mut i32;
    store v112, v109;
    v113 = cast v102 : u32;
    v114 = add.checked v113, 12 : u32;
    v115 = inttoptr v114 : *mut i32;
    store v115, v87;
    v116 = cast v102 : u32;
    v117 = add.checked v116, 8 : u32;
    v118 = inttoptr v117 : *mut i32;
    store v118, v101;
    ret;

block12:
    br block9;
}

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::free(i32, i32) {
block0(v0: i32, v1: i32):
    v2 = const.i32 0 : i32;
    v3 = const.i32 -8 : i32;
    v4 = add.wrapping v1, v3 : i32;
    v5 = const.i32 -4 : i32;
    v6 = add.wrapping v1, v5 : i32;
    v7 = cast v6 : u32;
    v8 = inttoptr v7 : *mut i32;
    v9 = load v8 : i32;
    v10 = const.i32 -8 : i32;
    v11 = band v9, v10 : i32;
    v12 = add.wrapping v4, v11 : i32;
    v13 = const.i32 1 : i32;
    v14 = band v9, v13 : i32;
    v15 = neq v14, 0 : i1;
    condbr v15, block7(v11, v4), block8;

block1:
    ret;

block2:
    v403 = cast v104 : u32;
    v404 = add.checked v403, 416 : u32;
    v405 = inttoptr v404 : *mut i32;
    v406 = load v405 : i32;
    v407 = add.wrapping v406, v121 : i32;
    v408 = const.i32 1 : i32;
    v409 = bor v407, v408 : i32;
    v410 = cast v162 : u32;
    v411 = add.checked v410, 4 : u32;
    v412 = inttoptr v411 : *mut i32;
    store v412, v409;
    v413 = cast v104 : u32;
    v414 = add.checked v413, 424 : u32;
    v415 = inttoptr v414 : *mut i32;
    store v415, v162;
    v416 = cast v104 : u32;
    v417 = add.checked v416, 416 : u32;
    v418 = inttoptr v417 : *mut i32;
    store v418, v407;
    v419 = add.wrapping v162, v407 : i32;
    v420 = cast v419 : u32;
    v421 = inttoptr v420 : *mut i32;
    store v421, v407;
    br block1;

block3(v391: i32):
    v392 = const.i32 4095 : i32;
    v393 = const.i32 4095 : i32;
    v394 = cast v391 : u32;
    v395 = cast v393 : u32;
    v396 = gt v394, v395 : i1;
    v397 = cast v396 : i32;
    v398 = neq v397, 0 : i1;
    v399 = select v398, v391, v392 : i32;
    v400 = cast v203 : u32;
    v401 = add.checked v400, 448 : u32;
    v402 = inttoptr v401 : *mut i32;
    store v402, v399;
    ret;

block4:
    v379 = const.i32 0 : i32;
    br block52(v379, v219);

block5:
    v338 = const.i32 -8 : i32;
    v339 = band v196, v338 : i32;
    v340 = add.wrapping v203, v339 : i32;
    v341 = const.i32 144 : i32;
    v342 = add.wrapping v340, v341 : i32;
    v343 = cast v203 : u32;
    v344 = add.checked v343, 408 : u32;
    v345 = inttoptr v344 : *mut i32;
    v346 = load v345 : i32;
    v347 = const.i32 1 : i32;
    v348 = const.i32 3 : i32;
    v349 = cast v196 : u32;
    v350 = cast v348 : u32;
    v351 = shr.wrapping v349, v350 : u32;
    v352 = cast v351 : i32;
    v353 = shl.wrapping v347, v352 : i32;
    v354 = band v346, v353 : i32;
    v355 = neq v354, 0 : i1;
    condbr v355, block50, block51;

block6:
    ret;

block7(v121: i32, v162: i32):
    v97 = cast v12 : u32;
    v98 = add.checked v97, 4 : u32;
    v99 = inttoptr v98 : *mut i32;
    v100 = load v99 : i32;
    v101 = const.i32 2 : i32;
    v102 = band v100, v101 : i32;
    v103 = neq v102, 0 : i1;
    condbr v103, block19, block20;

block8:
    v16 = const.i32 3 : i32;
    v17 = band v9, v16 : i32;
    v18 = eq v17, 0 : i1;
    v19 = cast v18 : i32;
    v20 = neq v19, 0 : i1;
    condbr v20, block6, block9;

block9:
    v21 = cast v4 : u32;
    v22 = inttoptr v21 : *mut i32;
    v23 = load v22 : i32;
    v24 = add.wrapping v23, v11 : i32;
    v25 = sub.wrapping v4, v23 : i32;
    v26 = cast v0 : u32;
    v27 = add.checked v26, 424 : u32;
    v28 = inttoptr v27 : *mut i32;
    v29 = load v28 : i32;
    v30 = neq v25, v29 : i1;
    v31 = cast v30 : i32;
    v32 = neq v31, 0 : i1;
    condbr v32, block10, block11;

block10:
    v58 = const.i32 256 : i32;
    v59 = cast v23 : u32;
    v60 = cast v58 : u32;
    v61 = lt v59, v60 : i1;
    v62 = cast v61 : i32;
    v63 = neq v62, 0 : i1;
    condbr v63, block13, block14;

block11:
    v33 = cast v12 : u32;
    v34 = add.checked v33, 4 : u32;
    v35 = inttoptr v34 : *mut i32;
    v36 = load v35 : i32;
    v37 = const.i32 3 : i32;
    v38 = band v36, v37 : i32;
    v39 = const.i32 3 : i32;
    v40 = neq v38, v39 : i1;
    v41 = cast v40 : i32;
    v42 = neq v41, 0 : i1;
    condbr v42, block7(v24, v25), block12;

block12:
    v43 = const.i32 -2 : i32;
    v44 = band v36, v43 : i32;
    v45 = cast v12 : u32;
    v46 = add.checked v45, 4 : u32;
    v47 = inttoptr v46 : *mut i32;
    store v47, v44;
    v48 = const.i32 1 : i32;
    v49 = bor v24, v48 : i32;
    v50 = cast v25 : u32;
    v51 = add.checked v50, 4 : u32;
    v52 = inttoptr v51 : *mut i32;
    store v52, v49;
    v53 = cast v0 : u32;
    v54 = add.checked v53, 416 : u32;
    v55 = inttoptr v54 : *mut i32;
    store v55, v24;
    v56 = cast v12 : u32;
    v57 = inttoptr v56 : *mut i32;
    store v57, v24;
    ret;

block13:
    v64 = cast v25 : u32;
    v65 = add.checked v64, 12 : u32;
    v66 = inttoptr v65 : *mut i32;
    v67 = load v66 : i32;
    v68 = cast v25 : u32;
    v69 = add.checked v68, 8 : u32;
    v70 = inttoptr v69 : *mut i32;
    v71 = load v70 : i32;
    v72 = eq v67, v71 : i1;
    v73 = cast v72 : i32;
    v74 = neq v73, 0 : i1;
    condbr v74, block15, block16;

block14:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v0, v25);
    br block7(v24, v25);

block15:
    v81 = cast v0 : u32;
    v82 = add.checked v81, 408 : u32;
    v83 = inttoptr v82 : *mut i32;
    v84 = load v83 : i32;
    v85 = const.i32 -2 : i32;
    v86 = const.i32 3 : i32;
    v87 = cast v23 : u32;
    v88 = cast v86 : u32;
    v89 = shr.wrapping v87, v88 : u32;
    v90 = cast v89 : i32;
    v91 = rotl v85, v90 : i32;
    v92 = band v84, v91 : i32;
    v93 = cast v0 : u32;
    v94 = add.checked v93, 408 : u32;
    v95 = inttoptr v94 : *mut i32;
    store v95, v92;
    br block7(v24, v25);

block16:
    v75 = cast v71 : u32;
    v76 = add.checked v75, 12 : u32;
    v77 = inttoptr v76 : *mut i32;
    store v77, v67;
    v78 = cast v67 : u32;
    v79 = add.checked v78, 8 : u32;
    v80 = inttoptr v79 : *mut i32;
    store v80, v71;
    br block7(v24, v25);

block17:
    v222 = cast v104 : u32;
    v223 = add.checked v222, 428 : u32;
    v224 = inttoptr v223 : *mut i32;
    store v224, v162;
    v225 = cast v104 : u32;
    v226 = add.checked v225, 420 : u32;
    v227 = inttoptr v226 : *mut i32;
    v228 = load v227 : i32;
    v229 = add.wrapping v228, v121 : i32;
    v230 = cast v104 : u32;
    v231 = add.checked v230, 420 : u32;
    v232 = inttoptr v231 : *mut i32;
    store v232, v229;
    v233 = const.i32 1 : i32;
    v234 = bor v229, v233 : i32;
    v235 = cast v162 : u32;
    v236 = add.checked v235, 4 : u32;
    v237 = inttoptr v236 : *mut i32;
    store v237, v234;
    v238 = cast v104 : u32;
    v239 = add.checked v238, 424 : u32;
    v240 = inttoptr v239 : *mut i32;
    v241 = load v240 : i32;
    v242 = neq v162, v241 : i1;
    v243 = cast v242 : i32;
    v244 = neq v243, 0 : i1;
    condbr v244, block32, block33;

block18(v196: i32, v203: i32, v204: i32):
    v197 = const.i32 256 : i32;
    v198 = cast v196 : u32;
    v199 = cast v197 : u32;
    v200 = lt v198, v199 : i1;
    v201 = cast v200 : i32;
    v202 = neq v201, 0 : i1;
    condbr v202, block5, block29;

block19:
    v183 = const.i32 -2 : i32;
    v184 = band v100, v183 : i32;
    v185 = cast v96 : u32;
    v186 = add.checked v185, 4 : u32;
    v187 = inttoptr v186 : *mut i32;
    store v187, v184;
    v188 = const.i32 1 : i32;
    v189 = bor v121, v188 : i32;
    v190 = cast v162 : u32;
    v191 = add.checked v190, 4 : u32;
    v192 = inttoptr v191 : *mut i32;
    store v192, v189;
    v193 = add.wrapping v162, v121 : i32;
    v194 = cast v193 : u32;
    v195 = inttoptr v194 : *mut i32;
    store v195, v121;
    br block18(v121, v104, v162);

block20:
    v105 = cast v0 : u32;
    v106 = add.checked v105, 428 : u32;
    v107 = inttoptr v106 : *mut i32;
    v108 = load v107 : i32;
    v109 = eq v96, v108 : i1;
    v110 = cast v109 : i32;
    v111 = neq v110, 0 : i1;
    condbr v111, block17, block21;

block21:
    v112 = cast v104 : u32;
    v113 = add.checked v112, 424 : u32;
    v114 = inttoptr v113 : *mut i32;
    v115 = load v114 : i32;
    v116 = eq v96, v115 : i1;
    v117 = cast v116 : i32;
    v118 = neq v117, 0 : i1;
    condbr v118, block2, block22;

block22:
    v119 = const.i32 -8 : i32;
    v120 = band v100, v119 : i32;
    v122 = add.wrapping v120, v121 : i32;
    v123 = const.i32 256 : i32;
    v124 = cast v120 : u32;
    v125 = cast v123 : u32;
    v126 = lt v124, v125 : i1;
    v127 = cast v126 : i32;
    v128 = neq v127, 0 : i1;
    condbr v128, block24, block25;

block23:
    v164 = const.i32 1 : i32;
    v165 = bor v122, v164 : i32;
    v166 = cast v162 : u32;
    v167 = add.checked v166, 4 : u32;
    v168 = inttoptr v167 : *mut i32;
    store v168, v165;
    v169 = add.wrapping v161, v163 : i32;
    v170 = cast v169 : u32;
    v171 = inttoptr v170 : *mut i32;
    store v171, v163;
    v173 = cast v104 : u32;
    v174 = add.checked v173, 424 : u32;
    v175 = inttoptr v174 : *mut i32;
    v176 = load v175 : i32;
    v177 = neq v161, v176 : i1;
    v178 = cast v177 : i32;
    v179 = neq v178, 0 : i1;
    condbr v179, block18(v163, v172, v161), block28;

block24:
    v129 = cast v96 : u32;
    v130 = add.checked v129, 12 : u32;
    v131 = inttoptr v130 : *mut i32;
    v132 = load v131 : i32;
    v133 = cast v96 : u32;
    v134 = add.checked v133, 8 : u32;
    v135 = inttoptr v134 : *mut i32;
    v136 = load v135 : i32;
    v137 = eq v132, v136 : i1;
    v138 = cast v137 : i32;
    v139 = neq v138, 0 : i1;
    condbr v139, block26, block27;

block25:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v104, v96);
    br block23;

block26:
    v146 = cast v104 : u32;
    v147 = add.checked v146, 408 : u32;
    v148 = inttoptr v147 : *mut i32;
    v149 = load v148 : i32;
    v150 = const.i32 -2 : i32;
    v151 = const.i32 3 : i32;
    v152 = cast v100 : u32;
    v153 = cast v151 : u32;
    v154 = shr.wrapping v152, v153 : u32;
    v155 = cast v154 : i32;
    v156 = rotl v150, v155 : i32;
    v157 = band v149, v156 : i32;
    v158 = cast v104 : u32;
    v159 = add.checked v158, 408 : u32;
    v160 = inttoptr v159 : *mut i32;
    store v160, v157;
    br block23;

block27:
    v140 = cast v136 : u32;
    v141 = add.checked v140, 12 : u32;
    v142 = inttoptr v141 : *mut i32;
    store v142, v132;
    v143 = cast v132 : u32;
    v144 = add.checked v143, 8 : u32;
    v145 = inttoptr v144 : *mut i32;
    store v145, v136;
    br block23;

block28:
    v180 = cast v172 : u32;
    v181 = add.checked v180, 416 : u32;
    v182 = inttoptr v181 : *mut i32;
    store v182, v163;
    ret;

block29:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(v203, v204, v196);
    v205 = cast v203 : u32;
    v206 = add.checked v205, 448 : u32;
    v207 = inttoptr v206 : *mut i32;
    v208 = load v207 : i32;
    v209 = const.i32 -1 : i32;
    v210 = add.wrapping v208, v209 : i32;
    v211 = cast v203 : u32;
    v212 = add.checked v211, 448 : u32;
    v213 = inttoptr v212 : *mut i32;
    store v213, v210;
    v214 = neq v210, 0 : i1;
    condbr v214, block6, block30;

block30:
    v215 = const.i32 136 : i32;
    v216 = add.wrapping v203, v215 : i32;
    v217 = cast v216 : u32;
    v218 = inttoptr v217 : *mut i32;
    v219 = load v218 : i32;
    v220 = neq v219, 0 : i1;
    condbr v220, block4, block31;

block31:
    v221 = const.i32 0 : i32;
    br block3(v221);

block32:
    v255 = cast v104 : u32;
    v256 = add.checked v255, 440 : u32;
    v257 = inttoptr v256 : *mut i32;
    v258 = load v257 : i32;
    v259 = cast v229 : u32;
    v260 = cast v258 : u32;
    v261 = lte v259, v260 : i1;
    v262 = cast v261 : i32;
    v263 = neq v262, 0 : i1;
    condbr v263, block6, block34;

block33:
    v245 = const.i32 0 : i32;
    v246 = cast v104 : u32;
    v247 = add.checked v246, 416 : u32;
    v248 = inttoptr v247 : *mut i32;
    store v248, v245;
    v249 = const.i32 0 : i32;
    v250 = cast v104 : u32;
    v251 = add.checked v250, 424 : u32;
    v252 = inttoptr v251 : *mut i32;
    store v252, v249;
    br block32;

block34:
    v264 = const.i32 41 : i32;
    v265 = cast v253 : u32;
    v266 = cast v264 : u32;
    v267 = lt v265, v266 : i1;
    v268 = cast v267 : i32;
    v269 = neq v268, 0 : i1;
    condbr v269, block35(v254), block36;

block35(v300: i32):
    v303 = const.i32 136 : i32;
    v304 = add.wrapping v300, v303 : i32;
    v305 = cast v304 : u32;
    v306 = inttoptr v305 : *mut i32;
    v307 = load v306 : i32;
    v308 = neq v307, 0 : i1;
    condbr v308, block44, block45;

block36:
    v270 = const.i32 128 : i32;
    v271 = add.wrapping v254, v270 : i32;
    br block37(v271);

block37(v272: i32):
    v273 = cast v272 : u32;
    v274 = inttoptr v273 : *mut i32;
    v275 = load v274 : i32;
    v277 = cast v275 : u32;
    v278 = cast v276 : u32;
    v279 = gt v277, v278 : i1;
    v280 = cast v279 : i32;
    v281 = neq v280, 0 : i1;
    condbr v281, block39, block40;

block38:
    br block35(v302);

block39:
    v293 = cast v272 : u32;
    v294 = add.checked v293, 8 : u32;
    v295 = inttoptr v294 : *mut i32;
    v296 = load v295 : i32;
    v297 = neq v296, 0 : i1;
    condbr v297, block37(v296), block42;

block40:
    v282 = cast v272 : u32;
    v283 = add.checked v282, 4 : u32;
    v284 = inttoptr v283 : *mut i32;
    v285 = load v284 : i32;
    v286 = add.wrapping v275, v285 : i32;
    v287 = cast v286 : u32;
    v288 = cast v276 : u32;
    v289 = gt v287, v288 : i1;
    v290 = cast v289 : i32;
    v291 = neq v290, 0 : i1;
    condbr v291, block35(v254), block41;

block41:
    br block39;

block42:
    br block38;

block43(v326: i32):
    v322 = const.i32 -1 : i32;
    v323 = cast v300 : u32;
    v324 = add.checked v323, 440 : u32;
    v325 = inttoptr v324 : *mut i32;
    store v325, v322;
    v327 = const.i32 4095 : i32;
    v328 = const.i32 4095 : i32;
    v329 = cast v326 : u32;
    v330 = cast v328 : u32;
    v331 = gt v329, v330 : i1;
    v332 = cast v331 : i32;
    v333 = neq v332, 0 : i1;
    v334 = select v333, v326, v327 : i32;
    v335 = cast v320 : u32;
    v336 = add.checked v335, 448 : u32;
    v337 = inttoptr v336 : *mut i32;
    store v337, v334;
    br block6;

block44:
    v310 = const.i32 0 : i32;
    br block46(v310, v307);

block45:
    v309 = const.i32 0 : i32;
    br block43(v309);

block46(v311: i32, v314: i32):
    v312 = const.i32 1 : i32;
    v313 = add.wrapping v311, v312 : i32;
    v315 = cast v314 : u32;
    v316 = add.checked v315, 8 : u32;
    v317 = inttoptr v316 : *mut i32;
    v318 = load v317 : i32;
    v319 = neq v318, 0 : i1;
    condbr v319, block46(v313, v318), block48;

block47:
    br block43(v313);

block48:
    br block47;

block49(v369: i32):
    v366 = cast v342 : u32;
    v367 = add.checked v366, 8 : u32;
    v368 = inttoptr v367 : *mut i32;
    store v368, v204;
    v370 = cast v369 : u32;
    v371 = add.checked v370, 12 : u32;
    v372 = inttoptr v371 : *mut i32;
    store v372, v365;
    v373 = cast v365 : u32;
    v374 = add.checked v373, 12 : u32;
    v375 = inttoptr v374 : *mut i32;
    store v375, v364;
    v376 = cast v365 : u32;
    v377 = add.checked v376, 8 : u32;
    v378 = inttoptr v377 : *mut i32;
    store v378, v369;
    ret;

block50:
    v360 = cast v342 : u32;
    v361 = add.checked v360, 8 : u32;
    v362 = inttoptr v361 : *mut i32;
    v363 = load v362 : i32;
    br block49(v363);

block51:
    v356 = bor v346, v353 : i32;
    v357 = cast v203 : u32;
    v358 = add.checked v357, 408 : u32;
    v359 = inttoptr v358 : *mut i32;
    store v359, v356;
    br block49(v342);

block52(v380: i32, v383: i32):
    v381 = const.i32 1 : i32;
    v382 = add.wrapping v380, v381 : i32;
    v384 = cast v383 : u32;
    v385 = add.checked v384, 8 : u32;
    v386 = inttoptr v385 : *mut i32;
    v387 = load v386 : i32;
    v388 = neq v387, 0 : i1;
    condbr v388, block52(v382, v387), block54;

block53:
    br block3(v382);

block54:
    br block53;
}

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::malloc(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v3 = const.i32 0 : i32;
    v4 = const.i64 0 : i64;
    v5 = const.i32 245 : i32;
    v6 = cast v1 : u32;
    v7 = cast v5 : u32;
    v8 = lt v6, v7 : i1;
    v9 = cast v8 : i32;
    v10 = neq v9, 0 : i1;
    condbr v10, block7, block8;

block1(v2: i32):
    ret v2;

block2(v1563: i32):
    br block1(v1563);

block3(v738: i32, v743: i32):
    v739 = cast v738 : u32;
    v740 = add.checked v739, 416 : u32;
    v741 = inttoptr v740 : *mut i32;
    v742 = load v741 : i32;
    v744 = cast v742 : u32;
    v745 = cast v743 : u32;
    v746 = gte v744, v745 : i1;
    v747 = cast v746 : i32;
    v748 = neq v747, 0 : i1;
    condbr v748, block82, block83;

block4(v621: i32, v625: i32, v634: i32, v640: i32):
    v622 = eq v621, 0 : i1;
    v623 = cast v622 : i32;
    v624 = neq v623, 0 : i1;
    condbr v624, block3(v625, v634), block63;

block5(v611: i32, v612: i32, v614: i32, v618: i32, v629: i32):
    br block58(v611, v612, v618, v629);

block6(v529: i32, v531: i32, v538: i32, v545: i32, v553: i32, v616: i32, v620: i32):
    v534 = bor v529, v531 : i32;
    v535 = neq v534, 0 : i1;
    condbr v535, block54(v529, v531), block55;

block7:
    v150 = cast v0 : u32;
    v151 = add.checked v150, 408 : u32;
    v152 = inttoptr v151 : *mut i32;
    v153 = load v152 : i32;
    v154 = const.i32 16 : i32;
    v155 = const.i32 11 : i32;
    v156 = add.wrapping v1, v155 : i32;
    v157 = const.i32 -8 : i32;
    v158 = band v156, v157 : i32;
    v159 = const.i32 11 : i32;
    v160 = cast v1 : u32;
    v161 = cast v159 : u32;
    v162 = lt v160, v161 : i1;
    v163 = cast v162 : i32;
    v164 = neq v163, 0 : i1;
    v165 = select v164, v154, v158 : i32;
    v166 = const.i32 3 : i32;
    v167 = cast v165 : u32;
    v168 = cast v166 : u32;
    v169 = shr.wrapping v167, v168 : u32;
    v170 = cast v169 : i32;
    v171 = cast v153 : u32;
    v172 = cast v170 : u32;
    v173 = shr.wrapping v171, v172 : u32;
    v174 = cast v173 : i32;
    v175 = const.i32 3 : i32;
    v176 = band v174, v175 : i32;
    v177 = eq v176, 0 : i1;
    v178 = cast v177 : i32;
    v179 = neq v178, 0 : i1;
    condbr v179, block23, block24;

block8:
    v11 = const.i32 0 : i32;
    v12 = const.i32 -65587 : i32;
    v13 = cast v1 : u32;
    v14 = cast v12 : u32;
    v15 = gte v13, v14 : i1;
    v16 = cast v15 : i32;
    v17 = neq v16, 0 : i1;
    condbr v17, block2(v11), block9;

block9:
    v18 = const.i32 11 : i32;
    v19 = add.wrapping v1, v18 : i32;
    v20 = const.i32 -8 : i32;
    v21 = band v19, v20 : i32;
    v22 = cast v0 : u32;
    v23 = add.checked v22, 412 : u32;
    v24 = inttoptr v23 : *mut i32;
    v25 = load v24 : i32;
    v26 = eq v25, 0 : i1;
    v27 = cast v26 : i32;
    v28 = neq v27, 0 : i1;
    condbr v28, block3(v0, v21), block10;

block10:
    v29 = const.i32 0 : i32;
    v30 = const.i32 0 : i32;
    v31 = const.i32 256 : i32;
    v32 = cast v21 : u32;
    v33 = cast v31 : u32;
    v34 = lt v32, v33 : i1;
    v35 = cast v34 : i32;
    v36 = neq v35, 0 : i1;
    condbr v36, block11(v30), block12;

block11(v67: i32):
    v63 = const.i32 0 : i32;
    v65 = sub.wrapping v63, v21 : i32;
    v68 = const.i32 2 : i32;
    v69 = shl.wrapping v67, v68 : i32;
    v70 = add.wrapping v0, v69 : i32;
    v71 = cast v70 : u32;
    v72 = inttoptr v71 : *mut i32;
    v73 = load v72 : i32;
    v74 = neq v73, 0 : i1;
    condbr v74, block14, block15;

block12:
    v37 = const.i32 31 : i32;
    v38 = const.i32 16777215 : i32;
    v39 = cast v21 : u32;
    v40 = cast v38 : u32;
    v41 = gt v39, v40 : i1;
    v42 = cast v41 : i32;
    v43 = neq v42, 0 : i1;
    condbr v43, block11(v37), block13;

block13:
    v44 = const.i32 6 : i32;
    v45 = const.i32 8 : i32;
    v46 = cast v19 : u32;
    v47 = cast v45 : u32;
    v48 = shr.wrapping v46, v47 : u32;
    v49 = cast v48 : i32;
    v50 = popcnt v49 : i32;
    v51 = sub.wrapping v44, v50 : i32;
    v52 = cast v21 : u32;
    v53 = cast v51 : u32;
    v54 = shr.wrapping v52, v53 : u32;
    v55 = cast v54 : i32;
    v56 = const.i32 1 : i32;
    v57 = band v55, v56 : i32;
    v58 = const.i32 1 : i32;
    v59 = shl.wrapping v50, v58 : i32;
    v60 = sub.wrapping v57, v59 : i32;
    v61 = const.i32 62 : i32;
    v62 = add.wrapping v60, v61 : i32;
    br block11(v62);

block14:
    v76 = const.i32 0 : i32;
    v77 = const.i32 0 : i32;
    v78 = const.i32 25 : i32;
    v79 = const.i32 1 : i32;
    v80 = cast v67 : u32;
    v81 = cast v79 : u32;
    v82 = shr.wrapping v80, v81 : u32;
    v83 = cast v82 : i32;
    v84 = sub.wrapping v78, v83 : i32;
    v85 = const.i32 31 : i32;
    v86 = eq v67, v85 : i1;
    v87 = cast v86 : i32;
    v88 = neq v87, 0 : i1;
    v89 = select v88, v77, v84 : i32;
    v90 = shl.wrapping v64, v89 : i32;
    v91 = const.i32 0 : i32;
    br block16(v73, v65, v76, v90, v91, v67, v546, v66);

block15:
    v75 = const.i32 0 : i32;
    br block6(v29, v75, v67, v25, v66, v64, v65);

block16(v92: i32, v106: i32, v121: i32, v123: i32, v533: i32, v540: i32, v548: i32, v555: i32):
    v93 = cast v92 : u32;
    v94 = add.checked v93, 4 : u32;
    v95 = inttoptr v94 : *mut i32;
    v96 = load v95 : i32;
    v97 = const.i32 -8 : i32;
    v98 = band v96, v97 : i32;
    v100 = cast v98 : u32;
    v101 = cast v99 : u32;
    v102 = lt v100, v101 : i1;
    v103 = cast v102 : i32;
    v104 = neq v103, 0 : i1;
    condbr v104, block18(v106, v533), block19;

block17:

block18(v149: i32, v532: i32):
    v115 = const.i32 20 : i32;
    v116 = add.wrapping v92, v115 : i32;
    v117 = cast v116 : u32;
    v118 = inttoptr v117 : *mut i32;
    v119 = load v118 : i32;
    v124 = const.i32 29 : i32;
    v125 = cast v123 : u32;
    v126 = cast v124 : u32;
    v127 = shr.wrapping v125, v126 : u32;
    v128 = cast v127 : i32;
    v129 = const.i32 4 : i32;
    v130 = band v128, v129 : i32;
    v131 = add.wrapping v114, v130 : i32;
    v132 = const.i32 16 : i32;
    v133 = add.wrapping v131, v132 : i32;
    v134 = cast v133 : u32;
    v135 = inttoptr v134 : *mut i32;
    v136 = load v135 : i32;
    v137 = neq v119, v136 : i1;
    v138 = cast v137 : i32;
    v139 = neq v138, 0 : i1;
    v140 = select v139, v119, v121 : i32;
    v141 = neq v119, 0 : i1;
    v142 = select v141, v140, v120 : i32;
    v143 = const.i32 1 : i32;
    v144 = shl.wrapping v122, v143 : i32;
    v145 = eq v136, 0 : i1;
    v146 = cast v145 : i32;
    v147 = neq v146, 0 : i1;
    condbr v147, block6(v142, v532, v540, v548, v555, v148, v149), block22;

block19:
    v105 = sub.wrapping v98, v99 : i32;
    v107 = cast v105 : u32;
    v108 = cast v106 : u32;
    v109 = gte v107, v108 : i1;
    v110 = cast v109 : i32;
    v111 = neq v110, 0 : i1;
    condbr v111, block18(v106, v533), block20;

block20:
    v112 = neq v105, 0 : i1;
    condbr v112, block18(v105, v92), block21;

block21:
    v113 = const.i32 0 : i32;
    br block5(v92, v92, v99, v113, v555);

block22:
    br block16(v136, v149, v142, v144, v532, v539, v547, v554);

block23:
    v235 = cast v0 : u32;
    v236 = add.checked v235, 416 : u32;
    v237 = inttoptr v236 : *mut i32;
    v238 = load v237 : i32;
    v239 = cast v165 : u32;
    v240 = cast v238 : u32;
    v241 = lte v239, v240 : i1;
    v242 = cast v241 : i32;
    v243 = neq v242, 0 : i1;
    condbr v243, block3(v0, v165), block28;

block24:
    v180 = const.i32 -1 : i32;
    v181 = bxor v174, v180 : i32;
    v182 = const.i32 1 : i32;
    v183 = band v181, v182 : i32;
    v184 = add.wrapping v183, v170 : i32;
    v185 = const.i32 3 : i32;
    v186 = shl.wrapping v184, v185 : i32;
    v187 = add.wrapping v0, v186 : i32;
    v188 = const.i32 152 : i32;
    v189 = add.wrapping v187, v188 : i32;
    v190 = cast v189 : u32;
    v191 = inttoptr v190 : *mut i32;
    v192 = load v191 : i32;
    v193 = cast v192 : u32;
    v194 = add.checked v193, 8 : u32;
    v195 = inttoptr v194 : *mut i32;
    v196 = load v195 : i32;
    v197 = const.i32 144 : i32;
    v198 = add.wrapping v187, v197 : i32;
    v199 = eq v196, v198 : i1;
    v200 = cast v199 : i32;
    v201 = neq v200, 0 : i1;
    condbr v201, block26, block27;

block25:
    v216 = const.i32 3 : i32;
    v217 = shl.wrapping v184, v216 : i32;
    v218 = const.i32 3 : i32;
    v219 = bor v217, v218 : i32;
    v220 = cast v192 : u32;
    v221 = add.checked v220, 4 : u32;
    v222 = inttoptr v221 : *mut i32;
    store v222, v219;
    v223 = add.wrapping v214, v217 : i32;
    v224 = cast v223 : u32;
    v225 = add.checked v224, 4 : u32;
    v226 = inttoptr v225 : *mut i32;
    v227 = load v226 : i32;
    v228 = const.i32 1 : i32;
    v229 = bor v227, v228 : i32;
    v230 = cast v223 : u32;
    v231 = add.checked v230, 4 : u32;
    v232 = inttoptr v231 : *mut i32;
    store v232, v229;
    v233 = const.i32 8 : i32;
    v234 = add.wrapping v214, v233 : i32;
    ret v234;

block26:
    v208 = const.i32 -2 : i32;
    v209 = rotl v208, v184 : i32;
    v210 = band v153, v209 : i32;
    v211 = cast v0 : u32;
    v212 = add.checked v211, 408 : u32;
    v213 = inttoptr v212 : *mut i32;
    store v213, v210;
    br block25;

block27:
    v202 = cast v196 : u32;
    v203 = add.checked v202, 12 : u32;
    v204 = inttoptr v203 : *mut i32;
    store v204, v198;
    v205 = cast v198 : u32;
    v206 = add.checked v205, 8 : u32;
    v207 = inttoptr v206 : *mut i32;
    store v207, v196;
    br block25;

block28:
    v244 = neq v174, 0 : i1;
    condbr v244, block31, block32;

block29:
    v527 = const.i32 8 : i32;
    v528 = add.wrapping v279, v527 : i32;
    ret v528;

block30:
    v516 = cast v278 : u32;
    v517 = add.checked v516, 424 : u32;
    v518 = inttoptr v517 : *mut i32;
    store v518, v293;
    v521 = cast v512 : u32;
    v522 = add.checked v521, 416 : u32;
    v523 = inttoptr v522 : *mut i32;
    store v523, v280;
    br block29;

block31:
    v388 = const.i32 144 : i32;
    v389 = add.wrapping v0, v388 : i32;
    v390 = shl.wrapping v174, v170 : i32;
    v391 = const.i32 2 : i32;
    v392 = shl.wrapping v391, v170 : i32;
    v393 = const.i32 0 : i32;
    v394 = sub.wrapping v393, v392 : i32;
    v395 = bor v392, v394 : i32;
    v396 = band v390, v395 : i32;
    v397 = popcnt v396 : i32;
    v398 = const.i32 3 : i32;
    v399 = shl.wrapping v397, v398 : i32;
    v400 = add.wrapping v389, v399 : i32;
    v401 = cast v400 : u32;
    v402 = add.checked v401, 8 : u32;
    v403 = inttoptr v402 : *mut i32;
    v404 = load v403 : i32;
    v405 = cast v404 : u32;
    v406 = add.checked v405, 8 : u32;
    v407 = inttoptr v406 : *mut i32;
    v408 = load v407 : i32;
    v409 = eq v408, v400 : i1;
    v410 = cast v409 : i32;
    v411 = neq v410, 0 : i1;
    condbr v411, block47, block48;

block32:
    v245 = cast v0 : u32;
    v246 = add.checked v245, 412 : u32;
    v247 = inttoptr v246 : *mut i32;
    v248 = load v247 : i32;
    v249 = eq v248, 0 : i1;
    v250 = cast v249 : i32;
    v251 = neq v250, 0 : i1;
    condbr v251, block3(v0, v165), block33;

block33:
    v252 = popcnt v248 : i32;
    v253 = const.i32 2 : i32;
    v254 = shl.wrapping v252, v253 : i32;
    v255 = add.wrapping v0, v254 : i32;
    v256 = cast v255 : u32;
    v257 = inttoptr v256 : *mut i32;
    v258 = load v257 : i32;
    v259 = cast v258 : u32;
    v260 = add.checked v259, 4 : u32;
    v261 = inttoptr v260 : *mut i32;
    v262 = load v261 : i32;
    v263 = const.i32 -8 : i32;
    v264 = band v262, v263 : i32;
    v265 = sub.wrapping v264, v165 : i32;
    br block36(v258, v258, v265, v165);

block34:
    v372 = add.wrapping v280, v287 : i32;
    v373 = const.i32 3 : i32;
    v374 = bor v372, v373 : i32;
    v375 = cast v279 : u32;
    v376 = add.checked v375, 4 : u32;
    v377 = inttoptr v376 : *mut i32;
    store v377, v374;
    v378 = add.wrapping v279, v372 : i32;
    v379 = cast v378 : u32;
    v380 = add.checked v379, 4 : u32;
    v381 = inttoptr v380 : *mut i32;
    v382 = load v381 : i32;
    v383 = const.i32 1 : i32;
    v384 = bor v382, v383 : i32;
    v385 = cast v378 : u32;
    v386 = add.checked v385, 4 : u32;
    v387 = inttoptr v386 : *mut i32;
    store v387, v384;
    br block29;

block35:
    v327 = const.i32 -8 : i32;
    v328 = band v305, v327 : i32;
    v329 = add.wrapping v278, v328 : i32;
    v330 = const.i32 144 : i32;
    v331 = add.wrapping v329, v330 : i32;
    v332 = cast v278 : u32;
    v333 = add.checked v332, 424 : u32;
    v334 = inttoptr v333 : *mut i32;
    v335 = load v334 : i32;
    v336 = cast v278 : u32;
    v337 = add.checked v336, 408 : u32;
    v338 = inttoptr v337 : *mut i32;
    v339 = load v338 : i32;
    v340 = const.i32 1 : i32;
    v341 = const.i32 3 : i32;
    v342 = cast v305 : u32;
    v343 = cast v341 : u32;
    v344 = shr.wrapping v342, v343 : u32;
    v345 = cast v344 : i32;
    v346 = shl.wrapping v340, v345 : i32;
    v347 = band v339, v346 : i32;
    v348 = neq v347, 0 : i1;
    condbr v348, block44, block45;

block36(v266: i32, v279: i32, v280: i32, v287: i32):
    v267 = cast v266 : u32;
    v268 = add.checked v267, 16 : u32;
    v269 = inttoptr v268 : *mut i32;
    v270 = load v269 : i32;
    v271 = neq v270, 0 : i1;
    condbr v271, block38(v270), block39;

block37:

block38(v307: i32):
    v308 = cast v307 : u32;
    v309 = add.checked v308, 4 : u32;
    v310 = inttoptr v309 : *mut i32;
    v311 = load v310 : i32;
    v312 = const.i32 -8 : i32;
    v313 = band v311, v312 : i32;
    v315 = sub.wrapping v313, v287 : i32;
    v317 = cast v315 : u32;
    v318 = cast v316 : u32;
    v319 = lt v317, v318 : i1;
    v320 = cast v319 : i32;
    v321 = neq v320, 0 : i1;
    v322 = select v321, v315, v280 : i32;
    v324 = neq v320, 0 : i1;
    v325 = select v324, v307, v279 : i32;
    br block36(v307, v325, v322, v314);

block39:
    v272 = const.i32 20 : i32;
    v273 = add.wrapping v266, v272 : i32;
    v274 = cast v273 : u32;
    v275 = inttoptr v274 : *mut i32;
    v276 = load v275 : i32;
    v277 = neq v276, 0 : i1;
    condbr v277, block38(v276), block40;

block40:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v278, v279);
    v281 = const.i32 16 : i32;
    v282 = cast v280 : u32;
    v283 = cast v281 : u32;
    v284 = lt v282, v283 : i1;
    v285 = cast v284 : i32;
    v286 = neq v285, 0 : i1;
    condbr v286, block34, block41;

block41:
    v288 = const.i32 3 : i32;
    v289 = bor v287, v288 : i32;
    v290 = cast v279 : u32;
    v291 = add.checked v290, 4 : u32;
    v292 = inttoptr v291 : *mut i32;
    store v292, v289;
    v293 = add.wrapping v279, v287 : i32;
    v294 = const.i32 1 : i32;
    v295 = bor v280, v294 : i32;
    v296 = cast v293 : u32;
    v297 = add.checked v296, 4 : u32;
    v298 = inttoptr v297 : *mut i32;
    store v298, v295;
    v299 = add.wrapping v293, v280 : i32;
    v300 = cast v299 : u32;
    v301 = inttoptr v300 : *mut i32;
    store v301, v280;
    v302 = cast v278 : u32;
    v303 = add.checked v302, 416 : u32;
    v304 = inttoptr v303 : *mut i32;
    v305 = load v304 : i32;
    v306 = neq v305, 0 : i1;
    condbr v306, block35, block42;

block42:
    br block30;

block43(v362: i32):
    v359 = cast v331 : u32;
    v360 = add.checked v359, 8 : u32;
    v361 = inttoptr v360 : *mut i32;
    store v361, v335;
    v363 = cast v362 : u32;
    v364 = add.checked v363, 12 : u32;
    v365 = inttoptr v364 : *mut i32;
    store v365, v358;
    v366 = cast v358 : u32;
    v367 = add.checked v366, 12 : u32;
    v368 = inttoptr v367 : *mut i32;
    store v368, v357;
    v369 = cast v358 : u32;
    v370 = add.checked v369, 8 : u32;
    v371 = inttoptr v370 : *mut i32;
    store v371, v362;
    br block30;

block44:
    v353 = cast v331 : u32;
    v354 = add.checked v353, 8 : u32;
    v355 = inttoptr v354 : *mut i32;
    v356 = load v355 : i32;
    br block43(v356);

block45:
    v349 = bor v339, v346 : i32;
    v350 = cast v278 : u32;
    v351 = add.checked v350, 408 : u32;
    v352 = inttoptr v351 : *mut i32;
    store v352, v349;
    br block43(v331);

block46:
    v426 = const.i32 3 : i32;
    v427 = bor v165, v426 : i32;
    v428 = cast v404 : u32;
    v429 = add.checked v428, 4 : u32;
    v430 = inttoptr v429 : *mut i32;
    store v430, v427;
    v431 = add.wrapping v424, v425 : i32;
    v433 = const.i32 3 : i32;
    v434 = shl.wrapping v397, v433 : i32;
    v435 = sub.wrapping v434, v425 : i32;
    v436 = const.i32 1 : i32;
    v437 = bor v435, v436 : i32;
    v438 = cast v431 : u32;
    v439 = add.checked v438, 4 : u32;
    v440 = inttoptr v439 : *mut i32;
    store v440, v437;
    v441 = add.wrapping v424, v434 : i32;
    v442 = cast v441 : u32;
    v443 = inttoptr v442 : *mut i32;
    store v443, v435;
    v445 = cast v0 : u32;
    v446 = add.checked v445, 416 : u32;
    v447 = inttoptr v446 : *mut i32;
    v448 = load v447 : i32;
    v449 = eq v448, 0 : i1;
    v450 = cast v449 : i32;
    v451 = neq v450, 0 : i1;
    condbr v451, block49, block50;

block47:
    v418 = const.i32 -2 : i32;
    v419 = rotl v418, v397 : i32;
    v420 = band v153, v419 : i32;
    v421 = cast v0 : u32;
    v422 = add.checked v421, 408 : u32;
    v423 = inttoptr v422 : *mut i32;
    store v423, v420;
    br block46;

block48:
    v412 = cast v408 : u32;
    v413 = add.checked v412, 12 : u32;
    v414 = inttoptr v413 : *mut i32;
    store v414, v400;
    v415 = cast v400 : u32;
    v416 = add.checked v415, 8 : u32;
    v417 = inttoptr v416 : *mut i32;
    store v417, v408;
    br block46;

block49:
    v500 = cast v444 : u32;
    v501 = add.checked v500, 424 : u32;
    v502 = inttoptr v501 : *mut i32;
    store v502, v431;
    v505 = cast v496 : u32;
    v506 = add.checked v505, 416 : u32;
    v507 = inttoptr v506 : *mut i32;
    store v507, v435;
    v510 = const.i32 8 : i32;
    v511 = add.wrapping v424, v510 : i32;
    ret v511;

block50:
    v453 = const.i32 -8 : i32;
    v454 = band v448, v453 : i32;
    v455 = add.wrapping v389, v454 : i32;
    v456 = cast v444 : u32;
    v457 = add.checked v456, 424 : u32;
    v458 = inttoptr v457 : *mut i32;
    v459 = load v458 : i32;
    v460 = cast v444 : u32;
    v461 = add.checked v460, 408 : u32;
    v462 = inttoptr v461 : *mut i32;
    v463 = load v462 : i32;
    v464 = const.i32 1 : i32;
    v465 = const.i32 3 : i32;
    v466 = cast v448 : u32;
    v467 = cast v465 : u32;
    v468 = shr.wrapping v466, v467 : u32;
    v469 = cast v468 : i32;
    v470 = shl.wrapping v464, v469 : i32;
    v471 = band v463, v470 : i32;
    v472 = neq v471, 0 : i1;
    condbr v472, block52, block53;

block51(v486: i32):
    v483 = cast v455 : u32;
    v484 = add.checked v483, 8 : u32;
    v485 = inttoptr v484 : *mut i32;
    store v485, v459;
    v487 = cast v486 : u32;
    v488 = add.checked v487, 12 : u32;
    v489 = inttoptr v488 : *mut i32;
    store v489, v482;
    v490 = cast v482 : u32;
    v491 = add.checked v490, 12 : u32;
    v492 = inttoptr v491 : *mut i32;
    store v492, v481;
    v493 = cast v482 : u32;
    v494 = add.checked v493, 8 : u32;
    v495 = inttoptr v494 : *mut i32;
    store v495, v486;
    br block49;

block52:
    v477 = cast v455 : u32;
    v478 = add.checked v477, 8 : u32;
    v479 = inttoptr v478 : *mut i32;
    v480 = load v479 : i32;
    br block51(v480);

block53:
    v473 = bor v463, v470 : i32;
    v474 = cast v444 : u32;
    v475 = add.checked v474, 408 : u32;
    v476 = inttoptr v475 : *mut i32;
    store v476, v473;
    br block51(v455);

block54(v563: i32, v613: i32):
    v564 = eq v563, 0 : i1;
    v565 = cast v564 : i32;
    v566 = neq v565, 0 : i1;
    condbr v566, block4(v613, v553, v615, v619), block57;

block55:
    v536 = const.i32 0 : i32;
    v537 = const.i32 2 : i32;
    v541 = shl.wrapping v537, v538 : i32;
    v542 = const.i32 0 : i32;
    v543 = sub.wrapping v542, v541 : i32;
    v544 = bor v541, v543 : i32;
    v549 = band v544, v545 : i32;
    v550 = eq v549, 0 : i1;
    v551 = cast v550 : i32;
    v552 = neq v551, 0 : i1;
    condbr v552, block3(v553, v616), block56;

block56:
    v556 = popcnt v549 : i32;
    v557 = const.i32 2 : i32;
    v558 = shl.wrapping v556, v557 : i32;
    v559 = add.wrapping v553, v558 : i32;
    v560 = cast v559 : u32;
    v561 = inttoptr v560 : *mut i32;
    v562 = load v561 : i32;
    br block54(v562, v536);

block57:
    br block5(v563, v613, v616, v620, v626);

block58(v567: i32, v568: i32, v577: i32, v628: i32):
    v569 = cast v567 : u32;
    v570 = add.checked v569, 4 : u32;
    v571 = inttoptr v570 : *mut i32;
    v572 = load v571 : i32;
    v573 = const.i32 -8 : i32;
    v574 = band v572, v573 : i32;
    v576 = sub.wrapping v574, v575 : i32;
    v578 = cast v576 : u32;
    v579 = cast v577 : u32;
    v580 = lt v578, v579 : i1;
    v581 = cast v580 : i32;
    v582 = neq v581, 0 : i1;
    v583 = select v582, v567, v568 : i32;
    v584 = cast v574 : u32;
    v585 = cast v575 : u32;
    v586 = lt v584, v585 : i1;
    v587 = cast v586 : i32;
    v588 = neq v581, 0 : i1;
    v589 = select v588, v576, v577 : i32;
    v590 = cast v567 : u32;
    v591 = add.checked v590, 16 : u32;
    v592 = inttoptr v591 : *mut i32;
    v593 = load v592 : i32;
    v594 = neq v593, 0 : i1;
    condbr v594, block60(v593), block61;

block59:
    br block4(v604, v628, v617, v608);

block60(v609: i32):
    v603 = neq v587, 0 : i1;
    v604 = select v603, v568, v583 : i32;
    v607 = neq v602, 0 : i1;
    v608 = select v607, v577, v589 : i32;
    v610 = neq v609, 0 : i1;
    condbr v610, block58(v609, v604, v608, v627), block62;

block61:
    v595 = const.i32 20 : i32;
    v596 = add.wrapping v567, v595 : i32;
    v597 = cast v596 : u32;
    v598 = inttoptr v597 : *mut i32;
    v599 = load v598 : i32;
    br block60(v599);

block62:
    br block59;

block63:
    v630 = cast v625 : u32;
    v631 = add.checked v630, 416 : u32;
    v632 = inttoptr v631 : *mut i32;
    v633 = load v632 : i32;
    v635 = cast v633 : u32;
    v636 = cast v634 : u32;
    v637 = lt v635, v636 : i1;
    v638 = cast v637 : i32;
    v639 = neq v638, 0 : i1;
    condbr v639, block64, block65;

block64:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v625, v621);
    v650 = const.i32 16 : i32;
    v651 = cast v640 : u32;
    v652 = cast v650 : u32;
    v653 = lt v651, v652 : i1;
    v654 = cast v653 : i32;
    v655 = neq v654, 0 : i1;
    condbr v655, block68, block69;

block65:
    v641 = sub.wrapping v633, v634 : i32;
    v642 = cast v640 : u32;
    v643 = cast v641 : u32;
    v644 = gte v642, v643 : i1;
    v645 = cast v644 : i32;
    v646 = neq v645, 0 : i1;
    condbr v646, block3(v625, v634), block66;

block66:
    br block64;

block67:
    v736 = const.i32 8 : i32;
    v737 = add.wrapping v648, v736 : i32;
    ret v737;

block68:
    v718 = add.wrapping v649, v656 : i32;
    v719 = const.i32 3 : i32;
    v720 = bor v718, v719 : i32;
    v721 = cast v648 : u32;
    v722 = add.checked v721, 4 : u32;
    v723 = inttoptr v722 : *mut i32;
    store v723, v720;
    v724 = add.wrapping v648, v718 : i32;
    v725 = cast v724 : u32;
    v726 = add.checked v725, 4 : u32;
    v727 = inttoptr v726 : *mut i32;
    v728 = load v727 : i32;
    v729 = const.i32 1 : i32;
    v730 = bor v728, v729 : i32;
    v731 = cast v724 : u32;
    v732 = add.checked v731, 4 : u32;
    v733 = inttoptr v732 : *mut i32;
    store v733, v730;
    br block67;

block69:
    v657 = const.i32 3 : i32;
    v658 = bor v634, v657 : i32;
    v659 = cast v648 : u32;
    v660 = add.checked v659, 4 : u32;
    v661 = inttoptr v660 : *mut i32;
    store v661, v658;
    v662 = add.wrapping v648, v656 : i32;
    v663 = const.i32 1 : i32;
    v664 = bor v649, v663 : i32;
    v665 = cast v662 : u32;
    v666 = add.checked v665, 4 : u32;
    v667 = inttoptr v666 : *mut i32;
    store v667, v664;
    v668 = add.wrapping v662, v649 : i32;
    v669 = cast v668 : u32;
    v670 = inttoptr v669 : *mut i32;
    store v670, v649;
    v671 = const.i32 256 : i32;
    v672 = cast v649 : u32;
    v673 = cast v671 : u32;
    v674 = lt v672, v673 : i1;
    v675 = cast v674 : i32;
    v676 = neq v675, 0 : i1;
    condbr v676, block70, block71;

block70:
    v677 = const.i32 -8 : i32;
    v678 = band v649, v677 : i32;
    v679 = add.wrapping v647, v678 : i32;
    v680 = const.i32 144 : i32;
    v681 = add.wrapping v679, v680 : i32;
    v682 = cast v647 : u32;
    v683 = add.checked v682, 408 : u32;
    v684 = inttoptr v683 : *mut i32;
    v685 = load v684 : i32;
    v686 = const.i32 1 : i32;
    v687 = const.i32 3 : i32;
    v688 = cast v649 : u32;
    v689 = cast v687 : u32;
    v690 = shr.wrapping v688, v689 : u32;
    v691 = cast v690 : i32;
    v692 = shl.wrapping v686, v691 : i32;
    v693 = band v685, v692 : i32;
    v694 = neq v693, 0 : i1;
    condbr v694, block73, block74;

block71:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(v647, v662, v649);
    br block67;

block72(v708: i32):
    v705 = cast v681 : u32;
    v706 = add.checked v705, 8 : u32;
    v707 = inttoptr v706 : *mut i32;
    store v707, v662;
    v709 = cast v708 : u32;
    v710 = add.checked v709, 12 : u32;
    v711 = inttoptr v710 : *mut i32;
    store v711, v704;
    v712 = cast v704 : u32;
    v713 = add.checked v712, 12 : u32;
    v714 = inttoptr v713 : *mut i32;
    store v714, v703;
    v715 = cast v704 : u32;
    v716 = add.checked v715, 8 : u32;
    v717 = inttoptr v716 : *mut i32;
    store v717, v708;
    br block67;

block73:
    v699 = cast v681 : u32;
    v700 = add.checked v699, 8 : u32;
    v701 = inttoptr v700 : *mut i32;
    v702 = load v701 : i32;
    br block72(v702);

block74:
    v695 = bor v685, v692 : i32;
    v696 = cast v647 : u32;
    v697 = add.checked v696, 408 : u32;
    v698 = inttoptr v697 : *mut i32;
    store v698, v695;
    br block72(v681);

block75(v1519: i32, v1525: i32, v1564: i32):
    v1521 = cast v1519 : u32;
    v1522 = add.checked v1521, 420 : u32;
    v1523 = inttoptr v1522 : *mut i32;
    v1524 = load v1523 : i32;
    v1534 = cast v1524 : u32;
    v1535 = cast v1525 : u32;
    v1536 = lte v1534, v1535 : i1;
    v1537 = cast v1536 : i32;
    v1538 = neq v1537, 0 : i1;
    condbr v1538, block2(v1564), block144;

block76(v1513: i32):
    v1517 = const.i32 8 : i32;
    v1518 = add.wrapping v1513, v1517 : i32;
    ret v1518;

block77:
    v1511 = const.i32 8 : i32;
    v1512 = add.wrapping v1381, v1511 : i32;
    ret v1512;

block78:
    v1487 = const.i32 0 : i32;
    v1488 = cast v738 : u32;
    v1489 = add.checked v1488, 424 : u32;
    v1490 = inttoptr v1489 : *mut i32;
    store v1490, v1487;
    v1491 = const.i32 0 : i32;
    v1492 = cast v738 : u32;
    v1493 = add.checked v1492, 416 : u32;
    v1494 = inttoptr v1493 : *mut i32;
    store v1494, v1491;
    v1495 = const.i32 3 : i32;
    v1496 = bor v742, v1495 : i32;
    v1497 = cast v1381 : u32;
    v1498 = add.checked v1497, 4 : u32;
    v1499 = inttoptr v1498 : *mut i32;
    store v1499, v1496;
    v1500 = add.wrapping v1381, v742 : i32;
    v1501 = cast v1500 : u32;
    v1502 = add.checked v1501, 4 : u32;
    v1503 = inttoptr v1502 : *mut i32;
    v1504 = load v1503 : i32;
    v1505 = const.i32 1 : i32;
    v1506 = bor v1504, v1505 : i32;
    v1507 = cast v1500 : u32;
    v1508 = add.checked v1507, 4 : u32;
    v1509 = inttoptr v1508 : *mut i32;
    store v1509, v1506;
    br block77;

block79:
    v1468 = cast v1040 : u32;
    v1469 = add.checked v1468, 416 : u32;
    v1470 = inttoptr v1469 : *mut i32;
    v1471 = load v1470 : i32;
    v1472 = add.wrapping v1471, v1213 : i32;
    v1473 = const.i32 1 : i32;
    v1474 = bor v1472, v1473 : i32;
    v1475 = cast v1212 : u32;
    v1476 = add.checked v1475, 4 : u32;
    v1477 = inttoptr v1476 : *mut i32;
    store v1477, v1474;
    v1478 = cast v1040 : u32;
    v1479 = add.checked v1478, 424 : u32;
    v1480 = inttoptr v1479 : *mut i32;
    store v1480, v1212;
    v1481 = cast v1040 : u32;
    v1482 = add.checked v1481, 416 : u32;
    v1483 = inttoptr v1482 : *mut i32;
    store v1483, v1472;
    v1484 = add.wrapping v1212, v1472 : i32;
    v1485 = cast v1484 : u32;
    v1486 = inttoptr v1485 : *mut i32;
    store v1486, v1472;
    br block76(v1025);

block80:
    v1452 = cast v1040 : u32;
    v1453 = add.checked v1452, 428 : u32;
    v1454 = inttoptr v1453 : *mut i32;
    store v1454, v1212;
    v1455 = cast v1040 : u32;
    v1456 = add.checked v1455, 420 : u32;
    v1457 = inttoptr v1456 : *mut i32;
    v1458 = load v1457 : i32;
    v1459 = add.wrapping v1458, v1213 : i32;
    v1460 = cast v1040 : u32;
    v1461 = add.checked v1460, 420 : u32;
    v1462 = inttoptr v1461 : *mut i32;
    store v1462, v1459;
    v1463 = const.i32 1 : i32;
    v1464 = bor v1459, v1463 : i32;
    v1465 = cast v1212 : u32;
    v1466 = add.checked v1465, 4 : u32;
    v1467 = inttoptr v1466 : *mut i32;
    store v1467, v1464;
    br block76(v1025);

block81:
    v1409 = add.wrapping v922, v968 : i32;
    v1410 = cast v915 : u32;
    v1411 = add.checked v1410, 4 : u32;
    v1412 = inttoptr v1411 : *mut i32;
    store v1412, v1409;
    v1413 = cast v952 : u32;
    v1414 = add.checked v1413, 428 : u32;
    v1415 = inttoptr v1414 : *mut i32;
    v1416 = load v1415 : i32;
    v1417 = const.i32 15 : i32;
    v1418 = add.wrapping v1416, v1417 : i32;
    v1419 = const.i32 -8 : i32;
    v1420 = band v1418, v1419 : i32;
    v1421 = const.i32 -8 : i32;
    v1422 = add.wrapping v1420, v1421 : i32;
    v1423 = sub.wrapping v1416, v1420 : i32;
    v1424 = cast v952 : u32;
    v1425 = add.checked v1424, 420 : u32;
    v1426 = inttoptr v1425 : *mut i32;
    v1427 = load v1426 : i32;
    v1428 = add.wrapping v1427, v968 : i32;
    v1429 = add.wrapping v1423, v1428 : i32;
    v1430 = const.i32 8 : i32;
    v1431 = add.wrapping v1429, v1430 : i32;
    v1432 = const.i32 1 : i32;
    v1433 = bor v1431, v1432 : i32;
    v1434 = cast v1422 : u32;
    v1435 = add.checked v1434, 4 : u32;
    v1436 = inttoptr v1435 : *mut i32;
    store v1436, v1433;
    v1437 = const.i32 2097152 : i32;
    v1438 = cast v952 : u32;
    v1439 = add.checked v1438, 440 : u32;
    v1440 = inttoptr v1439 : *mut i32;
    store v1440, v1437;
    v1441 = cast v952 : u32;
    v1442 = add.checked v1441, 428 : u32;
    v1443 = inttoptr v1442 : *mut i32;
    store v1443, v1422;
    v1444 = cast v952 : u32;
    v1445 = add.checked v1444, 420 : u32;
    v1446 = inttoptr v1445 : *mut i32;
    store v1446, v1431;
    v1447 = add.wrapping v1416, v1428 : i32;
    v1448 = const.i32 40 : i32;
    v1449 = cast v1447 : u32;
    v1450 = add.checked v1449, 4 : u32;
    v1451 = inttoptr v1450 : *mut i32;
    store v1451, v1448;
    br block75(v952, v1206, v1573);

block82:
    v1378 = cast v738 : u32;
    v1379 = add.checked v1378, 424 : u32;
    v1380 = inttoptr v1379 : *mut i32;
    v1381 = load v1380 : i32;
    v1382 = sub.wrapping v742, v743 : i32;
    v1383 = const.i32 16 : i32;
    v1384 = cast v1382 : u32;
    v1385 = cast v1383 : u32;
    v1386 = lt v1384, v1385 : i1;
    v1387 = cast v1386 : i32;
    v1388 = neq v1387, 0 : i1;
    condbr v1388, block78, block143;

block83:
    v749 = cast v738 : u32;
    v750 = add.checked v749, 420 : u32;
    v751 = inttoptr v750 : *mut i32;
    v752 = load v751 : i32;
    v753 = cast v752 : u32;
    v754 = cast v743 : u32;
    v755 = gt v753, v754 : i1;
    v756 = cast v755 : i32;
    v757 = neq v756, 0 : i1;
    condbr v757, block84, block85;

block84:
    v1354 = sub.wrapping v752, v743 : i32;
    v1355 = cast v738 : u32;
    v1356 = add.checked v1355, 420 : u32;
    v1357 = inttoptr v1356 : *mut i32;
    store v1357, v1354;
    v1358 = cast v738 : u32;
    v1359 = add.checked v1358, 428 : u32;
    v1360 = inttoptr v1359 : *mut i32;
    v1361 = load v1360 : i32;
    v1362 = add.wrapping v1361, v743 : i32;
    v1363 = cast v738 : u32;
    v1364 = add.checked v1363, 428 : u32;
    v1365 = inttoptr v1364 : *mut i32;
    store v1365, v1362;
    v1366 = const.i32 1 : i32;
    v1367 = bor v1354, v1366 : i32;
    v1368 = cast v1362 : u32;
    v1369 = add.checked v1368, 4 : u32;
    v1370 = inttoptr v1369 : *mut i32;
    store v1370, v1367;
    v1371 = const.i32 3 : i32;
    v1372 = bor v743, v1371 : i32;
    v1373 = cast v1361 : u32;
    v1374 = add.checked v1373, 4 : u32;
    v1375 = inttoptr v1374 : *mut i32;
    store v1375, v1372;
    v1376 = const.i32 8 : i32;
    v1377 = add.wrapping v1361, v1376 : i32;
    br block2(v1377);

block85:
    v758 = const.i32 0 : i32;
    v759 = const.i32 65583 : i32;
    v760 = add.wrapping v743, v759 : i32;
    v761 = const.i32 16 : i32;
    v762 = cast v760 : u32;
    v763 = cast v761 : u32;
    v764 = shr.wrapping v762, v763 : u32;
    v765 = cast v764 : i32;
    v766 = cast v765 : u32;
    v767 = memory.grow v766 : i32;
    v768 = const.i32 -1 : i32;
    v769 = eq v767, v768 : i1;
    v770 = cast v769 : i32;
    v771 = neq v770, 0 : i1;
    condbr v771, block2(v758), block86;

block86:
    v772 = const.i32 16 : i32;
    v773 = shl.wrapping v767, v772 : i32;
    v774 = eq v773, 0 : i1;
    v775 = cast v774 : i32;
    v776 = neq v775, 0 : i1;
    condbr v776, block2(v758), block87;

block87:
    v777 = cast v738 : u32;
    v778 = add.checked v777, 432 : u32;
    v779 = inttoptr v778 : *mut i32;
    v780 = load v779 : i32;
    v781 = const.i32 0 : i32;
    v782 = const.i32 -65536 : i32;
    v783 = band v760, v782 : i32;
    v784 = neq v770, 0 : i1;
    v785 = select v784, v781, v783 : i32;
    v786 = add.wrapping v780, v785 : i32;
    v787 = cast v738 : u32;
    v788 = add.checked v787, 432 : u32;
    v789 = inttoptr v788 : *mut i32;
    store v789, v786;
    v790 = cast v738 : u32;
    v791 = add.checked v790, 436 : u32;
    v792 = inttoptr v791 : *mut i32;
    v793 = load v792 : i32;
    v794 = cast v793 : u32;
    v795 = cast v786 : u32;
    v796 = gt v794, v795 : i1;
    v797 = cast v796 : i32;
    v798 = neq v797, 0 : i1;
    v799 = select v798, v793, v786 : i32;
    v800 = cast v738 : u32;
    v801 = add.checked v800, 436 : u32;
    v802 = inttoptr v801 : *mut i32;
    store v802, v799;
    v803 = cast v738 : u32;
    v804 = add.checked v803, 428 : u32;
    v805 = inttoptr v804 : *mut i32;
    v806 = load v805 : i32;
    v807 = neq v806, 0 : i1;
    condbr v807, block88, block89;

block88:
    v913 = const.i32 128 : i32;
    v914 = add.wrapping v738, v913 : i32;
    br block99(v914);

block89:
    v808 = cast v738 : u32;
    v809 = add.checked v808, 444 : u32;
    v810 = inttoptr v809 : *mut i32;
    v811 = load v810 : i32;
    v812 = eq v811, 0 : i1;
    v813 = cast v812 : i32;
    v814 = neq v813, 0 : i1;
    condbr v814, block91, block92;

block90(v825: i32, v830: i32):
    v826 = const.i32 4095 : i32;
    v827 = cast v825 : u32;
    v828 = add.checked v827, 448 : u32;
    v829 = inttoptr v828 : *mut i32;
    store v829, v826;
    v831 = cast v825 : u32;
    v832 = add.checked v831, 128 : u32;
    v833 = inttoptr v832 : *mut i32;
    store v833, v830;
    v834 = const.i32 0 : i32;
    v835 = const.i32 140 : i32;
    v836 = add.wrapping v825, v835 : i32;
    v837 = const.i32 0 : i32;
    v838 = cast v836 : u32;
    v839 = inttoptr v838 : *mut i32;
    store v839, v837;
    v840 = const.i32 132 : i32;
    v841 = add.wrapping v825, v840 : i32;
    v844 = cast v841 : u32;
    v845 = inttoptr v844 : *mut i32;
    store v845, v785;
    br block94(v834);

block91:
    v822 = cast v738 : u32;
    v823 = add.checked v822, 444 : u32;
    v824 = inttoptr v823 : *mut i32;
    store v824, v773;
    br block90(v820, v821);

block92:
    v815 = cast v811 : u32;
    v816 = cast v773 : u32;
    v817 = lte v815, v816 : i1;
    v818 = cast v817 : i32;
    v819 = neq v818, 0 : i1;
    condbr v819, block90(v738, v773), block93;

block93:
    br block91;

block94(v847: i32):
    v848 = add.wrapping v846, v847 : i32;
    v849 = const.i32 164 : i32;
    v850 = add.wrapping v848, v849 : i32;
    v851 = const.i32 152 : i32;
    v852 = add.wrapping v848, v851 : i32;
    v853 = cast v850 : u32;
    v854 = inttoptr v853 : *mut i32;
    store v854, v852;
    v855 = const.i32 144 : i32;
    v856 = add.wrapping v848, v855 : i32;
    v857 = cast v852 : u32;
    v858 = inttoptr v857 : *mut i32;
    store v858, v856;
    v859 = const.i32 156 : i32;
    v860 = add.wrapping v848, v859 : i32;
    v861 = cast v860 : u32;
    v862 = inttoptr v861 : *mut i32;
    store v862, v856;
    v863 = const.i32 172 : i32;
    v864 = add.wrapping v848, v863 : i32;
    v865 = const.i32 160 : i32;
    v866 = add.wrapping v848, v865 : i32;
    v867 = cast v864 : u32;
    v868 = inttoptr v867 : *mut i32;
    store v868, v866;
    v869 = cast v866 : u32;
    v870 = inttoptr v869 : *mut i32;
    store v870, v852;
    v871 = const.i32 180 : i32;
    v872 = add.wrapping v848, v871 : i32;
    v873 = const.i32 168 : i32;
    v874 = add.wrapping v848, v873 : i32;
    v875 = cast v872 : u32;
    v876 = inttoptr v875 : *mut i32;
    store v876, v874;
    v877 = cast v874 : u32;
    v878 = inttoptr v877 : *mut i32;
    store v878, v866;
    v879 = const.i32 176 : i32;
    v880 = add.wrapping v848, v879 : i32;
    v881 = cast v880 : u32;
    v882 = inttoptr v881 : *mut i32;
    store v882, v874;
    v883 = const.i32 32 : i32;
    v884 = add.wrapping v847, v883 : i32;
    v885 = const.i32 256 : i32;
    v886 = neq v884, v885 : i1;
    v887 = cast v886 : i32;
    v888 = neq v887, 0 : i1;
    condbr v888, block94(v884), block96;

block95:
    v891 = const.i32 -40 : i32;
    v892 = add.wrapping v842, v891 : i32;
    v893 = const.i32 1 : i32;
    v894 = bor v892, v893 : i32;
    v895 = cast v830 : u32;
    v896 = add.checked v895, 4 : u32;
    v897 = inttoptr v896 : *mut i32;
    store v897, v894;
    v898 = cast v846 : u32;
    v899 = add.checked v898, 428 : u32;
    v900 = inttoptr v899 : *mut i32;
    store v900, v889;
    v901 = const.i32 2097152 : i32;
    v902 = cast v846 : u32;
    v903 = add.checked v902, 440 : u32;
    v904 = inttoptr v903 : *mut i32;
    store v904, v901;
    v905 = cast v846 : u32;
    v906 = add.checked v905, 420 : u32;
    v907 = inttoptr v906 : *mut i32;
    store v907, v892;
    v908 = add.wrapping v889, v892 : i32;
    v909 = const.i32 40 : i32;
    v910 = cast v908 : u32;
    v911 = add.checked v910, 4 : u32;
    v912 = inttoptr v911 : *mut i32;
    store v912, v909;
    br block75(v846, v743, v758);

block96:
    br block95;

block97(v951: i32, v967: i32, v970: i32, v1205: i32, v1572: i32):
    v953 = cast v951 : u32;
    v954 = add.checked v953, 444 : u32;
    v955 = inttoptr v954 : *mut i32;
    v956 = load v955 : i32;
    v958 = cast v956 : u32;
    v959 = cast v957 : u32;
    v960 = lt v958, v959 : i1;
    v961 = cast v960 : i32;
    v962 = neq v961, 0 : i1;
    v963 = select v962, v956, v924 : i32;
    v964 = cast v951 : u32;
    v965 = add.checked v964, 444 : u32;
    v966 = inttoptr v965 : *mut i32;
    store v966, v963;
    v969 = add.wrapping v957, v967 : i32;
    br block109(v970);

block98:
    v934 = cast v806 : u32;
    v935 = cast v924 : u32;
    v936 = gte v934, v935 : i1;
    v937 = cast v936 : i32;
    v938 = neq v937, 0 : i1;
    condbr v938, block97(v952, v968, v971, v1206, v1573), block103;

block99(v915: i32):
    v916 = cast v915 : u32;
    v917 = inttoptr v916 : *mut i32;
    v918 = load v917 : i32;
    v919 = cast v915 : u32;
    v920 = add.checked v919, 4 : u32;
    v921 = inttoptr v920 : *mut i32;
    v922 = load v921 : i32;
    v923 = add.wrapping v918, v922 : i32;
    v925 = eq v923, v924 : i1;
    v926 = cast v925 : i32;
    v927 = neq v926, 0 : i1;
    condbr v927, block98, block101;

block100:

block101:
    v928 = cast v915 : u32;
    v929 = add.checked v928, 8 : u32;
    v930 = inttoptr v929 : *mut i32;
    v931 = load v930 : i32;
    v932 = neq v931, 0 : i1;
    condbr v932, block99(v931), block102;

block102:
    br block97(v738, v785, v914, v743, v758);

block103:
    v939 = cast v918 : u32;
    v940 = cast v933 : u32;
    v941 = gt v939, v940 : i1;
    v942 = cast v941 : i32;
    v943 = neq v942, 0 : i1;
    condbr v943, block97(v952, v968, v971, v1206, v1573), block104;

block104:
    v944 = cast v915 : u32;
    v945 = add.checked v944, 12 : u32;
    v946 = inttoptr v945 : *mut i32;
    v947 = load v946 : i32;
    v948 = eq v947, 0 : i1;
    v949 = cast v948 : i32;
    v950 = neq v949, 0 : i1;
    condbr v950, block81, block105;

block105:
    br block97(v952, v968, v971, v1206, v1573);

block106:
    v1194 = cast v972 : u32;
    v1195 = inttoptr v1194 : *mut i32;
    store v1195, v1025;
    v1196 = cast v972 : u32;
    v1197 = add.checked v1196, 4 : u32;
    v1198 = inttoptr v1197 : *mut i32;
    v1199 = load v1198 : i32;
    v1200 = add.wrapping v1199, v1029 : i32;
    v1201 = cast v972 : u32;
    v1202 = add.checked v1201, 4 : u32;
    v1203 = inttoptr v1202 : *mut i32;
    store v1203, v1200;
    v1207 = const.i32 3 : i32;
    v1208 = bor v1205, v1207 : i32;
    v1209 = cast v1025 : u32;
    v1210 = add.checked v1209, 4 : u32;
    v1211 = inttoptr v1210 : *mut i32;
    store v1211, v1208;
    v1212 = add.wrapping v1025, v1204 : i32;
    v1213 = sub.wrapping v976, v1212 : i32;
    v1214 = cast v1040 : u32;
    v1215 = add.checked v1214, 428 : u32;
    v1216 = inttoptr v1215 : *mut i32;
    v1217 = load v1216 : i32;
    v1218 = eq v976, v1217 : i1;
    v1219 = cast v1218 : i32;
    v1220 = neq v1219, 0 : i1;
    condbr v1220, block80, block129;

block107(v992: i32, v1019: i32, v1024: i32, v1028: i32, v1039: i32, v1570: i32):
    br block115(v992);

block108:
    v985 = cast v972 : u32;
    v986 = add.checked v985, 12 : u32;
    v987 = inttoptr v986 : *mut i32;
    v988 = load v987 : i32;
    v989 = eq v988, 0 : i1;
    v990 = cast v989 : i32;
    v991 = neq v990, 0 : i1;
    condbr v991, block106, block113;

block109(v972: i32):
    v973 = cast v972 : u32;
    v974 = inttoptr v973 : *mut i32;
    v975 = load v974 : i32;
    v977 = eq v975, v976 : i1;
    v978 = cast v977 : i32;
    v979 = neq v978, 0 : i1;
    condbr v979, block108, block111;

block110:

block111:
    v980 = cast v972 : u32;
    v981 = add.checked v980, 8 : u32;
    v982 = inttoptr v981 : *mut i32;
    v983 = load v982 : i32;
    v984 = neq v983, 0 : i1;
    condbr v984, block109(v983), block112;

block112:
    br block107(v970, v933, v957, v967, v951, v1572);

block113:
    br block107(v993, v1020, v1025, v1029, v1040, v1571);

block114:
    v1031 = const.i32 -40 : i32;
    v1032 = add.wrapping v1028, v1031 : i32;
    v1033 = const.i32 1 : i32;
    v1034 = bor v1032, v1033 : i32;
    v1035 = cast v1024 : u32;
    v1036 = add.checked v1035, 4 : u32;
    v1037 = inttoptr v1036 : *mut i32;
    store v1037, v1034;
    v1042 = cast v1039 : u32;
    v1043 = add.checked v1042, 428 : u32;
    v1044 = inttoptr v1043 : *mut i32;
    store v1044, v1023;
    v1045 = const.i32 2097152 : i32;
    v1046 = cast v1038 : u32;
    v1047 = add.checked v1046, 440 : u32;
    v1048 = inttoptr v1047 : *mut i32;
    store v1048, v1045;
    v1049 = cast v1038 : u32;
    v1050 = add.checked v1049, 420 : u32;
    v1051 = inttoptr v1050 : *mut i32;
    store v1051, v1032;
    v1052 = add.wrapping v1023, v1032 : i32;
    v1053 = const.i32 40 : i32;
    v1054 = cast v1052 : u32;
    v1055 = add.checked v1054, 4 : u32;
    v1056 = inttoptr v1055 : *mut i32;
    store v1056, v1053;
    v1057 = const.i32 -32 : i32;
    v1058 = add.wrapping v1008, v1057 : i32;
    v1059 = const.i32 -8 : i32;
    v1060 = band v1058, v1059 : i32;
    v1061 = const.i32 -8 : i32;
    v1062 = add.wrapping v1060, v1061 : i32;
    v1063 = const.i32 16 : i32;
    v1064 = add.wrapping v998, v1063 : i32;
    v1065 = cast v1062 : u32;
    v1066 = cast v1064 : u32;
    v1067 = lt v1065, v1066 : i1;
    v1068 = cast v1067 : i32;
    v1069 = neq v1068, 0 : i1;
    v1070 = select v1069, v998, v1062 : i32;
    v1071 = const.i32 27 : i32;
    v1072 = cast v1070 : u32;
    v1073 = add.checked v1072, 4 : u32;
    v1074 = inttoptr v1073 : *mut i32;
    store v1074, v1071;
    v1077 = cast v992 : u32;
    v1078 = inttoptr v1077 : *mut i64;
    v1079 = load v1078 : i64;
    v1080 = const.i32 16 : i32;
    v1081 = add.wrapping v1070, v1080 : i32;
    v1082 = const.i32 8 : i32;
    v1083 = add.wrapping v1075, v1082 : i32;
    v1084 = cast v1083 : u32;
    v1085 = inttoptr v1084 : *mut i64;
    v1086 = load v1085 : i64;
    v1087 = cast v1081 : u32;
    v1088 = inttoptr v1087 : *mut i64;
    store v1088, v1086;
    v1089 = cast v1070 : u32;
    v1090 = add.checked v1089, 8 : u32;
    v1091 = inttoptr v1090 : *mut i64;
    store v1091, v1079;
    v1092 = const.i32 140 : i32;
    v1093 = add.wrapping v1038, v1092 : i32;
    v1094 = const.i32 0 : i32;
    v1095 = cast v1093 : u32;
    v1096 = inttoptr v1095 : *mut i32;
    store v1096, v1094;
    v1097 = const.i32 132 : i32;
    v1098 = add.wrapping v1038, v1097 : i32;
    v1099 = cast v1098 : u32;
    v1100 = inttoptr v1099 : *mut i32;
    store v1100, v1027;
    v1101 = cast v1038 : u32;
    v1102 = add.checked v1101, 128 : u32;
    v1103 = inttoptr v1102 : *mut i32;
    store v1103, v1023;
    v1104 = const.i32 136 : i32;
    v1105 = add.wrapping v1038, v1104 : i32;
    v1106 = const.i32 8 : i32;
    v1107 = add.wrapping v1070, v1106 : i32;
    v1108 = cast v1105 : u32;
    v1109 = inttoptr v1108 : *mut i32;
    store v1109, v1107;
    v1110 = const.i32 28 : i32;
    v1111 = add.wrapping v1070, v1110 : i32;
    br block120(v1111);

block115(v994: i32):
    v995 = cast v994 : u32;
    v996 = inttoptr v995 : *mut i32;
    v997 = load v996 : i32;
    v999 = cast v997 : u32;
    v1000 = cast v998 : u32;
    v1001 = gt v999, v1000 : i1;
    v1002 = cast v1001 : i32;
    v1003 = neq v1002, 0 : i1;
    condbr v1003, block117, block118;

block116:

block117:
    v1015 = cast v994 : u32;
    v1016 = add.checked v1015, 8 : u32;
    v1017 = inttoptr v1016 : *mut i32;
    v1018 = load v1017 : i32;
    br block115(v1018);

block118:
    v1004 = cast v994 : u32;
    v1005 = add.checked v1004, 4 : u32;
    v1006 = inttoptr v1005 : *mut i32;
    v1007 = load v1006 : i32;
    v1008 = add.wrapping v997, v1007 : i32;
    v1009 = cast v1008 : u32;
    v1010 = cast v998 : u32;
    v1011 = gt v1009, v1010 : i1;
    v1012 = cast v1011 : i32;
    v1013 = neq v1012, 0 : i1;
    condbr v1013, block114, block119;

block119:
    br block117;

block120(v1112: i32):
    v1113 = const.i32 7 : i32;
    v1114 = cast v1112 : u32;
    v1115 = inttoptr v1114 : *mut i32;
    store v1115, v1113;
    v1116 = const.i32 4 : i32;
    v1117 = add.wrapping v1112, v1116 : i32;
    v1119 = cast v1117 : u32;
    v1120 = cast v1118 : u32;
    v1121 = lt v1119, v1120 : i1;
    v1122 = cast v1121 : i32;
    v1123 = neq v1122, 0 : i1;
    condbr v1123, block120(v1117), block122;

block121:
    v1126 = eq v1070, v998 : i1;
    v1127 = cast v1126 : i32;
    v1128 = neq v1127, 0 : i1;
    condbr v1128, block75(v1152, v1204, v1570), block123;

block122:
    br block121;

block123:
    v1129 = cast v1124 : u32;
    v1130 = add.checked v1129, 4 : u32;
    v1131 = inttoptr v1130 : *mut i32;
    v1132 = load v1131 : i32;
    v1133 = const.i32 -2 : i32;
    v1134 = band v1132, v1133 : i32;
    v1135 = cast v1124 : u32;
    v1136 = add.checked v1135, 4 : u32;
    v1137 = inttoptr v1136 : *mut i32;
    store v1137, v1134;
    v1138 = sub.wrapping v1124, v1125 : i32;
    v1139 = const.i32 1 : i32;
    v1140 = bor v1138, v1139 : i32;
    v1141 = cast v1125 : u32;
    v1142 = add.checked v1141, 4 : u32;
    v1143 = inttoptr v1142 : *mut i32;
    store v1143, v1140;
    v1144 = cast v1124 : u32;
    v1145 = inttoptr v1144 : *mut i32;
    store v1145, v1138;
    v1146 = const.i32 256 : i32;
    v1147 = cast v1138 : u32;
    v1148 = cast v1146 : u32;
    v1149 = lt v1147, v1148 : i1;
    v1150 = cast v1149 : i32;
    v1151 = neq v1150, 0 : i1;
    condbr v1151, block124, block125;

block124:
    v1153 = const.i32 -8 : i32;
    v1154 = band v1138, v1153 : i32;
    v1155 = add.wrapping v1152, v1154 : i32;
    v1156 = const.i32 144 : i32;
    v1157 = add.wrapping v1155, v1156 : i32;
    v1158 = cast v1152 : u32;
    v1159 = add.checked v1158, 408 : u32;
    v1160 = inttoptr v1159 : *mut i32;
    v1161 = load v1160 : i32;
    v1162 = const.i32 1 : i32;
    v1163 = const.i32 3 : i32;
    v1164 = cast v1138 : u32;
    v1165 = cast v1163 : u32;
    v1166 = shr.wrapping v1164, v1165 : u32;
    v1167 = cast v1166 : i32;
    v1168 = shl.wrapping v1162, v1167 : i32;
    v1169 = band v1161, v1168 : i32;
    v1170 = neq v1169, 0 : i1;
    condbr v1170, block127, block128;

block125:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(v1038, v1125, v1138);
    br block75(v1152, v1529, v1568);

block126(v1184: i32):
    v1181 = cast v1157 : u32;
    v1182 = add.checked v1181, 8 : u32;
    v1183 = inttoptr v1182 : *mut i32;
    store v1183, v1125;
    v1185 = cast v1184 : u32;
    v1186 = add.checked v1185, 12 : u32;
    v1187 = inttoptr v1186 : *mut i32;
    store v1187, v1180;
    v1188 = cast v1180 : u32;
    v1189 = add.checked v1188, 12 : u32;
    v1190 = inttoptr v1189 : *mut i32;
    store v1190, v1179;
    v1191 = cast v1180 : u32;
    v1192 = add.checked v1191, 8 : u32;
    v1193 = inttoptr v1192 : *mut i32;
    store v1193, v1184;
    br block75(v1152, v1529, v1568);

block127:
    v1175 = cast v1157 : u32;
    v1176 = add.checked v1175, 8 : u32;
    v1177 = inttoptr v1176 : *mut i32;
    v1178 = load v1177 : i32;
    br block126(v1178);

block128:
    v1171 = bor v1161, v1168 : i32;
    v1172 = cast v1152 : u32;
    v1173 = add.checked v1172, 408 : u32;
    v1174 = inttoptr v1173 : *mut i32;
    store v1174, v1171;
    br block126(v1157);

block129:
    v1221 = cast v1040 : u32;
    v1222 = add.checked v1221, 424 : u32;
    v1223 = inttoptr v1222 : *mut i32;
    v1224 = load v1223 : i32;
    v1225 = eq v976, v1224 : i1;
    v1226 = cast v1225 : i32;
    v1227 = neq v1226, 0 : i1;
    condbr v1227, block79, block130;

block130:
    v1228 = cast v976 : u32;
    v1229 = add.checked v1228, 4 : u32;
    v1230 = inttoptr v1229 : *mut i32;
    v1231 = load v1230 : i32;
    v1232 = const.i32 3 : i32;
    v1233 = band v1231, v1232 : i32;
    v1234 = const.i32 1 : i32;
    v1235 = neq v1233, v1234 : i1;
    v1236 = cast v1235 : i32;
    v1237 = neq v1236, 0 : i1;
    condbr v1237, block131(v976, v1231, v1213), block132;

block131(v1287: i32, v1288: i32, v1296: i32):
    v1289 = const.i32 -2 : i32;
    v1290 = band v1288, v1289 : i32;
    v1291 = cast v1287 : u32;
    v1292 = add.checked v1291, 4 : u32;
    v1293 = inttoptr v1292 : *mut i32;
    store v1293, v1290;
    v1297 = const.i32 1 : i32;
    v1298 = bor v1296, v1297 : i32;
    v1299 = cast v1212 : u32;
    v1300 = add.checked v1299, 4 : u32;
    v1301 = inttoptr v1300 : *mut i32;
    store v1301, v1298;
    v1302 = add.wrapping v1294, v1296 : i32;
    v1303 = cast v1302 : u32;
    v1304 = inttoptr v1303 : *mut i32;
    store v1304, v1296;
    v1305 = const.i32 256 : i32;
    v1306 = cast v1296 : u32;
    v1307 = cast v1305 : u32;
    v1308 = lt v1306, v1307 : i1;
    v1309 = cast v1308 : i32;
    v1310 = neq v1309, 0 : i1;
    condbr v1310, block138, block139;

block132:
    v1238 = const.i32 -8 : i32;
    v1239 = band v1231, v1238 : i32;
    v1240 = const.i32 256 : i32;
    v1241 = cast v1239 : u32;
    v1242 = cast v1240 : u32;
    v1243 = lt v1241, v1242 : i1;
    v1244 = cast v1243 : i32;
    v1245 = neq v1244, 0 : i1;
    condbr v1245, block134, block135;

block133:
    v1280 = add.wrapping v1239, v1213 : i32;
    v1282 = add.wrapping v976, v1278 : i32;
    v1283 = cast v1282 : u32;
    v1284 = add.checked v1283, 4 : u32;
    v1285 = inttoptr v1284 : *mut i32;
    v1286 = load v1285 : i32;
    br block131(v1282, v1286, v1280);

block134:
    v1246 = cast v976 : u32;
    v1247 = add.checked v1246, 12 : u32;
    v1248 = inttoptr v1247 : *mut i32;
    v1249 = load v1248 : i32;
    v1250 = cast v976 : u32;
    v1251 = add.checked v1250, 8 : u32;
    v1252 = inttoptr v1251 : *mut i32;
    v1253 = load v1252 : i32;
    v1254 = eq v1249, v1253 : i1;
    v1255 = cast v1254 : i32;
    v1256 = neq v1255, 0 : i1;
    condbr v1256, block136, block137;

block135:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v1040, v976);
    br block133;

block136:
    v1263 = cast v1040 : u32;
    v1264 = add.checked v1263, 408 : u32;
    v1265 = inttoptr v1264 : *mut i32;
    v1266 = load v1265 : i32;
    v1267 = const.i32 -2 : i32;
    v1268 = const.i32 3 : i32;
    v1269 = cast v1231 : u32;
    v1270 = cast v1268 : u32;
    v1271 = shr.wrapping v1269, v1270 : u32;
    v1272 = cast v1271 : i32;
    v1273 = rotl v1267, v1272 : i32;
    v1274 = band v1266, v1273 : i32;
    v1275 = cast v1040 : u32;
    v1276 = add.checked v1275, 408 : u32;
    v1277 = inttoptr v1276 : *mut i32;
    store v1277, v1274;
    br block133;

block137:
    v1257 = cast v1253 : u32;
    v1258 = add.checked v1257, 12 : u32;
    v1259 = inttoptr v1258 : *mut i32;
    store v1259, v1249;
    v1260 = cast v1249 : u32;
    v1261 = add.checked v1260, 8 : u32;
    v1262 = inttoptr v1261 : *mut i32;
    store v1262, v1253;
    br block133;

block138:
    v1313 = const.i32 -8 : i32;
    v1314 = band v1296, v1313 : i32;
    v1315 = add.wrapping v1311, v1314 : i32;
    v1316 = const.i32 144 : i32;
    v1317 = add.wrapping v1315, v1316 : i32;
    v1318 = cast v1311 : u32;
    v1319 = add.checked v1318, 408 : u32;
    v1320 = inttoptr v1319 : *mut i32;
    v1321 = load v1320 : i32;
    v1322 = const.i32 1 : i32;
    v1323 = const.i32 3 : i32;
    v1324 = cast v1296 : u32;
    v1325 = cast v1323 : u32;
    v1326 = shr.wrapping v1324, v1325 : u32;
    v1327 = cast v1326 : i32;
    v1328 = shl.wrapping v1322, v1327 : i32;
    v1329 = band v1321, v1328 : i32;
    v1330 = neq v1329, 0 : i1;
    condbr v1330, block141, block142;

block139:
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::insert_large_chunk(v1040, v1294, v1296);
    br block76(v1025);

block140(v1344: i32):
    v1341 = cast v1317 : u32;
    v1342 = add.checked v1341, 8 : u32;
    v1343 = inttoptr v1342 : *mut i32;
    store v1343, v1294;
    v1345 = cast v1344 : u32;
    v1346 = add.checked v1345, 12 : u32;
    v1347 = inttoptr v1346 : *mut i32;
    store v1347, v1340;
    v1348 = cast v1340 : u32;
    v1349 = add.checked v1348, 12 : u32;
    v1350 = inttoptr v1349 : *mut i32;
    store v1350, v1339;
    v1351 = cast v1340 : u32;
    v1352 = add.checked v1351, 8 : u32;
    v1353 = inttoptr v1352 : *mut i32;
    store v1353, v1344;
    br block76(v1514);

block141:
    v1335 = cast v1317 : u32;
    v1336 = add.checked v1335, 8 : u32;
    v1337 = inttoptr v1336 : *mut i32;
    v1338 = load v1337 : i32;
    br block140(v1338);

block142:
    v1331 = bor v1321, v1328 : i32;
    v1332 = cast v1311 : u32;
    v1333 = add.checked v1332, 408 : u32;
    v1334 = inttoptr v1333 : *mut i32;
    store v1334, v1331;
    br block140(v1317);

block143:
    v1389 = cast v738 : u32;
    v1390 = add.checked v1389, 416 : u32;
    v1391 = inttoptr v1390 : *mut i32;
    store v1391, v1382;
    v1392 = add.wrapping v1381, v743 : i32;
    v1393 = cast v738 : u32;
    v1394 = add.checked v1393, 424 : u32;
    v1395 = inttoptr v1394 : *mut i32;
    store v1395, v1392;
    v1396 = const.i32 1 : i32;
    v1397 = bor v1382, v1396 : i32;
    v1398 = cast v1392 : u32;
    v1399 = add.checked v1398, 4 : u32;
    v1400 = inttoptr v1399 : *mut i32;
    store v1400, v1397;
    v1401 = add.wrapping v1381, v742 : i32;
    v1402 = cast v1401 : u32;
    v1403 = inttoptr v1402 : *mut i32;
    store v1403, v1382;
    v1404 = const.i32 3 : i32;
    v1405 = bor v743, v1404 : i32;
    v1406 = cast v1381 : u32;
    v1407 = add.checked v1406, 4 : u32;
    v1408 = inttoptr v1407 : *mut i32;
    store v1408, v1405;
    br block77;

block144:
    v1539 = sub.wrapping v1524, v1525 : i32;
    v1540 = cast v1519 : u32;
    v1541 = add.checked v1540, 420 : u32;
    v1542 = inttoptr v1541 : *mut i32;
    store v1542, v1539;
    v1543 = cast v1519 : u32;
    v1544 = add.checked v1543, 428 : u32;
    v1545 = inttoptr v1544 : *mut i32;
    v1546 = load v1545 : i32;
    v1547 = add.wrapping v1546, v1525 : i32;
    v1548 = cast v1519 : u32;
    v1549 = add.checked v1548, 428 : u32;
    v1550 = inttoptr v1549 : *mut i32;
    store v1550, v1547;
    v1551 = const.i32 1 : i32;
    v1552 = bor v1539, v1551 : i32;
    v1553 = cast v1547 : u32;
    v1554 = add.checked v1553, 4 : u32;
    v1555 = inttoptr v1554 : *mut i32;
    store v1555, v1552;
    v1556 = const.i32 3 : i32;
    v1557 = bor v1525, v1556 : i32;
    v1558 = cast v1546 : u32;
    v1559 = add.checked v1558, 4 : u32;
    v1560 = inttoptr v1559 : *mut i32;
    store v1560, v1557;
    v1561 = const.i32 8 : i32;
    v1562 = add.wrapping v1546, v1561 : i32;
    ret v1562;
}

pub fn dlmalloc::dlmalloc::Dlmalloc<A>::memalign(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v4 = const.i32 0 : i32;
    v5 = const.i32 0 : i32;
    v6 = const.i32 -65587 : i32;
    v7 = const.i32 16 : i32;
    v8 = const.i32 16 : i32;
    v9 = cast v1 : u32;
    v10 = cast v8 : u32;
    v11 = gt v9, v10 : i1;
    v12 = cast v11 : i32;
    v13 = neq v12, 0 : i1;
    v14 = select v13, v1, v7 : i32;
    v15 = sub.wrapping v6, v14 : i32;
    v16 = cast v15 : u32;
    v17 = cast v2 : u32;
    v18 = lte v16, v17 : i1;
    v19 = cast v18 : i32;
    v20 = neq v19, 0 : i1;
    condbr v20, block2(v5), block3;

block1(v3: i32):
    ret v3;

block2(v176: i32):
    br block1(v176);

block3:
    v21 = const.i32 16 : i32;
    v22 = const.i32 11 : i32;
    v23 = add.wrapping v2, v22 : i32;
    v24 = const.i32 -8 : i32;
    v25 = band v23, v24 : i32;
    v26 = const.i32 11 : i32;
    v27 = cast v2 : u32;
    v28 = cast v26 : u32;
    v29 = lt v27, v28 : i1;
    v30 = cast v29 : i32;
    v31 = neq v30, 0 : i1;
    v32 = select v31, v21, v25 : i32;
    v33 = add.wrapping v14, v32 : i32;
    v34 = const.i32 12 : i32;
    v35 = add.wrapping v33, v34 : i32;
    v36 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::malloc(v0, v35) : i32;
    v37 = eq v36, 0 : i1;
    v38 = cast v37 : i32;
    v39 = neq v38, 0 : i1;
    condbr v39, block2(v5), block4;

block4:
    v40 = const.i32 -8 : i32;
    v41 = add.wrapping v36, v40 : i32;
    v42 = const.i32 -1 : i32;
    v43 = add.wrapping v14, v42 : i32;
    v44 = band v43, v36 : i32;
    v45 = neq v44, 0 : i1;
    condbr v45, block6, block7;

block5(v127: i32):
    v128 = cast v127 : u32;
    v129 = add.checked v128, 4 : u32;
    v130 = inttoptr v129 : *mut i32;
    v131 = load v130 : i32;
    v132 = const.i32 3 : i32;
    v133 = band v131, v132 : i32;
    v134 = eq v133, 0 : i1;
    v135 = cast v134 : i32;
    v136 = neq v135, 0 : i1;
    condbr v136, block10, block11;

block6:
    v46 = const.i32 -4 : i32;
    v47 = add.wrapping v36, v46 : i32;
    v48 = cast v47 : u32;
    v49 = inttoptr v48 : *mut i32;
    v50 = load v49 : i32;
    v51 = const.i32 -8 : i32;
    v52 = band v50, v51 : i32;
    v53 = add.wrapping v43, v36 : i32;
    v54 = const.i32 0 : i32;
    v55 = sub.wrapping v54, v14 : i32;
    v56 = band v53, v55 : i32;
    v57 = const.i32 -8 : i32;
    v58 = add.wrapping v56, v57 : i32;
    v59 = const.i32 0 : i32;
    v60 = sub.wrapping v58, v41 : i32;
    v61 = const.i32 16 : i32;
    v62 = cast v60 : u32;
    v63 = cast v61 : u32;
    v64 = gt v62, v63 : i1;
    v65 = cast v64 : i32;
    v66 = neq v65, 0 : i1;
    v67 = select v66, v59, v14 : i32;
    v68 = add.wrapping v58, v67 : i32;
    v69 = sub.wrapping v68, v41 : i32;
    v70 = sub.wrapping v52, v69 : i32;
    v71 = const.i32 3 : i32;
    v72 = band v50, v71 : i32;
    v73 = eq v72, 0 : i1;
    v74 = cast v73 : i32;
    v75 = neq v74, 0 : i1;
    condbr v75, block8, block9;

block7:
    br block5(v41);

block8:
    v118 = cast v41 : u32;
    v119 = inttoptr v118 : *mut i32;
    v120 = load v119 : i32;
    v121 = cast v68 : u32;
    v122 = add.checked v121, 4 : u32;
    v123 = inttoptr v122 : *mut i32;
    store v123, v70;
    v124 = add.wrapping v120, v69 : i32;
    v125 = cast v68 : u32;
    v126 = inttoptr v125 : *mut i32;
    store v126, v124;
    br block5(v68);

block9:
    v76 = cast v68 : u32;
    v77 = add.checked v76, 4 : u32;
    v78 = inttoptr v77 : *mut i32;
    v79 = load v78 : i32;
    v80 = const.i32 1 : i32;
    v81 = band v79, v80 : i32;
    v82 = bor v70, v81 : i32;
    v83 = const.i32 2 : i32;
    v84 = bor v82, v83 : i32;
    v85 = cast v68 : u32;
    v86 = add.checked v85, 4 : u32;
    v87 = inttoptr v86 : *mut i32;
    store v87, v84;
    v88 = add.wrapping v68, v70 : i32;
    v89 = cast v88 : u32;
    v90 = add.checked v89, 4 : u32;
    v91 = inttoptr v90 : *mut i32;
    v92 = load v91 : i32;
    v93 = const.i32 1 : i32;
    v94 = bor v92, v93 : i32;
    v95 = cast v88 : u32;
    v96 = add.checked v95, 4 : u32;
    v97 = inttoptr v96 : *mut i32;
    store v97, v94;
    v98 = cast v47 : u32;
    v99 = inttoptr v98 : *mut i32;
    v100 = load v99 : i32;
    v101 = const.i32 1 : i32;
    v102 = band v100, v101 : i32;
    v103 = bor v69, v102 : i32;
    v104 = const.i32 2 : i32;
    v105 = bor v103, v104 : i32;
    v106 = cast v47 : u32;
    v107 = inttoptr v106 : *mut i32;
    store v107, v105;
    v108 = add.wrapping v41, v69 : i32;
    v109 = cast v108 : u32;
    v110 = add.checked v109, 4 : u32;
    v111 = inttoptr v110 : *mut i32;
    v112 = load v111 : i32;
    v113 = const.i32 1 : i32;
    v114 = bor v112, v113 : i32;
    v115 = cast v108 : u32;
    v116 = add.checked v115, 4 : u32;
    v117 = inttoptr v116 : *mut i32;
    store v117, v114;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::dispose_chunk(v0, v41, v69);
    br block5(v68);

block10:
    v174 = const.i32 8 : i32;
    v175 = add.wrapping v127, v174 : i32;
    br block2(v175);

block11:
    v137 = const.i32 -8 : i32;
    v138 = band v131, v137 : i32;
    v140 = const.i32 16 : i32;
    v141 = add.wrapping v32, v140 : i32;
    v142 = cast v138 : u32;
    v143 = cast v141 : u32;
    v144 = lte v142, v143 : i1;
    v145 = cast v144 : i32;
    v146 = neq v145, 0 : i1;
    condbr v146, block10, block12;

block12:
    v147 = const.i32 1 : i32;
    v148 = band v131, v147 : i32;
    v149 = bor v139, v148 : i32;
    v150 = const.i32 2 : i32;
    v151 = bor v149, v150 : i32;
    v152 = cast v127 : u32;
    v153 = add.checked v152, 4 : u32;
    v154 = inttoptr v153 : *mut i32;
    store v154, v151;
    v155 = add.wrapping v127, v139 : i32;
    v156 = sub.wrapping v138, v139 : i32;
    v157 = const.i32 3 : i32;
    v158 = bor v156, v157 : i32;
    v159 = cast v155 : u32;
    v160 = add.checked v159, 4 : u32;
    v161 = inttoptr v160 : *mut i32;
    store v161, v158;
    v162 = add.wrapping v127, v138 : i32;
    v163 = cast v162 : u32;
    v164 = add.checked v163, 4 : u32;
    v165 = inttoptr v164 : *mut i32;
    v166 = load v165 : i32;
    v167 = const.i32 1 : i32;
    v168 = bor v166, v167 : i32;
    v169 = cast v162 : u32;
    v170 = add.checked v169, 4 : u32;
    v171 = inttoptr v170 : *mut i32;
    store v171, v168;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::dispose_chunk(v0, v155, v156);
    br block10;
}

pub fn __main() -> i32 {
block0:
    v1 = const.i32 0 : i32;
    v2 = global.load (@__stack_pointer) as *mut i8 : i32;
    v3 = const.i32 16 : i32;
    v4 = sub.wrapping v2, v3 : i32;
    v5 = global.symbol @__stack_pointer : *mut i32;
    store v5, v4;
    v6 = const.i32 0 : i32;
    v7 = cast v4 : u32;
    v8 = add.checked v7, 12 : u32;
    v9 = inttoptr v8 : *mut i32;
    store v9, v6;
    v10 = const.i64 4 : i64;
    v11 = cast v4 : u32;
    v12 = add.checked v11, 4 : u32;
    v13 = inttoptr v12 : *mut i64;
    store v13, v10;
    v14 = const.i32 4 : i32;
    v15 = add.wrapping v4, v14 : i32;
    v16 = const.i32 0 : i32;
    call noname::alloc::raw_vec::RawVec<T,A>::reserve_for_push(v15, v16);
    v17 = cast v4 : u32;
    v18 = add.checked v17, 4 : u32;
    v19 = inttoptr v18 : *mut i32;
    v20 = load v19 : i32;
    v21 = cast v4 : u32;
    v22 = add.checked v21, 12 : u32;
    v23 = inttoptr v22 : *mut i32;
    v24 = load v23 : i32;
    v25 = const.i32 2 : i32;
    v26 = shl.wrapping v24, v25 : i32;
    v27 = add.wrapping v20, v26 : i32;
    v28 = const.i32 1 : i32;
    v29 = cast v27 : u32;
    v30 = inttoptr v29 : *mut i32;
    store v30, v28;
    v31 = const.i32 -1 : i32;
    v32 = eq v24, v31 : i1;
    v33 = cast v32 : i32;
    v34 = neq v33, 0 : i1;
    condbr v34, block2, block3;

block1(v0: i32):

block2:
    unreachable ;

block3:
    v35 = cast v4 : u32;
    v36 = add.checked v35, 8 : u32;
    v37 = inttoptr v36 : *mut i32;
    v38 = load v37 : i32;
    v39 = eq v38, 0 : i1;
    v40 = cast v39 : i32;
    v41 = neq v40, 0 : i1;
    condbr v41, block4, block5;

block4:
    v44 = const.i32 16 : i32;
    v45 = add.wrapping v4, v44 : i32;
    v46 = global.symbol @__stack_pointer : *mut i32;
    store v46, v45;
    v47 = const.i32 1 : i32;
    ret v47;

block5:
    v42 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::free(v42, v20);
    br block4;
}

pub fn __rust_realloc(i32, i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32, v3: i32):
    v5 = const.i32 0 : i32;
    v6 = const.i32 9 : i32;
    v7 = cast v2 : u32;
    v8 = cast v6 : u32;
    v9 = lt v7, v8 : i1;
    v10 = cast v9 : i32;
    v11 = neq v10, 0 : i1;
    condbr v11, block5, block6;

block1(v4: i32):
    ret v4;

block2:
    v359 = const.i32 1 : i32;
    v360 = band v39, v359 : i32;
    v361 = bor v34, v360 : i32;
    v362 = const.i32 2 : i32;
    v363 = bor v361, v362 : i32;
    v364 = cast v36 : u32;
    v365 = inttoptr v364 : *mut i32;
    store v365, v363;
    v366 = const.i32 0 : i32;
    v367 = add.wrapping v48, v34 : i32;
    v368 = cast v366 : u32;
    v369 = add.checked v368, 1049008 : u32;
    v370 = inttoptr v369 : *mut i32;
    store v370, v367;
    v371 = const.i32 0 : i32;
    v372 = sub.wrapping v315, v34 : i32;
    v373 = cast v371 : u32;
    v374 = add.checked v373, 1049000 : u32;
    v375 = inttoptr v374 : *mut i32;
    store v375, v372;
    v376 = const.i32 1 : i32;
    v377 = bor v372, v376 : i32;
    v378 = cast v367 : u32;
    v379 = add.checked v378, 4 : u32;
    v380 = inttoptr v379 : *mut i32;
    store v380, v377;
    br block1(v0);

block3(v357: i32):
    ret v357;

block4:
    v349 = cast v1 : u32;
    v350 = cast v3 : u32;
    v351 = lt v349, v350 : i1;
    v352 = cast v351 : i32;
    v353 = neq v352, 0 : i1;
    v354 = select v353, v1, v3 : i32;
    v355 = call noname::memcpy(v13, v0, v354) : i32;
    v356 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::free(v356, v0);
    br block3(v13);

block5:
    v16 = const.i32 0 : i32;
    v17 = const.i32 -65588 : i32;
    v18 = cast v3 : u32;
    v19 = cast v17 : u32;
    v20 = gt v18, v19 : i1;
    v21 = cast v20 : i32;
    v22 = neq v21, 0 : i1;
    condbr v22, block3(v16), block8;

block6:
    v12 = const.i32 1048580 : i32;
    v13 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::memalign(v12, v2, v3) : i32;
    v14 = neq v13, 0 : i1;
    condbr v14, block4, block7;

block7:
    v15 = const.i32 0 : i32;
    ret v15;

block8:
    v23 = const.i32 16 : i32;
    v24 = const.i32 11 : i32;
    v25 = add.wrapping v3, v24 : i32;
    v26 = const.i32 -8 : i32;
    v27 = band v25, v26 : i32;
    v28 = const.i32 11 : i32;
    v29 = cast v3 : u32;
    v30 = cast v28 : u32;
    v31 = lt v29, v30 : i1;
    v32 = cast v31 : i32;
    v33 = neq v32, 0 : i1;
    v34 = select v33, v23, v27 : i32;
    v35 = const.i32 -4 : i32;
    v36 = add.wrapping v0, v35 : i32;
    v37 = cast v36 : u32;
    v38 = inttoptr v37 : *mut i32;
    v39 = load v38 : i32;
    v40 = const.i32 -8 : i32;
    v41 = band v39, v40 : i32;
    v42 = const.i32 3 : i32;
    v43 = band v39, v42 : i32;
    v44 = eq v43, 0 : i1;
    v45 = cast v44 : i32;
    v46 = neq v45, 0 : i1;
    condbr v46, block16, block17;

block9:
    v321 = const.i32 1048580 : i32;
    v323 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::malloc(v321, v3) : i32;
    v324 = eq v323, 0 : i1;
    v325 = cast v324 : i32;
    v326 = neq v325, 0 : i1;
    condbr v326, block3(v16), block37;

block10:
    v310 = const.i32 0 : i32;
    v311 = cast v310 : u32;
    v312 = add.checked v311, 1049000 : u32;
    v313 = inttoptr v312 : *mut i32;
    v314 = load v313 : i32;
    v315 = add.wrapping v314, v41 : i32;
    v316 = cast v315 : u32;
    v317 = cast v34 : u32;
    v318 = gt v316, v317 : i1;
    v319 = cast v318 : i32;
    v320 = neq v319, 0 : i1;
    condbr v320, block2, block36;

block11:
    v287 = const.i32 1 : i32;
    v288 = band v39, v287 : i32;
    v289 = bor v34, v288 : i32;
    v290 = const.i32 2 : i32;
    v291 = bor v289, v290 : i32;
    v292 = cast v36 : u32;
    v293 = inttoptr v292 : *mut i32;
    store v293, v291;
    v294 = add.wrapping v48, v34 : i32;
    v295 = const.i32 3 : i32;
    v296 = bor v114, v295 : i32;
    v297 = cast v294 : u32;
    v298 = add.checked v297, 4 : u32;
    v299 = inttoptr v298 : *mut i32;
    store v299, v296;
    v300 = cast v49 : u32;
    v301 = add.checked v300, 4 : u32;
    v302 = inttoptr v301 : *mut i32;
    v303 = load v302 : i32;
    v304 = const.i32 1 : i32;
    v305 = bor v303, v304 : i32;
    v306 = cast v49 : u32;
    v307 = add.checked v306, 4 : u32;
    v308 = inttoptr v307 : *mut i32;
    store v308, v305;
    v309 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::dispose_chunk(v309, v294, v114);
    ret v0;

block12:
    v214 = const.i32 0 : i32;
    v215 = cast v214 : u32;
    v216 = add.checked v215, 1048996 : u32;
    v217 = inttoptr v216 : *mut i32;
    v218 = load v217 : i32;
    v219 = add.wrapping v218, v41 : i32;
    v220 = cast v219 : u32;
    v221 = cast v34 : u32;
    v222 = lt v220, v221 : i1;
    v223 = cast v222 : i32;
    v224 = neq v223, 0 : i1;
    condbr v224, block9, block32;

block13:
    v156 = const.i32 16 : i32;
    v157 = cast v86 : u32;
    v158 = cast v156 : u32;
    v159 = lt v157, v158 : i1;
    v160 = cast v159 : i32;
    v161 = neq v160, 0 : i1;
    condbr v161, block30, block31;

block14:
    v121 = cast v49 : u32;
    v122 = add.checked v121, 12 : u32;
    v123 = inttoptr v122 : *mut i32;
    v124 = load v123 : i32;
    v125 = cast v49 : u32;
    v126 = add.checked v125, 8 : u32;
    v127 = inttoptr v126 : *mut i32;
    v128 = load v127 : i32;
    v129 = eq v124, v128 : i1;
    v130 = cast v129 : i32;
    v131 = neq v130, 0 : i1;
    condbr v131, block28, block29;

block15:
    v114 = sub.wrapping v41, v34 : i32;
    v115 = const.i32 16 : i32;
    v116 = cast v114 : u32;
    v117 = cast v115 : u32;
    v118 = gte v116, v117 : i1;
    v119 = cast v118 : i32;
    v120 = neq v119, 0 : i1;
    condbr v120, block11, block27;

block16:
    v94 = const.i32 256 : i32;
    v95 = cast v34 : u32;
    v96 = cast v94 : u32;
    v97 = lt v95, v96 : i1;
    v98 = cast v97 : i32;
    v99 = neq v98, 0 : i1;
    condbr v99, block9, block24;

block17:
    v47 = const.i32 -8 : i32;
    v48 = add.wrapping v0, v47 : i32;
    v49 = add.wrapping v48, v41 : i32;
    v50 = cast v41 : u32;
    v51 = cast v34 : u32;
    v52 = gte v50, v51 : i1;
    v53 = cast v52 : i32;
    v54 = neq v53, 0 : i1;
    condbr v54, block15, block18;

block18:
    v55 = const.i32 0 : i32;
    v56 = cast v55 : u32;
    v57 = add.checked v56, 1049008 : u32;
    v58 = inttoptr v57 : *mut i32;
    v59 = load v58 : i32;
    v60 = eq v49, v59 : i1;
    v61 = cast v60 : i32;
    v62 = neq v61, 0 : i1;
    condbr v62, block10, block19;

block19:
    v63 = const.i32 0 : i32;
    v64 = cast v63 : u32;
    v65 = add.checked v64, 1049004 : u32;
    v66 = inttoptr v65 : *mut i32;
    v67 = load v66 : i32;
    v68 = eq v49, v67 : i1;
    v69 = cast v68 : i32;
    v70 = neq v69, 0 : i1;
    condbr v70, block12, block20;

block20:
    v71 = cast v49 : u32;
    v72 = add.checked v71, 4 : u32;
    v73 = inttoptr v72 : *mut i32;
    v74 = load v73 : i32;
    v75 = const.i32 2 : i32;
    v76 = band v74, v75 : i32;
    v77 = neq v76, 0 : i1;
    condbr v77, block9, block21;

block21:
    v78 = const.i32 -8 : i32;
    v79 = band v74, v78 : i32;
    v80 = add.wrapping v79, v41 : i32;
    v81 = cast v80 : u32;
    v82 = cast v34 : u32;
    v83 = lt v81, v82 : i1;
    v84 = cast v83 : i32;
    v85 = neq v84, 0 : i1;
    condbr v85, block9, block22;

block22:
    v86 = sub.wrapping v80, v34 : i32;
    v87 = const.i32 256 : i32;
    v88 = cast v79 : u32;
    v89 = cast v87 : u32;
    v90 = lt v88, v89 : i1;
    v91 = cast v90 : i32;
    v92 = neq v91, 0 : i1;
    condbr v92, block14, block23;

block23:
    v93 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::unlink_large_chunk(v93, v49);
    br block13;

block24:
    v100 = const.i32 4 : i32;
    v101 = bor v34, v100 : i32;
    v102 = cast v41 : u32;
    v103 = cast v101 : u32;
    v104 = lt v102, v103 : i1;
    v105 = cast v104 : i32;
    v106 = neq v105, 0 : i1;
    condbr v106, block9, block25;

block25:
    v107 = sub.wrapping v41, v34 : i32;
    v108 = const.i32 131073 : i32;
    v109 = cast v107 : u32;
    v110 = cast v108 : u32;
    v111 = gte v109, v110 : i1;
    v112 = cast v111 : i32;
    v113 = neq v112, 0 : i1;
    condbr v113, block9, block26;

block26:
    ret v0;

block27:
    ret v0;

block28:
    v138 = const.i32 0 : i32;
    v139 = const.i32 0 : i32;
    v140 = cast v139 : u32;
    v141 = add.checked v140, 1048988 : u32;
    v142 = inttoptr v141 : *mut i32;
    v143 = load v142 : i32;
    v144 = const.i32 -2 : i32;
    v145 = const.i32 3 : i32;
    v146 = cast v74 : u32;
    v147 = cast v145 : u32;
    v148 = shr.wrapping v146, v147 : u32;
    v149 = cast v148 : i32;
    v150 = rotl v144, v149 : i32;
    v151 = band v143, v150 : i32;
    v152 = cast v138 : u32;
    v153 = add.checked v152, 1048988 : u32;
    v154 = inttoptr v153 : *mut i32;
    store v154, v151;
    br block13;

block29:
    v132 = cast v128 : u32;
    v133 = add.checked v132, 12 : u32;
    v134 = inttoptr v133 : *mut i32;
    store v134, v124;
    v135 = cast v124 : u32;
    v136 = add.checked v135, 8 : u32;
    v137 = inttoptr v136 : *mut i32;
    store v137, v128;
    br block13;

block30:
    v194 = cast v162 : u32;
    v195 = inttoptr v194 : *mut i32;
    v196 = load v195 : i32;
    v197 = const.i32 1 : i32;
    v198 = band v196, v197 : i32;
    v199 = bor v181, v198 : i32;
    v200 = const.i32 2 : i32;
    v201 = bor v199, v200 : i32;
    v202 = cast v162 : u32;
    v203 = inttoptr v202 : *mut i32;
    store v203, v201;
    v204 = add.wrapping v174, v181 : i32;
    v205 = cast v204 : u32;
    v206 = add.checked v205, 4 : u32;
    v207 = inttoptr v206 : *mut i32;
    v208 = load v207 : i32;
    v209 = const.i32 1 : i32;
    v210 = bor v208, v209 : i32;
    v211 = cast v204 : u32;
    v212 = add.checked v211, 4 : u32;
    v213 = inttoptr v212 : *mut i32;
    store v213, v210;
    ret v193;

block31:
    v164 = cast v162 : u32;
    v165 = inttoptr v164 : *mut i32;
    v166 = load v165 : i32;
    v167 = const.i32 1 : i32;
    v168 = band v166, v167 : i32;
    v169 = bor v34, v168 : i32;
    v170 = const.i32 2 : i32;
    v171 = bor v169, v170 : i32;
    v172 = cast v36 : u32;
    v173 = inttoptr v172 : *mut i32;
    store v173, v171;
    v175 = add.wrapping v48, v163 : i32;
    v176 = const.i32 3 : i32;
    v177 = bor v155, v176 : i32;
    v178 = cast v175 : u32;
    v179 = add.checked v178, 4 : u32;
    v180 = inttoptr v179 : *mut i32;
    store v180, v177;
    v182 = add.wrapping v174, v80 : i32;
    v183 = cast v182 : u32;
    v184 = add.checked v183, 4 : u32;
    v185 = inttoptr v184 : *mut i32;
    v186 = load v185 : i32;
    v187 = const.i32 1 : i32;
    v188 = bor v186, v187 : i32;
    v189 = cast v182 : u32;
    v190 = add.checked v189, 4 : u32;
    v191 = inttoptr v190 : *mut i32;
    store v191, v188;
    v192 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::dispose_chunk(v192, v175, v155);
    ret v0;

block32:
    v225 = sub.wrapping v219, v34 : i32;
    v226 = const.i32 15 : i32;
    v227 = cast v225 : u32;
    v228 = cast v226 : u32;
    v229 = gt v227, v228 : i1;
    v230 = cast v229 : i32;
    v231 = neq v230, 0 : i1;
    condbr v231, block34, block35;

block33(v277: i32, v282: i32):
    v276 = const.i32 0 : i32;
    v278 = cast v276 : u32;
    v279 = add.checked v278, 1049004 : u32;
    v280 = inttoptr v279 : *mut i32;
    store v280, v277;
    v281 = const.i32 0 : i32;
    v283 = cast v281 : u32;
    v284 = add.checked v283, 1048996 : u32;
    v285 = inttoptr v284 : *mut i32;
    store v285, v282;
    ret v0;

block34:
    v251 = const.i32 1 : i32;
    v252 = band v39, v251 : i32;
    v253 = bor v34, v252 : i32;
    v254 = const.i32 2 : i32;
    v255 = bor v253, v254 : i32;
    v256 = cast v36 : u32;
    v257 = inttoptr v256 : *mut i32;
    store v257, v255;
    v258 = add.wrapping v48, v34 : i32;
    v259 = const.i32 1 : i32;
    v260 = bor v225, v259 : i32;
    v261 = cast v258 : u32;
    v262 = add.checked v261, 4 : u32;
    v263 = inttoptr v262 : *mut i32;
    store v263, v260;
    v264 = add.wrapping v48, v219 : i32;
    v265 = cast v264 : u32;
    v266 = inttoptr v265 : *mut i32;
    store v266, v225;
    v267 = cast v264 : u32;
    v268 = add.checked v267, 4 : u32;
    v269 = inttoptr v268 : *mut i32;
    v270 = load v269 : i32;
    v271 = const.i32 -2 : i32;
    v272 = band v270, v271 : i32;
    v273 = cast v264 : u32;
    v274 = add.checked v273, 4 : u32;
    v275 = inttoptr v274 : *mut i32;
    store v275, v272;
    br block33(v258, v225);

block35:
    v232 = const.i32 1 : i32;
    v233 = band v39, v232 : i32;
    v234 = bor v233, v219 : i32;
    v235 = const.i32 2 : i32;
    v236 = bor v234, v235 : i32;
    v237 = cast v36 : u32;
    v238 = inttoptr v237 : *mut i32;
    store v238, v236;
    v239 = add.wrapping v48, v219 : i32;
    v240 = cast v239 : u32;
    v241 = add.checked v240, 4 : u32;
    v242 = inttoptr v241 : *mut i32;
    v243 = load v242 : i32;
    v244 = const.i32 1 : i32;
    v245 = bor v243, v244 : i32;
    v246 = cast v239 : u32;
    v247 = add.checked v246, 4 : u32;
    v248 = inttoptr v247 : *mut i32;
    store v248, v245;
    v249 = const.i32 0 : i32;
    v250 = const.i32 0 : i32;
    br block33(v250, v249);

block36:
    br block9;

block37:
    v328 = const.i32 -4 : i32;
    v329 = const.i32 -8 : i32;
    v331 = cast v36 : u32;
    v332 = inttoptr v331 : *mut i32;
    v333 = load v332 : i32;
    v334 = const.i32 3 : i32;
    v335 = band v333, v334 : i32;
    v336 = neq v335, 0 : i1;
    v337 = select v336, v328, v329 : i32;
    v338 = const.i32 -8 : i32;
    v339 = band v333, v338 : i32;
    v340 = add.wrapping v337, v339 : i32;
    v341 = cast v340 : u32;
    v342 = cast v322 : u32;
    v343 = lt v341, v342 : i1;
    v344 = cast v343 : i32;
    v345 = neq v344, 0 : i1;
    v346 = select v345, v340, v322 : i32;
    v347 = call noname::memcpy(v323, v0, v346) : i32;
    v348 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::free(v348, v327);
    ret v347;
}

pub fn alloc::raw_vec::finish_grow(i32, i32, i32, i32) {
block0(v0: i32, v1: i32, v2: i32, v3: i32):
    v4 = const.i32 0 : i32;
    v5 = eq v1, 0 : i1;
    v6 = cast v5 : i32;
    v7 = neq v6, 0 : i1;
    condbr v7, block4, block5;

block1:
    ret;

block2(v99: i32):
    v100 = const.i32 1 : i32;
    v101 = cast v99 : u32;
    v102 = inttoptr v101 : *mut i32;
    store v102, v100;
    br block1;

block3:
    v95 = const.i32 0 : i32;
    v96 = cast v0 : u32;
    v97 = add.checked v96, 4 : u32;
    v98 = inttoptr v97 : *mut i32;
    store v98, v95;
    br block2(v0);

block4:
    v87 = const.i32 0 : i32;
    v88 = cast v0 : u32;
    v89 = add.checked v88, 4 : u32;
    v90 = inttoptr v89 : *mut i32;
    store v90, v87;
    v91 = const.i32 8 : i32;
    v92 = add.wrapping v0, v91 : i32;
    v93 = cast v92 : u32;
    v94 = inttoptr v93 : *mut i32;
    store v94, v2;
    br block2(v0);

block5:
    v8 = const.i32 -1 : i32;
    v9 = lte v2, v8 : i1;
    v10 = cast v9 : i32;
    v11 = neq v10, 0 : i1;
    condbr v11, block3, block6;

block6:
    v12 = cast v3 : u32;
    v13 = add.checked v12, 4 : u32;
    v14 = inttoptr v13 : *mut i32;
    v15 = load v14 : i32;
    v16 = eq v15, 0 : i1;
    v17 = cast v16 : i32;
    v18 = neq v17, 0 : i1;
    condbr v18, block8, block9;

block7(v63: i32):
    v64 = eq v63, 0 : i1;
    v65 = cast v64 : i32;
    v66 = neq v65, 0 : i1;
    condbr v66, block20, block21;

block8:
    v46 = neq v2, 0 : i1;
    condbr v46, block16, block17;

block9:
    v19 = const.i32 8 : i32;
    v20 = add.wrapping v3, v19 : i32;
    v21 = cast v20 : u32;
    v22 = inttoptr v21 : *mut i32;
    v23 = load v22 : i32;
    v24 = neq v23, 0 : i1;
    condbr v24, block10, block11;

block10:
    v42 = cast v3 : u32;
    v43 = inttoptr v42 : *mut i32;
    v44 = load v43 : i32;
    v45 = call noname::__rust_realloc(v44, v23, v1, v2) : i32;
    br block7(v45);

block11:
    v25 = neq v2, 0 : i1;
    condbr v25, block12, block13;

block12:
    v26 = const.i32 0 : i32;
    v27 = cast v26 : u32;
    v28 = add.checked v27, 1048576 : u32;
    v29 = inttoptr v28 : *mut u8;
    v30 = load v29 : u8;
    v31 = zext v30 : i32;
    v32 = const.i32 9 : i32;
    v33 = cast v1 : u32;
    v34 = cast v32 : u32;
    v35 = lt v33, v34 : i1;
    v36 = cast v35 : i32;
    v37 = neq v36, 0 : i1;
    condbr v37, block14, block15;

block13:
    br block7(v1);

block14:
    v40 = const.i32 1048580 : i32;
    v41 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::malloc(v40, v2) : i32;
    br block7(v41);

block15:
    v38 = const.i32 1048580 : i32;
    v39 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::memalign(v38, v1, v2) : i32;
    br block7(v39);

block16:
    v47 = const.i32 0 : i32;
    v48 = cast v47 : u32;
    v49 = add.checked v48, 1048576 : u32;
    v50 = inttoptr v49 : *mut u8;
    v51 = load v50 : u8;
    v52 = zext v51 : i32;
    v53 = const.i32 9 : i32;
    v54 = cast v1 : u32;
    v55 = cast v53 : u32;
    v56 = lt v54, v55 : i1;
    v57 = cast v56 : i32;
    v58 = neq v57, 0 : i1;
    condbr v58, block18, block19;

block17:
    br block7(v1);

block18:
    v61 = const.i32 1048580 : i32;
    v62 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::malloc(v61, v2) : i32;
    br block7(v62);

block19:
    v59 = const.i32 1048580 : i32;
    v60 = call noname::dlmalloc::dlmalloc::Dlmalloc<A>::memalign(v59, v1, v2) : i32;
    br block7(v60);

block20:
    v80 = cast v67 : u32;
    v81 = add.checked v80, 4 : u32;
    v82 = inttoptr v81 : *mut i32;
    store v82, v1;
    v83 = const.i32 8 : i32;
    v84 = add.wrapping v67, v83 : i32;
    v85 = cast v84 : u32;
    v86 = inttoptr v85 : *mut i32;
    store v86, v73;
    br block2(v67);

block21:
    v68 = cast v0 : u32;
    v69 = add.checked v68, 4 : u32;
    v70 = inttoptr v69 : *mut i32;
    store v70, v63;
    v71 = const.i32 8 : i32;
    v72 = add.wrapping v67, v71 : i32;
    v74 = cast v72 : u32;
    v75 = inttoptr v74 : *mut i32;
    store v75, v2;
    v76 = const.i32 0 : i32;
    v77 = cast v67 : u32;
    v78 = inttoptr v77 : *mut i32;
    store v78, v76;
    ret;
}

pub fn alloc::raw_vec::RawVec<T,A>::reserve_for_push(i32, i32) {
block0(v0: i32, v1: i32):
    v2 = const.i32 0 : i32;
    v3 = global.load (@__stack_pointer) as *mut i8 : i32;
    v4 = const.i32 32 : i32;
    v5 = sub.wrapping v3, v4 : i32;
    v6 = global.symbol @__stack_pointer : *mut i32;
    store v6, v5;
    v7 = const.i32 1 : i32;
    v8 = add.wrapping v1, v7 : i32;
    v9 = eq v8, 0 : i1;
    v10 = cast v9 : i32;
    v11 = neq v10, 0 : i1;
    condbr v11, block3, block4;

block1:
    ret;

block2:
    v89 = const.i32 32 : i32;
    v90 = add.wrapping v61, v89 : i32;
    v91 = global.symbol @__stack_pointer : *mut i32;
    store v91, v90;
    br block1;

block3:
    unreachable ;

block4:
    v12 = cast v0 : u32;
    v13 = add.checked v12, 4 : u32;
    v14 = inttoptr v13 : *mut i32;
    v15 = load v14 : i32;
    v16 = const.i32 1 : i32;
    v17 = shl.wrapping v15, v16 : i32;
    v18 = cast v17 : u32;
    v19 = cast v8 : u32;
    v20 = gt v18, v19 : i1;
    v21 = cast v20 : i32;
    v22 = neq v21, 0 : i1;
    v23 = select v22, v17, v8 : i32;
    v24 = const.i32 4 : i32;
    v25 = const.i32 4 : i32;
    v26 = cast v23 : u32;
    v27 = cast v25 : u32;
    v28 = gt v26, v27 : i1;
    v29 = cast v28 : i32;
    v30 = neq v29, 0 : i1;
    v31 = select v30, v23, v24 : i32;
    v32 = const.i32 2 : i32;
    v33 = shl.wrapping v31, v32 : i32;
    v34 = const.i32 536870912 : i32;
    v35 = cast v31 : u32;
    v36 = cast v34 : u32;
    v37 = lt v35, v36 : i1;
    v38 = cast v37 : i32;
    v39 = const.i32 2 : i32;
    v40 = shl.wrapping v38, v39 : i32;
    v41 = neq v15, 0 : i1;
    condbr v41, block6, block7;

block5:
    v62 = const.i32 8 : i32;
    v63 = add.wrapping v5, v62 : i32;
    v66 = const.i32 20 : i32;
    v67 = add.wrapping v61, v66 : i32;
    call noname::alloc::raw_vec::finish_grow(v63, v40, v33, v67);
    v68 = cast v61 : u32;
    v69 = add.checked v68, 12 : u32;
    v70 = inttoptr v69 : *mut i32;
    v71 = load v70 : i32;
    v72 = cast v61 : u32;
    v73 = add.checked v72, 8 : u32;
    v74 = inttoptr v73 : *mut i32;
    v75 = load v74 : i32;
    v76 = neq v75, 0 : i1;
    condbr v76, block8, block9;

block6:
    v46 = const.i32 4 : i32;
    v47 = cast v5 : u32;
    v48 = add.checked v47, 24 : u32;
    v49 = inttoptr v48 : *mut i32;
    store v49, v46;
    v50 = const.i32 2 : i32;
    v51 = shl.wrapping v15, v50 : i32;
    v52 = cast v5 : u32;
    v53 = add.checked v52, 28 : u32;
    v54 = inttoptr v53 : *mut i32;
    store v54, v51;
    v55 = cast v0 : u32;
    v56 = inttoptr v55 : *mut i32;
    v57 = load v56 : i32;
    v58 = cast v5 : u32;
    v59 = add.checked v58, 20 : u32;
    v60 = inttoptr v59 : *mut i32;
    store v60, v57;
    br block5;

block7:
    v42 = const.i32 0 : i32;
    v43 = cast v5 : u32;
    v44 = add.checked v43, 24 : u32;
    v45 = inttoptr v44 : *mut i32;
    store v45, v42;
    br block5;

block8:
    v84 = const.i32 -2147483647 : i32;
    v85 = eq v71, v84 : i1;
    v86 = cast v85 : i32;
    v87 = neq v86, 0 : i1;
    condbr v87, block2, block10;

block9:
    v79 = cast v0 : u32;
    v80 = add.checked v79, 4 : u32;
    v81 = inttoptr v80 : *mut i32;
    store v81, v31;
    v82 = cast v77 : u32;
    v83 = inttoptr v82 : *mut i32;
    store v83, v71;
    br block2;

block10:
    br block3;
}

pub fn vec_alloc() -> i32 {
block0:
    v1 = const.i32 0 : i32;
    v2 = global.load (@__stack_pointer) as *mut i8 : i32;
    v3 = const.i32 16 : i32;
    v4 = sub.wrapping v2, v3 : i32;
    v5 = global.symbol @__stack_pointer : *mut i32;
    store v5, v4;
    v6 = const.i32 0 : i32;
    v7 = cast v4 : u32;
    v8 = add.checked v7, 12 : u32;
    v9 = inttoptr v8 : *mut i32;
    store v9, v6;
    v10 = const.i64 4 : i64;
    v11 = cast v4 : u32;
    v12 = add.checked v11, 4 : u32;
    v13 = inttoptr v12 : *mut i64;
    store v13, v10;
    v14 = const.i32 4 : i32;
    v15 = add.wrapping v4, v14 : i32;
    v16 = const.i32 0 : i32;
    call noname::alloc::raw_vec::RawVec<T,A>::reserve_for_push(v15, v16);
    v17 = cast v4 : u32;
    v18 = add.checked v17, 4 : u32;
    v19 = inttoptr v18 : *mut i32;
    v20 = load v19 : i32;
    v21 = cast v4 : u32;
    v22 = add.checked v21, 12 : u32;
    v23 = inttoptr v22 : *mut i32;
    v24 = load v23 : i32;
    v25 = const.i32 2 : i32;
    v26 = shl.wrapping v24, v25 : i32;
    v27 = add.wrapping v20, v26 : i32;
    v28 = const.i32 1 : i32;
    v29 = cast v27 : u32;
    v30 = inttoptr v29 : *mut i32;
    store v30, v28;
    v31 = const.i32 -1 : i32;
    v32 = eq v24, v31 : i1;
    v33 = cast v32 : i32;
    v34 = neq v33, 0 : i1;
    condbr v34, block2, block3;

block1(v0: i32):

block2:
    unreachable ;

block3:
    v35 = cast v4 : u32;
    v36 = add.checked v35, 8 : u32;
    v37 = inttoptr v36 : *mut i32;
    v38 = load v37 : i32;
    v39 = eq v38, 0 : i1;
    v40 = cast v39 : i32;
    v41 = neq v40, 0 : i1;
    condbr v41, block4, block5;

block4:
    v44 = const.i32 16 : i32;
    v45 = add.wrapping v4, v44 : i32;
    v46 = global.symbol @__stack_pointer : *mut i32;
    store v46, v45;
    v47 = const.i32 1 : i32;
    ret v47;

block5:
    v42 = const.i32 1048580 : i32;
    call noname::dlmalloc::dlmalloc::Dlmalloc<A>::free(v42, v20);
    br block4;
}

pub fn compiler_builtins::mem::memcpy(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v4 = const.i32 0 : i32;
    v5 = const.i32 16 : i32;
    v6 = cast v2 : u32;
    v7 = cast v5 : u32;
    v8 = gte v6, v7 : i1;
    v9 = cast v8 : i32;
    v10 = neq v9, 0 : i1;
    condbr v10, block3, block4;

block1(v3: i32):
    ret v3;

block2(v133: i32, v137: i32, v159: i32, v161: i32):
    v134 = eq v133, 0 : i1;
    v135 = cast v134 : i32;
    v136 = neq v135, 0 : i1;
    condbr v136, block21, block22;

block3:
    v11 = const.i32 0 : i32;
    v12 = sub.wrapping v11, v0 : i32;
    v13 = const.i32 3 : i32;
    v14 = band v12, v13 : i32;
    v15 = add.wrapping v0, v14 : i32;
    v16 = eq v14, 0 : i1;
    v17 = cast v16 : i32;
    v18 = neq v17, 0 : i1;
    condbr v18, block5(v15), block6;

block4:
    br block2(v2, v0, v1, v0);

block5(v38: i32):
    v43 = sub.wrapping v2, v14 : i32;
    v44 = const.i32 -4 : i32;
    v45 = band v43, v44 : i32;
    v46 = add.wrapping v38, v45 : i32;
    v49 = add.wrapping v1, v41 : i32;
    v50 = const.i32 3 : i32;
    v51 = band v49, v50 : i32;
    v52 = eq v51, 0 : i1;
    v53 = cast v52 : i32;
    v54 = neq v53, 0 : i1;
    condbr v54, block11, block12;

block6:
    br block7(v0, v1);

block7(v19: i32, v20: i32):
    v21 = cast v20 : u32;
    v22 = inttoptr v21 : *mut u8;
    v23 = load v22 : u8;
    v24 = zext v23 : i32;
    v25 = trunc v24 : u8;
    v26 = cast v19 : u32;
    v27 = inttoptr v26 : *mut u8;
    store v27, v25;
    v28 = const.i32 1 : i32;
    v29 = add.wrapping v20, v28 : i32;
    v30 = const.i32 1 : i32;
    v31 = add.wrapping v19, v30 : i32;
    v33 = cast v31 : u32;
    v34 = cast v32 : u32;
    v35 = lt v33, v34 : i1;
    v36 = cast v35 : i32;
    v37 = neq v36, 0 : i1;
    condbr v37, block7(v31, v29), block9;

block8:
    br block5(v32);

block9:
    br block8;

block10(v138: i32, v162: i32):
    v124 = const.i32 3 : i32;
    v125 = band v43, v124 : i32;
    v132 = add.wrapping v49, v45 : i32;
    br block2(v125, v138, v132, v162);

block11:
    v100 = const.i32 1 : i32;
    v101 = lt v45, v100 : i1;
    v102 = cast v101 : i32;
    v103 = neq v102, 0 : i1;
    condbr v103, block10(v46, v163), block17;

block12:
    v55 = const.i32 1 : i32;
    v56 = lt v45, v55 : i1;
    v57 = cast v56 : i32;
    v58 = neq v57, 0 : i1;
    condbr v58, block10(v46, v0), block13;

block13:
    v59 = const.i32 3 : i32;
    v60 = shl.wrapping v49, v59 : i32;
    v61 = const.i32 24 : i32;
    v62 = band v60, v61 : i32;
    v63 = const.i32 -4 : i32;
    v64 = band v49, v63 : i32;
    v65 = const.i32 4 : i32;
    v66 = add.wrapping v64, v65 : i32;
    v67 = const.i32 0 : i32;
    v68 = sub.wrapping v67, v60 : i32;
    v69 = const.i32 24 : i32;
    v70 = band v68, v69 : i32;
    v71 = cast v64 : u32;
    v72 = inttoptr v71 : *mut i32;
    v73 = load v72 : i32;
    br block14(v38, v73, v66);

block14(v74: i32, v75: i32, v81: i32):
    v77 = cast v75 : u32;
    v78 = cast v76 : u32;
    v79 = shr.wrapping v77, v78 : u32;
    v80 = cast v79 : i32;
    v82 = cast v81 : u32;
    v83 = inttoptr v82 : *mut i32;
    v84 = load v83 : i32;
    v86 = shl.wrapping v84, v85 : i32;
    v87 = bor v80, v86 : i32;
    v88 = cast v74 : u32;
    v89 = inttoptr v88 : *mut i32;
    store v89, v87;
    v90 = const.i32 4 : i32;
    v91 = add.wrapping v81, v90 : i32;
    v92 = const.i32 4 : i32;
    v93 = add.wrapping v74, v92 : i32;
    v95 = cast v93 : u32;
    v96 = cast v94 : u32;
    v97 = lt v95, v96 : i1;
    v98 = cast v97 : i32;
    v99 = neq v98, 0 : i1;
    condbr v99, block14(v93, v84, v91), block16;

block15:

block16:
    br block10(v94, v163);

block17:
    br block18(v38, v49);

block18(v104: i32, v105: i32):
    v106 = cast v105 : u32;
    v107 = inttoptr v106 : *mut i32;
    v108 = load v107 : i32;
    v109 = cast v104 : u32;
    v110 = inttoptr v109 : *mut i32;
    store v110, v108;
    v111 = const.i32 4 : i32;
    v112 = add.wrapping v105, v111 : i32;
    v113 = const.i32 4 : i32;
    v114 = add.wrapping v104, v113 : i32;
    v116 = cast v114 : u32;
    v117 = cast v115 : u32;
    v118 = lt v116, v117 : i1;
    v119 = cast v118 : i32;
    v120 = neq v119, 0 : i1;
    condbr v120, block18(v114, v112), block20;

block19:
    br block10(v115, v163);

block20:
    br block19;

block21:
    br block1(v161);

block22:
    v139 = add.wrapping v137, v133 : i32;
    br block23(v137, v159);

block23(v140: i32, v141: i32):
    v142 = cast v141 : u32;
    v143 = inttoptr v142 : *mut u8;
    v144 = load v143 : u8;
    v145 = zext v144 : i32;
    v146 = trunc v145 : u8;
    v147 = cast v140 : u32;
    v148 = inttoptr v147 : *mut u8;
    store v148, v146;
    v149 = const.i32 1 : i32;
    v150 = add.wrapping v141, v149 : i32;
    v151 = const.i32 1 : i32;
    v152 = add.wrapping v140, v151 : i32;
    v154 = cast v152 : u32;
    v155 = cast v153 : u32;
    v156 = lt v154, v155 : i1;
    v157 = cast v156 : i32;
    v158 = neq v157, 0 : i1;
    condbr v158, block23(v152, v150), block25;

block24:
    br block21;

block25:
    br block24;
}

pub fn "memcpy"(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
    v4 = call noname::compiler_builtins::mem::memcpy(v0, v1, v2) : i32;
    br block1(v4);

block1(v3: i32):
    ret v3;
}
