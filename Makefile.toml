[config]
default_to_workspace = false
skip_core_tasks = true
skip_git_env_info = true
modify_core_tasks = { private = true, namespace = "default" }
init_task = "init"

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_CARGO_VERBOSE_FLAGS = { source = "${CARGO_MAKE_CI}", default_value = "", mapping = { "true" = "--verbose" } }
CARGO_MAKE_RUST_SCRIPT_PROVIDER = "rust-script"
CARGO_MAKE_USE_WORKSPACE_PROFILE = true
CARGO_MAKE_CARGO_BUILD_TEST_FLAGS = "--no-fail-fast"
CARGO_TARGET_DIR = { value = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target", condition = { env_not_set = ["CARGO_TARGET_DIR"] } }
BACKTRACE_DEFAULT = { source = "${CARGO_MAKE_CI}", mapping = { "true" = "1", "false" = "0" } }
RUST_BACKTRACE = { value = "${BACKTRACE_DEFAULT}", condition = { env_not_set = ["RUST_BACKTRACE"] } }
MIDEN_BIN_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin"
MIDEN_INSTALL_DIR = "${MIDEN_BIN_DIR}/${CARGO_MAKE_RUST_TARGET_TRIPLE}"

[tasks.init]
run_task = "print-env"

[tasks.default]
category = "Build"
description = "Default task builds the compiler"
alias = "build"

[tasks.print-env]
category = "Tools"
run_task = [{ name = ["print-build-env", "print-ci-env", "print-rust-env", "print-cargo-env"] }]

[tasks.print-build-env]
private = true
script = [
'''
#!@duckscript
echo "*************************************"
echo "Build Environment:"
echo "    Task: ${CARGO_MAKE_TASK}"
echo "    Task Arguments: ${CARGO_MAKE_TASK_ARGS}"
echo "    Command: ${CARGO_MAKE_COMMAND}"
echo "    Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}"
echo "    Target Directory: ${CARGO_TARGET_DIR}"
echo "    Profile: ${CARGO_MAKE_PROFILE}"
echo "    Bin Directory: ${MIDEN_BIN_DIR}"
echo "    Install Directory: ${MIDEN_INSTALL_DIR}"
echo "    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}"
echo "    RUST_BACKTRACE: ${RUST_BACKTRACE}"
echo "*************************************"
'''
]

[tasks.print-ci-env]
private = true
condition = { env = { "CARGO_MAKE_CI" = "true" } }
script = [
'''
#!@duckscript
echo "*************************************"
echo "CI:"
echo "    CI: ${CARGO_MAKE_CI}"
echo "    PR: ${CARGO_MAKE_PR}"
echo "    Branch Name: ${CARGO_MAKE_CI_BRANCH_NAME}"
echo "    CI Vendor: ${CARGO_MAKE_CI_VENDOR}"
echo "*************************************"
'''
]

[tasks.print-rust-env]
category = "Tools"
condition = { env_set = [ "CARGO_MAKE_RUST_CHANNEL" ] }
script = [
'''
#!@duckscript
echo "*************************************"
echo "Rust:"
echo "    Version: ${CARGO_MAKE_RUST_VERSION}"
echo "    Channel: ${CARGO_MAKE_RUST_CHANNEL}"
echo "    Target Arch: ${CARGO_MAKE_RUST_TARGET_ARCH}"
echo "    Target Env: ${CARGO_MAKE_RUST_TARGET_ENV}"
echo "    Target OS: ${CARGO_MAKE_RUST_TARGET_OS}"
echo "    Pointer Width: ${CARGO_MAKE_RUST_TARGET_POINTER_WIDTH}"
echo "    Target Triple: ${CARGO_MAKE_RUST_TARGET_TRIPLE}"
echo "*************************************"
'''
]

[tasks.print-cargo-env]
category = "Tools"
condition = { env_set = [ "CARGO_MAKE_CARGO_HOME" ] }
script = [
'''
#!@duckscript
echo "*************************************"
echo "Cargo:"
echo "    Home: ${CARGO_MAKE_CARGO_HOME}"
echo "    Profile: ${CARGO_MAKE_CARGO_PROFILE}"
echo "*************************************"
'''
]

[tasks.format]
category = "Development"
dependencies = ["format-rust"]

[tasks.check-format]
description = "Runs cargo fmt to check appropriate code format."
category = "Test"
command = "cargo"
args = ["fmt", "--", "--check"]
dependencies = ["install-rustfmt"]

[tasks.format-rust]
category = "Development"
description = "Formats source code (Rust)"
command = "cargo"
args = ["fmt"]
dependencies = ["install-rustfmt"]

[tasks.install-rustfmt]
category = "Development"
description = "Installs cargo rustfmt plugin."
env.CFG_RELEASE = { value = "${CARGO_MAKE_RUST_VERSION}", condition = { env_not_set = ["CFG_RELEASE"] } }
env.CFG_RELEASE_CHANNEL = { value = "${CARGO_MAKE_RUST_CHANNEL}", condition = { env_not_set = ["CFG_RELEASE_CHANNEL"] } }
install_crate = { crate_name = "rustfmt-nightly", rustup_component_name = "rustfmt", binary = "rustfmt", test_arg = "--help" }

[tasks.bloat]
category = "Development"
description = "Run cargo-bloat"
command = "cargo"
args = ["bloat", "${@}"]

[tasks.midenc]
category = "Build"
description = "Builds midenc and installs it to the bin folder"
command = "cargo"
args = ["-Z", "unstable-options", "build", "-p", "midenc", "--out-dir", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin"]

[tasks.build]
category = "Build"
description = "Runs cargo build on the workspace"
run_task = [
  { name = ["midenc"] },
]

[tasks.install]
category = "Install"
description = "Installs the compiler suite via cargo"
run_task = [
  { name = ["install-midenc"] },
]

[tasks.check]
category = "Build"
description = "Runs cargo check on the workspace"
command = "cargo"
args = ["check", "${@}"]

[tasks.clean]
category = "Build"
description = "Clean build artifacts"
command = "cargo"
args = ["clean", "${@}"]

[tasks.test]
category = "Test"
description = "Runs all tests"
dependencies = ["test-rust"]

[tasks.install-midenc]
category = "Install"
description = "Builds midenc and installs it globally via the cargo bin directory"
command = "cargo"
args = ["cargo", "install", "--path", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/midenc", "midenc"]

[tasks.install-wasm-target]
category = "Test"
description = "Install wasm32-unknown-unknown target"
command = "rustup"
args = ["target", "add", "wasm32-unknown-unknown"]

[tasks.install-wasm-wasi-target]
category = "Test"
description = "Install wasm32-wasi target"
command = "rustup"
args = ["target", "add", "wasm32-wasi"]

[tasks.install-rust-src]
category = "Test"
description = "Install rust-src component"
command = "rustup"
args = ["component", "add", "rust-src"]

[tasks.install-cargo-component]
category = "Test"
description = "Install cargo-component extension"
command = "cargo"
args = ["install", "cargo-component@0.6.0"]

[tasks.test-rust]
category = "Test"
description = "Runs tests written in Rust"
command = "cargo"
args = ["test", "@@remove-empty(CARGO_MAKE_CARGO_VERBOSE_FLAGS)", "@@split(CARGO_MAKE_CARGO_BUILD_TEST_FLAGS, )", "${@}"]
dependencies = ["install-wasm-target", "install-wasm-wasi-target", "install-rust-src", "install-cargo-component"]

[tasks.test-lit]
category = "Test"
description = "Runs the lit/filecheck test suite"
command = "bin/lit"
install_script = '''
if [ ! -f "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin/litcheck" ]; then
    cargo install --git 'https://github.com/bitwalker/litcheck' --root "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
    bin/litcheck help
fi
'''
args = ["run", "--path", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/bin", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/tests/lit/parse"]

[tasks.book]
category = "Build"
description = "Builds the compiler documentation"
dependencies = ["mdbook", "mdbook-linkcheck", "mdbook-alerts"]
command = "mdbook"
args = ["build", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/docs"]

[tasks.mdbook]
category = "Build"
install_crate = { crate_name = "mdbook", binary = "mdbook", test_arg = ["--help"] }

[tasks.mdbook-linkcheck]
category = "Build"
install_crate = { crate_name = "mdbook-linkcheck" }

[tasks.mdbook-alerts]
category = "Build"
install_crate = { crate_name = "mdbook-alerts" }

[tasks.serve-book]
category = "Build"
description = "Opens the compiler documentation"
install_crate = { crate_name = "mdbook", binary = "mdbook", test_arg = ["--help"] }
command = "mdbook"
args = ["serve", "--open", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/docs"]
