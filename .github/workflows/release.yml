# Runs `release-plz release` only after the release PR (starts with `release-plz-`) 
# is merged to the main branch. See `release_always = false` in `release-plz.toml` 
# Publishes any unpublished crates when.
# Does nothing if all crates are already published (i.e. have their versions on crates.io).
# Does not create/update release PRs.
# The crate version bumping and changelog generation is done via the `release-plz update` CLI command.
# Then manually create a release PR(starts with `release-plz-`) with the proposed changes and 
# when the PR is merged this action will publish the crates.
# See CONTRIBUTING.md for more details.

name: release-plz

on:
  push:
    branches:
      - main

env:
  CARGO_MAKE_TOOLCHAIN: nightly-2024-05-15

jobs:
  release-plz:
    name: release-plz
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.CARGO_MAKE_TOOLCHAIN }}
        override: true
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ github.workflow }}-${{ github.job }}-toolchain-${{ env.CARGO_MAKE_TOOLCHAIN }}
    - name: Publish Miden compiler crates
      uses: MarcoIeni/release-plz-action@v0.5
      with:
        # Only run the `release` command that publishes any unpublished crates.
        command: release
        # `manifest_path` is omitted because it defaults to the root directory
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    - name: Publish Miden SDK crates
      uses: MarcoIeni/release-plz-action@v0.5
      with:
        # Only run the `release` command that publishes any unpublished crates.
        command: release
        manifest_path: sdk/Cargo.toml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
