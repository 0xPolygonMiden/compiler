# Given an element index, and a word, in that order, drop the elements of the
# word other than the at the specified index.
#
# The element index must be in the range 0..=3.
export.extract_element # [element_index, w0, w1, w2, w3]
    # assert the index given is valid
    dup.0, push.3, lte, assert
    # compute a set of three booleans which used in conjunction with cdrop will
    # extract the desired element of the given word
    dup.0, push.3, lt, movdn.6   # [element_index, w0, ..w3, element_index < 3]
    dup.0, push.2, lt, movdn.6   # [element_index, w0, ..w3, element_index < 2, ..]
    push.1, lt                   # [element_index < 1, w0, ..w3, ..]

    # drop w1 if the element index is zero; or drop w0 if the element index is non-zero
    cdrop
    # drop w2 if the element index is one; or drop w0 and w1 if the element index is > 1
    movup.3, cdrop
    # drop w3 if the element index is two; or drop w0, w1, and w2 if the element index is 3
    #
    # after this point, the only value on the operand stack remaining will be
    # the element of the word indicated by the index that was on the top of the
    # stack on entry. We've consumed the word itself, as well as the element
    # index
    movup.2, cdrop
end

# See `load_felt` for safe usage
proc.load_felt_unchecked # [waddr, index]
    # load the word which contains the desired element
    mem_loadw  # [w0, w1, w2, w3, index]

    # select the desired element
    movup.4
    exec.extract_element
end

# Load a field element from the given native pointer triplet.
#
# A native pointer triplet consists of a word address which contains the
# start of the data; an element index, which indicates which element of
# the word the data starts in; and a byte offset, which indicates which
# byte is the start of the data.
#
# A field element must be naturally aligned, i.e. it's byte offset must be zero.
export.load_felt # [waddr, index, offset]
    # assert the pointer is felt-aligned, then load
    movup.2, assertz, exec.load_felt_unchecked
end

# Load a single 32-bit machine word from the given native pointer triplet.
#
# A native pointer triplet consists of a word address which contains the
# start of the data; an element index, which indicates which element of
# the word the data starts in; and a byte offset, which indicates which
# byte is the start of the data.
export.load_sw # [waddr, index, offset]
    # check for alignment and offset validity
    dup.2, eq.0
    dup.3, push.8, u32.checked_lt, assert # offset must be < 8
    # if the pointer is naturally aligned..
    if.true
        # drop the byte offset
        movup.2, drop
        # load the element containing the data we want
        exec.load_felt_unchecked
    else
        # check if the load starts in the first element
        dup.1, eq.0
        if.true
            # the load is across both the first and second elements
            # drop the element index
            swap.1, drop
            # load a word
            mem_loadw # [w0, w1, w2, w3, offset]
            # drop the unused elements
            movup.3, movup.3, drop, drop
            # shift high bits left by the offset
            dup.2, u32.checked_shl  # [hi, w1, offset]
            # move the low bits to the top and shift them as well
            swap.1, push.32, movup.3 # [offset, 32, w1, hi]
            u32.checked_sub # [32 - offset, w1, hi]
            u32.checked_shr # [lo, hi]
            # combine the two halves
            u32.or          # [result]
        else
            # check if the load starts in the second element
            dup.1, eq.1
            if.true
                # the load is across both the second and third elements
                # drop the element idnex
                swap.1, drop
                # load
                mem_loadw # [w0, w1, w2, w3, offset]
                # drop the unused elements
                drop, movdn.2, movdn.2, drop # [w1, w2, offset]
                # shift the high bits
                dup.2, u32.checked_shl  # [hi, w2, offset]
                # shift the low bits
                swap.1, push.32, movup.3  # [offset, 32, w2, hi]
                u32.checked_sub  # [32 - offset, w2, hi]
                u32.checked_shr  # [lo, hi]
                # combine the two halves
                u32.or           # [result]
            else
                # check if the load starts in the third element
                swap.1, eq.2
                if.true
                    # the load is across both the third and fourth elements
                    mem_loadw  # [w0, w1, w2, w3, offset]
                    # drop first two unused
                    drop, drop # [w2, w3, offset]
                    # shift the high bits
                    dup.2, u32.checked_shl  # [hi, w3, offset]
                    # shift the low bits
                    swap.1, push.32, movup.3  # [offset, 32, w3, hi]
                    u32.checked_sub  # [32 - offset, w3, hi]
                    u32.checked_shr  # [lo, hi]
                    # combine the two halves
                    u32.or           # [result]
                else
                    # the load crosses a word boundary
                    # start with the word containing the low bits
                    dup.0  # [waddr, waddr, offset]
                    u32.checked_add.1 # [waddr + 1, waddr, offset]
                    # load the word and drop the unused elements
                    mem_loadw, movdn.4, drop, drop, drop # [w0, waddr, offset]
                    # shift the low bits
                    push.32, dup.3  # [offset, 32, w0, waddr, offset]
                    u32.checked_sub # [32 - offset, w0, waddr, offset]
                    u32.checked_shr # [lo, waddr, offset]
                    # load the word with the high bits, drop unused elements
                    swap.1, mem_loadw, drop, drop, drop # [w3, lo, offset]
                    # shift high bits
                    movup.2, u32.checked_shl  # [hi, lo]
                    # combine the two halves
                    u32.or # [result]
                end
            end
        end
    end
end

# This handles emitting code that handles aligning an unaligned double
# machine-word value which is split across three machine words (field elements).
#
# To recap:
#
# * A machine word is a 32-bit chunk stored in a single field element
# * A double word is a pair of 32-bit chunks
# * A quad word is a quartet of 32-bit chunks (i.e. a Miden "word")
# * An unaligned double-word requires three 32-bit chunks to represent,
# since the first chunk does not contain a full 32-bits, so an extra is
# needed to hold those bits.
#
# As an example, assume the pointer we are dereferencing is a u64 value,
# which has 8-byte alignment, and the value is stored 40 bytes from the
# nearest quad-word-aligned boundary. To load the value, we must fetch
# the full quad-word from the aligned address, drop the first word, as
# it is unused, and then recombine the 64 bits we need spread across
# the remaining three words to obtain the double-word value we actually want.
#
# The data, on the stack, is shown below:
#
# If we visualize which bytes are contained in each 32-bit chunk on the stack,
# we get:
#
#     [0..=4, 5..=8, 9..=12]
#
# These byte indices are relative to the nearest word-aligned address, in the
# same order as they would occur in a byte-addressable address space. The
# significance of each byte depends on the value being dereferenced, but Miden
# is a little-endian machine, so typically the most significant bytes come first
# (i.e. also commonly referred to as "high" vs "low" bits).
#
# If we visualize the layout of the bits of our u64 value spread across the
# three chunks, we get:
#
#     [00000000111111111111111111111111, 111111111111111111111111111111, 11111111111111111111111100000000]
#
# As illustrated above, what should be a double-word value is occupying three words.
# To "realign" the value, i.e. ensure that it is naturally aligned and fits in two
# words, we have to perform a sequence of shifts and masks to get the bits where
# they belong. This function performs those steps, with the assumption that the caller
# has three values on the operand stack representing any unaligned double-word value
export.realign_dw # [chunk_hi, chunk_mid, chunk_lo, offset]
    # We will refer to the parts of our desired double-word value
    # as two parts, `x_hi` and `x_lo`.
    # Re-align the high bits by shifting out the offset
    #
    # This gives us the first half of the first word.
    dup.3, u32.checked_shl # [x_hi_hi, chunk_mid, chunk__lo, offset]

    # Move the value below the other chunks temporarily
    movdn.2 # [chunk_mid, chunk_lo, x_hi_hi, offset]

    # We must split the middle chunk into two parts,
    # one containing the bits to be combined with the
    # first machine word; the other to be combined with
    # the second machine word.
    #
    # First, we duplicate the chunk, since we need two
    # copies of it:
    #
    dup.0 # [chunk_mid, chunk_mid, chunk_lo, offset, x_hi_hi]

    # Then, we shift the chunk right by 32 - offset bits,
    # re-aligning the low bits of the first word, and
    # isolating them.
    push.32, dup.4, u32.checked_shr  # [x_hi_lo, chunk_mid, chunk_lo, offset, x_hi_hi]

    # Move the high bits back to the top
    #
    # [x_hi_hi, x_hi_lo, chunk_mid, chunk_lo]
    movup.4 # [x_hi_hi, x_hi_lo, chunk_mid, chunk_lo, offset]

    # OR the two parts of the `x_hi` chunk together
    u32.or # [x_hi, chunk_mid, chunk_lo, offset]

    # Move `x_hi` to the bottom for later
    movdn.2 # [chunk_mid, chunk_lo, x_hi, offset]

    # Now, we need to re-align the high bits of the second word
    # by shifting the remaining copy of the middle chunk, similar
    # to what we did at the very beginning.
    #
    # This gives us the first half of the second word.
    #
    # [x_lo_hi, chunk_lo, x_hi]
    dup.3, u32.checked_shl # [x_lo_hi, chunk_lo, x_hi, offset]

    # Next, swap the low bit chunk to the top temporarily
    swap.1

    # Shift the value right, as done previously for the middle chunk
    push.32, movup.4, u32.checked_shr # [x_lo_lo, x_lo_hi, x_hi]

    # OR the two halves together, giving us our second word, `x_lo`
    u32.or # [x_lo, x_hi]

    # Swap the words so they are in the correct order
    swap.1 # [x_hi, x_lo]
end


# Load a pair of machine words (32-bit elements) to the operand stack
export.load_dw # [waddr, index, offset]
    # check for alignment and offset validity
    dup.2, eq.0
    dup.3, push.8, u32.checked_lt, assert # offset must be < 8
    # if the pointer is naturally aligned..
    if.true
        # drop byte offset
        movup.2, drop
        # check which element to start at
        dup.1, eq.0
        if.true
            # drop index
            swap.1, drop
            # load first two elements
            mem_loadw
            # drop last two elements, and we're done
            movup.4, movup.4, drop, drop
        else
          dup.1, eq.1
          if.true
              # drop index
              swap.1, drop
              # load second and third elements
              mem_loadw
              # drop unused elements, and we're done
              drop, movup.3, drop
          else
              swap.1, eq.2
              if.true
                # load third and fourth elements, drop unused, and we're done
                mem_loadw, drop, drop
              else
                # load first element of next word, drop the rest
                dup.0, u32.checked_add.1, mem_loadw
                movup.4, movup.4, movup.4
                drop, drop, drop
                # load fourth element, and we're done
                movup.4, mem_loadw, drop, drop, drop
              end
          end
        end
    else # unaligned; an unaligned double-word spans three elements
        # check if we start in the first element
        dup.1, eq.0
        if.true
            # drop the index
            swap.1, drop
            # load three elements containing the double-word on the stack
            mem_loadw, movup.4, drop
            # re-align it, and we're done; realign_dw gets [w0, w1, w2, offset]
            exec.realign_dw
        else
            # check if we start in the second element
            dup.1, eq.1
            if.true
                # drop the index
                swap.1, drop
                # load three elements containing the double-word on the stack
                mem_loadw, drop
                # re-align it, and we're done; realign_dw gets [w1, w2, w3, offset]
                exec.realign_dw
            else
                # check if we start in the third element
                swap.1, eq.2
                if.true
                    # load one element from the next word
                    dup.0, u32.checked_add.1, mem_loadw
                    movup.4, movup.4, movup.4, drop, drop, drop
                    # load two elements from the first word
                    swap.1, mem_loadw, drop, drop
                    # re-align it, and we're done; realign_dw gets [w2, w3, w0, offset]
                    exec.realign_dw
                else
                    # load the two least-significant elements from the next word first
                    dup.0, u32.checked_add.1, mem_loadw
                    movup.4, movup.4, drop, drop
                    # load the most significant element from the first word
                    movup.2, mem_loadw, drop, drop, drop
                    # re-align it, and we're done; realign_dw gets [w3, w1, w0, offset]
                    exec.realign_dw
                end
            end
        end
    end
end
